
L4CD_Driver_Examples.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ca0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08004e40  08004e40  00014e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ff4  08004ff4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004ff4  08004ff4  00014ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ffc  08004ffc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ffc  08004ffc  00014ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005000  08005000  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000070  08005074  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08005074  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c519  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ba0  00000000  00000000  0002c5b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  0002e160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a48  00000000  00000000  0002ec38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f36  00000000  00000000  0002f680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d7c9  00000000  00000000  000465b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089f31  00000000  00000000  00053d7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ddcb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003480  00000000  00000000  000ddd00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004e28 	.word	0x08004e28

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004e28 	.word	0x08004e28

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800058c:	1d39      	adds	r1, r7, #4
 800058e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000592:	2201      	movs	r2, #1
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <__io_putchar+0x20>)
 8000596:	f003 f89c 	bl	80036d2 <HAL_UART_Transmit>
	return ch;
 800059a:	687b      	ldr	r3, [r7, #4]
}
 800059c:	4618      	mov	r0, r3
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200000e0 	.word	0x200000e0

080005a8 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin==GPIO_PIN_4)
 80005b2:	88fb      	ldrh	r3, [r7, #6]
 80005b4:	2b10      	cmp	r3, #16
 80005b6:	d104      	bne.n	80005c2 <HAL_GPIO_EXTI_Callback+0x1a>
	{
		IntCount++;
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x28>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	3301      	adds	r3, #1
 80005be:	4a04      	ldr	r2, [pc, #16]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x28>)
 80005c0:	6013      	str	r3, [r2, #0]
	}
}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	20000128 	.word	0x20000128

080005d4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005d8:	f001 f8a2 	bl	8001720 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005dc:	f000 f872 	bl	80006c4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005e0:	f000 f934 	bl	800084c <MX_GPIO_Init>
	MX_I2C1_Init();
 80005e4:	f000 f8da 	bl	800079c <MX_I2C1_Init>
	MX_USART2_UART_Init();
 80005e8:	f000 f906 	bl	80007f8 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	/* Assign the default address to the sensor */
	dev = 0x52;
 80005ec:	4b2d      	ldr	r3, [pc, #180]	; (80006a4 <main+0xd0>)
 80005ee:	2252      	movs	r2, #82	; 0x52
 80005f0:	801a      	strh	r2, [r3, #0]

	/* Toggle Xshut pin to reset the sensor */

	HAL_GPIO_WritePin(GPIOB, TOF_C_XSHUT_Pin, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2108      	movs	r1, #8
 80005f6:	482c      	ldr	r0, [pc, #176]	; (80006a8 <main+0xd4>)
 80005f8:	f001 fbbe 	bl	8001d78 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80005fc:	2005      	movs	r0, #5
 80005fe:	f001 f901 	bl	8001804 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, TOF_C_XSHUT_Pin, GPIO_PIN_SET);
 8000602:	2201      	movs	r2, #1
 8000604:	2108      	movs	r1, #8
 8000606:	4828      	ldr	r0, [pc, #160]	; (80006a8 <main+0xd4>)
 8000608:	f001 fbb6 	bl	8001d78 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800060c:	2005      	movs	r0, #5
 800060e:	f001 f8f9 	bl	8001804 <HAL_Delay>

	/* Print the software version */

	/* Print the software version */
	status = VL53L4CD_GetSWVersion(&sw_version);
 8000612:	4826      	ldr	r0, [pc, #152]	; (80006ac <main+0xd8>)
 8000614:	f000 fd1b 	bl	800104e <VL53L4CD_GetSWVersion>
 8000618:	4603      	mov	r3, r0
 800061a:	461a      	mov	r2, r3
 800061c:	4b24      	ldr	r3, [pc, #144]	; (80006b0 <main+0xdc>)
 800061e:	601a      	str	r2, [r3, #0]
	printf("Starting VL53L4CD driver version %u.%u.%u\n",
			sw_version.major,
 8000620:	4b22      	ldr	r3, [pc, #136]	; (80006ac <main+0xd8>)
 8000622:	781b      	ldrb	r3, [r3, #0]
	printf("Starting VL53L4CD driver version %u.%u.%u\n",
 8000624:	4619      	mov	r1, r3
			sw_version.minor,
 8000626:	4b21      	ldr	r3, [pc, #132]	; (80006ac <main+0xd8>)
 8000628:	785b      	ldrb	r3, [r3, #1]
	printf("Starting VL53L4CD driver version %u.%u.%u\n",
 800062a:	461a      	mov	r2, r3
			sw_version.build);
 800062c:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <main+0xd8>)
 800062e:	789b      	ldrb	r3, [r3, #2]
	printf("Starting VL53L4CD driver version %u.%u.%u\n",
 8000630:	4820      	ldr	r0, [pc, #128]	; (80006b4 <main+0xe0>)
 8000632:	f003 fbf5 	bl	8003e20 <iprintf>


	/* Check if VL53L4CD is connected. 0xebaa is the sensor id. */
	status = VL53L4CD_GetSensorId(dev, &sensor_id);
 8000636:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <main+0xd0>)
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	491f      	ldr	r1, [pc, #124]	; (80006b8 <main+0xe4>)
 800063c:	4618      	mov	r0, r3
 800063e:	f000 fd1f 	bl	8001080 <VL53L4CD_GetSensorId>
 8000642:	4603      	mov	r3, r0
 8000644:	461a      	mov	r2, r3
 8000646:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <main+0xdc>)
 8000648:	601a      	str	r2, [r3, #0]
	if(status || (sensor_id != 0xebaa))
 800064a:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <main+0xdc>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d105      	bne.n	800065e <main+0x8a>
 8000652:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <main+0xe4>)
 8000654:	881b      	ldrh	r3, [r3, #0]
 8000656:	f64e 32aa 	movw	r2, #60330	; 0xebaa
 800065a:	4293      	cmp	r3, r2
 800065c:	d005      	beq.n	800066a <main+0x96>
	{
		printf("VL53L4CD not detected\n");
 800065e:	4817      	ldr	r0, [pc, #92]	; (80006bc <main+0xe8>)
 8000660:	f003 fc64 	bl	8003f2c <puts>
		return status;
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <main+0xdc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	e01a      	b.n	80006a0 <main+0xcc>
	}
	status = VL53L4CD_SensorInit(dev);
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <main+0xd0>)
 800066c:	881b      	ldrh	r3, [r3, #0]
 800066e:	4618      	mov	r0, r3
 8000670:	f000 fd20 	bl	80010b4 <VL53L4CD_SensorInit>
 8000674:	4603      	mov	r3, r0
 8000676:	461a      	mov	r2, r3
 8000678:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <main+0xdc>)
 800067a:	601a      	str	r2, [r3, #0]
	/* Program the lowest possible TimingBudget, without enabling the
	 * low power mode. This gives the highest ranging frequency (100Hz) */
	status = VL53L4CD_SetRangeTiming(dev, 10, 0);
#endif

	printf("Ranging starts\n");
 800067c:	4810      	ldr	r0, [pc, #64]	; (80006c0 <main+0xec>)
 800067e:	f003 fc55 	bl	8003f2c <puts>
	status = VL53L4CD_StartRanging(dev);
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <main+0xd0>)
 8000684:	881b      	ldrh	r3, [r3, #0]
 8000686:	4618      	mov	r0, r3
 8000688:	f000 fdef 	bl	800126a <VL53L4CD_StartRanging>
 800068c:	4603      	mov	r3, r0
 800068e:	461a      	mov	r2, r3
 8000690:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <main+0xdc>)
 8000692:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN WHILE */
	if (is_interrupt) {
		get_data_by_interrupt(dev);
	}
	else {
		get_data_by_polling(dev);
 8000694:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <main+0xd0>)
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	4618      	mov	r0, r3
 800069a:	f000 f983 	bl	80009a4 <get_data_by_polling>
 800069e:	2300      	movs	r3, #0

	/* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */
	/* USER CODE END 3 */
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	2000012e 	.word	0x2000012e
 80006a8:	40020400 	.word	0x40020400
 80006ac:	20000144 	.word	0x20000144
 80006b0:	20000124 	.word	0x20000124
 80006b4:	08004e40 	.word	0x08004e40
 80006b8:	20000130 	.word	0x20000130
 80006bc:	08004e6c 	.word	0x08004e6c
 80006c0:	08004e84 	.word	0x08004e84

080006c4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	; 0x50
 80006c8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	2230      	movs	r2, #48	; 0x30
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 fb9c 	bl	8003e10 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemClock_Config+0xd0>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	4a28      	ldr	r2, [pc, #160]	; (8000794 <SystemClock_Config+0xd0>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	; 0x40
 80006f8:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemClock_Config+0xd0>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemClock_Config+0xd4>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <SystemClock_Config+0xd4>)
 8000712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <SystemClock_Config+0xd4>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000724:	2302      	movs	r3, #2
 8000726:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000728:	2301      	movs	r3, #1
 800072a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072c:	2310      	movs	r3, #16
 800072e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000730:	2302      	movs	r3, #2
 8000732:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000734:	2300      	movs	r3, #0
 8000736:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000738:	2310      	movs	r3, #16
 800073a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 800073c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000740:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000742:	2304      	movs	r3, #4
 8000744:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000746:	2307      	movs	r3, #7
 8000748:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074a:	f107 0320 	add.w	r3, r7, #32
 800074e:	4618      	mov	r0, r3
 8000750:	f002 fada 	bl	8002d08 <HAL_RCC_OscConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0x9a>
	{
		Error_Handler();
 800075a:	f000 f957 	bl	8000a0c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075e:	230f      	movs	r3, #15
 8000760:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000762:	2302      	movs	r3, #2
 8000764:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800076a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2102      	movs	r1, #2
 800077a:	4618      	mov	r0, r3
 800077c:	f002 fd3c 	bl	80031f8 <HAL_RCC_ClockConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8000786:	f000 f941 	bl	8000a0c <Error_Handler>
	}
}
 800078a:	bf00      	nop
 800078c:	3750      	adds	r7, #80	; 0x50
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000

0800079c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <MX_I2C1_Init+0x50>)
 80007a2:	4a13      	ldr	r2, [pc, #76]	; (80007f0 <MX_I2C1_Init+0x54>)
 80007a4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_I2C1_Init+0x50>)
 80007a8:	4a12      	ldr	r2, [pc, #72]	; (80007f4 <MX_I2C1_Init+0x58>)
 80007aa:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_I2C1_Init+0x50>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_I2C1_Init+0x50>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_I2C1_Init+0x50>)
 80007ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007be:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <MX_I2C1_Init+0x50>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_I2C1_Init+0x50>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007cc:	4b07      	ldr	r3, [pc, #28]	; (80007ec <MX_I2C1_Init+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_I2C1_Init+0x50>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007d8:	4804      	ldr	r0, [pc, #16]	; (80007ec <MX_I2C1_Init+0x50>)
 80007da:	f001 faff 	bl	8001ddc <HAL_I2C_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 80007e4:	f000 f912 	bl	8000a0c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	2000008c 	.word	0x2000008c
 80007f0:	40005400 	.word	0x40005400
 80007f4:	000186a0 	.word	0x000186a0

080007f8 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80007fc:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_USART2_UART_Init+0x4c>)
 80007fe:	4a12      	ldr	r2, [pc, #72]	; (8000848 <MX_USART2_UART_Init+0x50>)
 8000800:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <MX_USART2_UART_Init+0x4c>)
 8000804:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000808:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_USART2_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_USART2_UART_Init+0x4c>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <MX_USART2_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_USART2_UART_Init+0x4c>)
 800081e:	220c      	movs	r2, #12
 8000820:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <MX_USART2_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_USART2_UART_Init+0x4c>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_USART2_UART_Init+0x4c>)
 8000830:	f002 ff02 	bl	8003638 <HAL_UART_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 800083a:	f000 f8e7 	bl	8000a0c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	200000e0 	.word	0x200000e0
 8000848:	40004400 	.word	0x40004400

0800084c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	; 0x28
 8000850:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b4b      	ldr	r3, [pc, #300]	; (8000994 <MX_GPIO_Init+0x148>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a4a      	ldr	r2, [pc, #296]	; (8000994 <MX_GPIO_Init+0x148>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b48      	ldr	r3, [pc, #288]	; (8000994 <MX_GPIO_Init+0x148>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b44      	ldr	r3, [pc, #272]	; (8000994 <MX_GPIO_Init+0x148>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a43      	ldr	r2, [pc, #268]	; (8000994 <MX_GPIO_Init+0x148>)
 8000888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b41      	ldr	r3, [pc, #260]	; (8000994 <MX_GPIO_Init+0x148>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	4b3d      	ldr	r3, [pc, #244]	; (8000994 <MX_GPIO_Init+0x148>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a3c      	ldr	r2, [pc, #240]	; (8000994 <MX_GPIO_Init+0x148>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b3a      	ldr	r3, [pc, #232]	; (8000994 <MX_GPIO_Init+0x148>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b36      	ldr	r3, [pc, #216]	; (8000994 <MX_GPIO_Init+0x148>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a35      	ldr	r2, [pc, #212]	; (8000994 <MX_GPIO_Init+0x148>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b33      	ldr	r3, [pc, #204]	; (8000994 <MX_GPIO_Init+0x148>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2120      	movs	r1, #32
 80008d6:	4830      	ldr	r0, [pc, #192]	; (8000998 <MX_GPIO_Init+0x14c>)
 80008d8:	f001 fa4e 	bl	8001d78 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, TOF_L_XSHUT_Pin|TOF_C_XSHUT_Pin|TOF_R_XSHUT_Pin, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	f44f 6185 	mov.w	r1, #1064	; 0x428
 80008e2:	482e      	ldr	r0, [pc, #184]	; (800099c <MX_GPIO_Init+0x150>)
 80008e4:	f001 fa48 	bl	8001d78 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : B1_Pin TOF_L_INT_Pin */
	GPIO_InitStruct.Pin = B1_Pin|TOF_L_INT_Pin;
 80008e8:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 80008ec:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ee:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008f2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4619      	mov	r1, r3
 80008fe:	4828      	ldr	r0, [pc, #160]	; (80009a0 <MX_GPIO_Init+0x154>)
 8000900:	f001 f8b6 	bl	8001a70 <HAL_GPIO_Init>

	/*Configure GPIO pins : TOF_C_INT_Pin TOF_R_INT_Pin */
	GPIO_InitStruct.Pin = TOF_C_INT_Pin|TOF_R_INT_Pin;
 8000904:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000908:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800090a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800090e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4619      	mov	r1, r3
 800091a:	481f      	ldr	r0, [pc, #124]	; (8000998 <MX_GPIO_Init+0x14c>)
 800091c:	f001 f8a8 	bl	8001a70 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000920:	2320      	movs	r3, #32
 8000922:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4619      	mov	r1, r3
 8000936:	4818      	ldr	r0, [pc, #96]	; (8000998 <MX_GPIO_Init+0x14c>)
 8000938:	f001 f89a 	bl	8001a70 <HAL_GPIO_Init>

	/*Configure GPIO pins : TOF_L_XSHUT_Pin TOF_C_XSHUT_Pin TOF_R_XSHUT_Pin */
	GPIO_InitStruct.Pin = TOF_L_XSHUT_Pin|TOF_C_XSHUT_Pin|TOF_R_XSHUT_Pin;
 800093c:	f44f 6385 	mov.w	r3, #1064	; 0x428
 8000940:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000946:	2301      	movs	r3, #1
 8000948:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	4811      	ldr	r0, [pc, #68]	; (800099c <MX_GPIO_Init+0x150>)
 8000956:	f001 f88b 	bl	8001a70 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2100      	movs	r1, #0
 800095e:	200a      	movs	r0, #10
 8000960:	f001 f84f 	bl	8001a02 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000964:	200a      	movs	r0, #10
 8000966:	f001 f868 	bl	8001a3a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	2017      	movs	r0, #23
 8000970:	f001 f847 	bl	8001a02 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000974:	2017      	movs	r0, #23
 8000976:	f001 f860 	bl	8001a3a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2100      	movs	r1, #0
 800097e:	2028      	movs	r0, #40	; 0x28
 8000980:	f001 f83f 	bl	8001a02 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000984:	2028      	movs	r0, #40	; 0x28
 8000986:	f001 f858 	bl	8001a3a <HAL_NVIC_EnableIRQ>

}
 800098a:	bf00      	nop
 800098c:	3728      	adds	r7, #40	; 0x28
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800
 8000998:	40020000 	.word	0x40020000
 800099c:	40020400 	.word	0x40020400
 80009a0:	40020800 	.word	0x40020800

080009a4 <get_data_by_polling>:
		}
	}while(1);
}


void get_data_by_polling(uint16_t dev){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	80fb      	strh	r3, [r7, #6]
	do
	{
		status = VL53L4CD_CheckForDataReady(dev, &p_data_ready);
 80009ae:	88fb      	ldrh	r3, [r7, #6]
 80009b0:	4912      	ldr	r1, [pc, #72]	; (80009fc <get_data_by_polling+0x58>)
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 fca2 	bl	80012fc <VL53L4CD_CheckForDataReady>
 80009b8:	4603      	mov	r3, r0
 80009ba:	461a      	mov	r2, r3
 80009bc:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <get_data_by_polling+0x5c>)
 80009be:	601a      	str	r2, [r3, #0]
		if(p_data_ready){
 80009c0:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <get_data_by_polling+0x58>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d014      	beq.n	80009f2 <get_data_by_polling+0x4e>

			/* Read measured distance. RangeStatus = 0 means valid data */
			VL53L4CD_GetResult(dev, &results);
 80009c8:	88fb      	ldrh	r3, [r7, #6]
 80009ca:	490e      	ldr	r1, [pc, #56]	; (8000a04 <get_data_by_polling+0x60>)
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 fdf7 	bl	80015c0 <VL53L4CD_GetResult>
			printf("Status = %3u, Distance = %5u mm, Signal = %6u kcps/spad\n",
					results.range_status,
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <get_data_by_polling+0x60>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
			printf("Status = %3u, Distance = %5u mm, Signal = %6u kcps/spad\n",
 80009d6:	4619      	mov	r1, r3
					results.distance_mm,
 80009d8:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <get_data_by_polling+0x60>)
 80009da:	885b      	ldrh	r3, [r3, #2]
			printf("Status = %3u, Distance = %5u mm, Signal = %6u kcps/spad\n",
 80009dc:	461a      	mov	r2, r3
					results.signal_per_spad_kcps);
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <get_data_by_polling+0x60>)
 80009e0:	895b      	ldrh	r3, [r3, #10]
			printf("Status = %3u, Distance = %5u mm, Signal = %6u kcps/spad\n",
 80009e2:	4809      	ldr	r0, [pc, #36]	; (8000a08 <get_data_by_polling+0x64>)
 80009e4:	f003 fa1c 	bl	8003e20 <iprintf>

			/* (Mandatory) Clear HW interrupt to restart measurements */
				VL53L4CD_ClearInterrupt(dev);
 80009e8:	88fb      	ldrh	r3, [r7, #6]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 fc26 	bl	800123c <VL53L4CD_ClearInterrupt>
 80009f0:	e7dd      	b.n	80009ae <get_data_by_polling+0xa>

		}else{
			HAL_Delay(5);
 80009f2:	2005      	movs	r0, #5
 80009f4:	f000 ff06 	bl	8001804 <HAL_Delay>
		status = VL53L4CD_CheckForDataReady(dev, &p_data_ready);
 80009f8:	e7d9      	b.n	80009ae <get_data_by_polling+0xa>
 80009fa:	bf00      	nop
 80009fc:	2000012c 	.word	0x2000012c
 8000a00:	20000124 	.word	0x20000124
 8000a04:	20000134 	.word	0x20000134
 8000a08:	08004e94 	.word	0x08004e94

08000a0c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a14:	e7fe      	b.n	8000a14 <Error_Handler+0x8>
	...

08000a18 <VL53L4CD_RdDWord>:
#include "platform.h"

extern I2C_HandleTypeDef 	hi2c1;

uint8_t VL53L4CD_RdDWord(uint16_t dev, uint16_t RegisterAdress, uint32_t *value)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af02      	add	r7, sp, #8
 8000a1e:	4603      	mov	r3, r0
 8000a20:	603a      	str	r2, [r7, #0]
 8000a22:	80fb      	strh	r3, [r7, #6]
 8000a24:	460b      	mov	r3, r1
 8000a26:	80bb      	strh	r3, [r7, #4]
	uint8_t status = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	73fb      	strb	r3, [r7, #15]
	uint8_t data_write[2];
	uint8_t data_read[4];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8000a2c:	88bb      	ldrh	r3, [r7, #4]
 8000a2e:	0a1b      	lsrs	r3, r3, #8
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 8000a36:	88bb      	ldrh	r3, [r7, #4]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 8000a3c:	f107 020c 	add.w	r2, r7, #12
 8000a40:	88f9      	ldrh	r1, [r7, #6]
 8000a42:	2364      	movs	r3, #100	; 0x64
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	2302      	movs	r3, #2
 8000a48:	4810      	ldr	r0, [pc, #64]	; (8000a8c <VL53L4CD_RdDWord+0x74>)
 8000a4a:	f001 fb0b 	bl	8002064 <HAL_I2C_Master_Transmit>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Receive(&hi2c1, dev, data_read, 4, 100);
 8000a52:	f107 0208 	add.w	r2, r7, #8
 8000a56:	88f9      	ldrh	r1, [r7, #6]
 8000a58:	2364      	movs	r3, #100	; 0x64
 8000a5a:	9300      	str	r3, [sp, #0]
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	480b      	ldr	r0, [pc, #44]	; (8000a8c <VL53L4CD_RdDWord+0x74>)
 8000a60:	f001 fbfe 	bl	8002260 <HAL_I2C_Master_Receive>
 8000a64:	4603      	mov	r3, r0
 8000a66:	73fb      	strb	r3, [r7, #15]
	*value =  ((data_read[0] << 24) | (data_read[1]<<16) |
 8000a68:	7a3b      	ldrb	r3, [r7, #8]
 8000a6a:	061a      	lsls	r2, r3, #24
 8000a6c:	7a7b      	ldrb	r3, [r7, #9]
 8000a6e:	041b      	lsls	r3, r3, #16
 8000a70:	431a      	orrs	r2, r3
			(data_read[2]<<8)| (data_read[3]));
 8000a72:	7abb      	ldrb	r3, [r7, #10]
 8000a74:	021b      	lsls	r3, r3, #8
	*value =  ((data_read[0] << 24) | (data_read[1]<<16) |
 8000a76:	4313      	orrs	r3, r2
			(data_read[2]<<8)| (data_read[3]));
 8000a78:	7afa      	ldrb	r2, [r7, #11]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	461a      	mov	r2, r3
	*value =  ((data_read[0] << 24) | (data_read[1]<<16) |
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	601a      	str	r2, [r3, #0]
	return status;
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	2000008c 	.word	0x2000008c

08000a90 <VL53L4CD_RdWord>:

uint8_t VL53L4CD_RdWord(uint16_t dev, uint16_t RegisterAdress, uint16_t *value)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af02      	add	r7, sp, #8
 8000a96:	4603      	mov	r3, r0
 8000a98:	603a      	str	r2, [r7, #0]
 8000a9a:	80fb      	strh	r3, [r7, #6]
 8000a9c:	460b      	mov	r3, r1
 8000a9e:	80bb      	strh	r3, [r7, #4]
	uint8_t status = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	73fb      	strb	r3, [r7, #15]
	uint8_t data_write[2];
	uint8_t data_read[2];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8000aa4:	88bb      	ldrh	r3, [r7, #4]
 8000aa6:	0a1b      	lsrs	r3, r3, #8
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 8000aae:	88bb      	ldrh	r3, [r7, #4]
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 8000ab4:	f107 020c 	add.w	r2, r7, #12
 8000ab8:	88f9      	ldrh	r1, [r7, #6]
 8000aba:	2364      	movs	r3, #100	; 0x64
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	2302      	movs	r3, #2
 8000ac0:	480f      	ldr	r0, [pc, #60]	; (8000b00 <VL53L4CD_RdWord+0x70>)
 8000ac2:	f001 facf 	bl	8002064 <HAL_I2C_Master_Transmit>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Receive(&hi2c1, dev, data_read, 2, 100);
 8000aca:	f107 0208 	add.w	r2, r7, #8
 8000ace:	88f9      	ldrh	r1, [r7, #6]
 8000ad0:	2364      	movs	r3, #100	; 0x64
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	480a      	ldr	r0, [pc, #40]	; (8000b00 <VL53L4CD_RdWord+0x70>)
 8000ad8:	f001 fbc2 	bl	8002260 <HAL_I2C_Master_Receive>
 8000adc:	4603      	mov	r3, r0
 8000ade:	73fb      	strb	r3, [r7, #15]
	*value = (data_read[0] << 8) | (data_read[1]);
 8000ae0:	7a3b      	ldrb	r3, [r7, #8]
 8000ae2:	021b      	lsls	r3, r3, #8
 8000ae4:	b21a      	sxth	r2, r3
 8000ae6:	7a7b      	ldrb	r3, [r7, #9]
 8000ae8:	b21b      	sxth	r3, r3
 8000aea:	4313      	orrs	r3, r2
 8000aec:	b21b      	sxth	r3, r3
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	801a      	strh	r2, [r3, #0]
	return status;
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	2000008c 	.word	0x2000008c

08000b04 <VL53L4CD_RdByte>:

uint8_t VL53L4CD_RdByte(uint16_t dev, uint16_t RegisterAdress, uint8_t *value)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af02      	add	r7, sp, #8
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	603a      	str	r2, [r7, #0]
 8000b0e:	80fb      	strh	r3, [r7, #6]
 8000b10:	460b      	mov	r3, r1
 8000b12:	80bb      	strh	r3, [r7, #4]
	uint8_t status = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	73fb      	strb	r3, [r7, #15]
	uint8_t data_write[2];
	uint8_t data_read[1];

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8000b18:	88bb      	ldrh	r3, [r7, #4]
 8000b1a:	0a1b      	lsrs	r3, r3, #8
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 8000b22:	88bb      	ldrh	r3, [r7, #4]
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 2, 100);
 8000b28:	f107 020c 	add.w	r2, r7, #12
 8000b2c:	88f9      	ldrh	r1, [r7, #6]
 8000b2e:	2364      	movs	r3, #100	; 0x64
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	2302      	movs	r3, #2
 8000b34:	480b      	ldr	r0, [pc, #44]	; (8000b64 <VL53L4CD_RdByte+0x60>)
 8000b36:	f001 fa95 	bl	8002064 <HAL_I2C_Master_Transmit>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	73fb      	strb	r3, [r7, #15]
	status = HAL_I2C_Master_Receive(&hi2c1, dev, data_read, 1, 100);
 8000b3e:	f107 0208 	add.w	r2, r7, #8
 8000b42:	88f9      	ldrh	r1, [r7, #6]
 8000b44:	2364      	movs	r3, #100	; 0x64
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	2301      	movs	r3, #1
 8000b4a:	4806      	ldr	r0, [pc, #24]	; (8000b64 <VL53L4CD_RdByte+0x60>)
 8000b4c:	f001 fb88 	bl	8002260 <HAL_I2C_Master_Receive>
 8000b50:	4603      	mov	r3, r0
 8000b52:	73fb      	strb	r3, [r7, #15]
	*value = data_read[0];
 8000b54:	7a3a      	ldrb	r2, [r7, #8]
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	701a      	strb	r2, [r3, #0]
	return status;
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	2000008c 	.word	0x2000008c

08000b68 <VL53L4CD_WrByte>:

uint8_t VL53L4CD_WrByte(uint16_t dev, uint16_t RegisterAdress, uint8_t value)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af02      	add	r7, sp, #8
 8000b6e:	4603      	mov	r3, r0
 8000b70:	80fb      	strh	r3, [r7, #6]
 8000b72:	460b      	mov	r3, r1
 8000b74:	80bb      	strh	r3, [r7, #4]
 8000b76:	4613      	mov	r3, r2
 8000b78:	70fb      	strb	r3, [r7, #3]
	uint8_t data_write[3];
	uint8_t status = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	73fb      	strb	r3, [r7, #15]

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8000b7e:	88bb      	ldrh	r3, [r7, #4]
 8000b80:	0a1b      	lsrs	r3, r3, #8
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	733b      	strb	r3, [r7, #12]
	data_write[1] = RegisterAdress & 0xFF;
 8000b88:	88bb      	ldrh	r3, [r7, #4]
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	737b      	strb	r3, [r7, #13]
	data_write[2] = value & 0xFF;
 8000b8e:	78fb      	ldrb	r3, [r7, #3]
 8000b90:	73bb      	strb	r3, [r7, #14]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 3, 100);
 8000b92:	f107 020c 	add.w	r2, r7, #12
 8000b96:	88f9      	ldrh	r1, [r7, #6]
 8000b98:	2364      	movs	r3, #100	; 0x64
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <VL53L4CD_WrByte+0x4c>)
 8000ba0:	f001 fa60 	bl	8002064 <HAL_I2C_Master_Transmit>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	73fb      	strb	r3, [r7, #15]
	return status;
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	2000008c 	.word	0x2000008c

08000bb8 <VL53L4CD_WrWord>:

uint8_t VL53L4CD_WrWord(uint16_t dev, uint16_t RegisterAdress, uint16_t value)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af02      	add	r7, sp, #8
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	80fb      	strh	r3, [r7, #6]
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	80bb      	strh	r3, [r7, #4]
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	807b      	strh	r3, [r7, #2]
	uint8_t data_write[4];
	uint8_t status = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	73fb      	strb	r3, [r7, #15]
	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8000bce:	88bb      	ldrh	r3, [r7, #4]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	723b      	strb	r3, [r7, #8]
	data_write[1] = RegisterAdress & 0xFF;
 8000bd8:	88bb      	ldrh	r3, [r7, #4]
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	727b      	strb	r3, [r7, #9]
	data_write[2] = (value >> 8) & 0xFF;
 8000bde:	887b      	ldrh	r3, [r7, #2]
 8000be0:	0a1b      	lsrs	r3, r3, #8
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	72bb      	strb	r3, [r7, #10]
	data_write[3] = value & 0xFF;
 8000be8:	887b      	ldrh	r3, [r7, #2]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	72fb      	strb	r3, [r7, #11]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 4, 100);
 8000bee:	f107 0208 	add.w	r2, r7, #8
 8000bf2:	88f9      	ldrh	r1, [r7, #6]
 8000bf4:	2364      	movs	r3, #100	; 0x64
 8000bf6:	9300      	str	r3, [sp, #0]
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	4805      	ldr	r0, [pc, #20]	; (8000c10 <VL53L4CD_WrWord+0x58>)
 8000bfc:	f001 fa32 	bl	8002064 <HAL_I2C_Master_Transmit>
 8000c00:	4603      	mov	r3, r0
 8000c02:	73fb      	strb	r3, [r7, #15]
	return status;
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	2000008c 	.word	0x2000008c

08000c14 <VL53L4CD_WrDWord>:

uint8_t VL53L4CD_WrDWord(uint16_t dev, uint16_t RegisterAdress, uint32_t value)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af02      	add	r7, sp, #8
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	603a      	str	r2, [r7, #0]
 8000c1e:	80fb      	strh	r3, [r7, #6]
 8000c20:	460b      	mov	r3, r1
 8000c22:	80bb      	strh	r3, [r7, #4]
	uint8_t data_write[6];
	uint8_t status = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	73fb      	strb	r3, [r7, #15]

	data_write[0] = (RegisterAdress >> 8) & 0xFF;
 8000c28:	88bb      	ldrh	r3, [r7, #4]
 8000c2a:	0a1b      	lsrs	r3, r3, #8
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	723b      	strb	r3, [r7, #8]
	data_write[1] = RegisterAdress & 0xFF;
 8000c32:	88bb      	ldrh	r3, [r7, #4]
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	727b      	strb	r3, [r7, #9]
	data_write[2] = (value >> 24) & 0xFF;
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	0e1b      	lsrs	r3, r3, #24
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	72bb      	strb	r3, [r7, #10]
	data_write[3] = (value >> 16) & 0xFF;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	0c1b      	lsrs	r3, r3, #16
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	72fb      	strb	r3, [r7, #11]
	data_write[4] = (value >> 8) & 0xFF;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	0a1b      	lsrs	r3, r3, #8
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	733b      	strb	r3, [r7, #12]
	data_write[5] = value & 0xFF;
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	737b      	strb	r3, [r7, #13]
	status = HAL_I2C_Master_Transmit(&hi2c1, dev, data_write, 6, 100);
 8000c56:	f107 0208 	add.w	r2, r7, #8
 8000c5a:	88f9      	ldrh	r1, [r7, #6]
 8000c5c:	2364      	movs	r3, #100	; 0x64
 8000c5e:	9300      	str	r3, [sp, #0]
 8000c60:	2306      	movs	r3, #6
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <VL53L4CD_WrDWord+0x64>)
 8000c64:	f001 f9fe 	bl	8002064 <HAL_I2C_Master_Transmit>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	73fb      	strb	r3, [r7, #15]
	return status;
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	2000008c 	.word	0x2000008c

08000c7c <WaitMs>:

uint8_t WaitMs(Dev_t dev, uint32_t time_ms)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	6039      	str	r1, [r7, #0]
 8000c86:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(time_ms);
 8000c88:	6838      	ldr	r0, [r7, #0]
 8000c8a:	f000 fdbb 	bl	8001804 <HAL_Delay>
	return 0;
 8000c8e:	2300      	movs	r3, #0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <HAL_MspInit+0x4c>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	4a0f      	ldr	r2, [pc, #60]	; (8000ce4 <HAL_MspInit+0x4c>)
 8000ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cac:	6453      	str	r3, [r2, #68]	; 0x44
 8000cae:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <HAL_MspInit+0x4c>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	603b      	str	r3, [r7, #0]
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <HAL_MspInit+0x4c>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	4a08      	ldr	r2, [pc, #32]	; (8000ce4 <HAL_MspInit+0x4c>)
 8000cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_MspInit+0x4c>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cd6:	2007      	movs	r0, #7
 8000cd8:	f000 fe88 	bl	80019ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40023800 	.word	0x40023800

08000ce8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	; 0x28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a19      	ldr	r2, [pc, #100]	; (8000d6c <HAL_I2C_MspInit+0x84>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d12c      	bne.n	8000d64 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <HAL_I2C_MspInit+0x88>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a17      	ldr	r2, [pc, #92]	; (8000d70 <HAL_I2C_MspInit+0x88>)
 8000d14:	f043 0302 	orr.w	r3, r3, #2
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <HAL_I2C_MspInit+0x88>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d2c:	2312      	movs	r3, #18
 8000d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d34:	2303      	movs	r3, #3
 8000d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d38:	2304      	movs	r3, #4
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4619      	mov	r1, r3
 8000d42:	480c      	ldr	r0, [pc, #48]	; (8000d74 <HAL_I2C_MspInit+0x8c>)
 8000d44:	f000 fe94 	bl	8001a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <HAL_I2C_MspInit+0x88>)
 8000d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d50:	4a07      	ldr	r2, [pc, #28]	; (8000d70 <HAL_I2C_MspInit+0x88>)
 8000d52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d56:	6413      	str	r3, [r2, #64]	; 0x40
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <HAL_I2C_MspInit+0x88>)
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d64:	bf00      	nop
 8000d66:	3728      	adds	r7, #40	; 0x28
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40005400 	.word	0x40005400
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020400 	.word	0x40020400

08000d78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	; 0x28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a19      	ldr	r2, [pc, #100]	; (8000dfc <HAL_UART_MspInit+0x84>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d12b      	bne.n	8000df2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	4b18      	ldr	r3, [pc, #96]	; (8000e00 <HAL_UART_MspInit+0x88>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	4a17      	ldr	r2, [pc, #92]	; (8000e00 <HAL_UART_MspInit+0x88>)
 8000da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da8:	6413      	str	r3, [r2, #64]	; 0x40
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <HAL_UART_MspInit+0x88>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <HAL_UART_MspInit+0x88>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a10      	ldr	r2, [pc, #64]	; (8000e00 <HAL_UART_MspInit+0x88>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <HAL_UART_MspInit+0x88>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dd2:	230c      	movs	r3, #12
 8000dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000de2:	2307      	movs	r3, #7
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	4619      	mov	r1, r3
 8000dec:	4805      	ldr	r0, [pc, #20]	; (8000e04 <HAL_UART_MspInit+0x8c>)
 8000dee:	f000 fe3f 	bl	8001a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000df2:	bf00      	nop
 8000df4:	3728      	adds	r7, #40	; 0x28
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40004400 	.word	0x40004400
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020000 	.word	0x40020000

08000e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <NMI_Handler+0x4>

08000e0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e12:	e7fe      	b.n	8000e12 <HardFault_Handler+0x4>

08000e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <MemManage_Handler+0x4>

08000e1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <BusFault_Handler+0x4>

08000e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <UsageFault_Handler+0x4>

08000e26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e54:	f000 fcb6 	bl	80017c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000e60:	2010      	movs	r0, #16
 8000e62:	f000 ffa3 	bl	8001dac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000e6e:	2080      	movs	r0, #128	; 0x80
 8000e70:	f000 ff9c 	bl	8001dac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000e7c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000e80:	f000 ff94 	bl	8001dac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000e84:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e88:	f000 ff90 	bl	8001dac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	e00a      	b.n	8000eb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ea2:	f3af 8000 	nop.w
 8000ea6:	4601      	mov	r1, r0
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	1c5a      	adds	r2, r3, #1
 8000eac:	60ba      	str	r2, [r7, #8]
 8000eae:	b2ca      	uxtb	r2, r1
 8000eb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	697a      	ldr	r2, [r7, #20]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	dbf0      	blt.n	8000ea2 <_read+0x12>
	}

return len;
 8000ec0:	687b      	ldr	r3, [r7, #4]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b086      	sub	sp, #24
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	60f8      	str	r0, [r7, #12]
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	e009      	b.n	8000ef0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	1c5a      	adds	r2, r3, #1
 8000ee0:	60ba      	str	r2, [r7, #8]
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fb4d 	bl	8000584 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	3301      	adds	r3, #1
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697a      	ldr	r2, [r7, #20]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	dbf1      	blt.n	8000edc <_write+0x12>
	}
	return len;
 8000ef8:	687b      	ldr	r3, [r7, #4]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <_close>:

int _close(int file)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
	return -1;
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f2a:	605a      	str	r2, [r3, #4]
	return 0;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <_isatty>:

int _isatty(int file)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
	return 1;
 8000f42:	2301      	movs	r3, #1
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
	return 0;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f74:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <_sbrk+0x5c>)
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <_sbrk+0x60>)
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f80:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <_sbrk+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d102      	bne.n	8000f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <_sbrk+0x64>)
 8000f8a:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <_sbrk+0x68>)
 8000f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <_sbrk+0x64>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d207      	bcs.n	8000fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f9c:	f002 ff0e 	bl	8003dbc <__errno>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000faa:	e009      	b.n	8000fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <_sbrk+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fb2:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <_sbrk+0x64>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <_sbrk+0x64>)
 8000fbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20018000 	.word	0x20018000
 8000fcc:	00000400 	.word	0x00000400
 8000fd0:	2000014c 	.word	0x2000014c
 8000fd4:	20000168 	.word	0x20000168

08000fd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <SystemInit+0x20>)
 8000fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe2:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <SystemInit+0x20>)
 8000fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001034 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001000:	480d      	ldr	r0, [pc, #52]	; (8001038 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001002:	490e      	ldr	r1, [pc, #56]	; (800103c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001004:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001008:	e002      	b.n	8001010 <LoopCopyDataInit>

0800100a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800100c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100e:	3304      	adds	r3, #4

08001010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001014:	d3f9      	bcc.n	800100a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001016:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001018:	4c0b      	ldr	r4, [pc, #44]	; (8001048 <LoopFillZerobss+0x26>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800101c:	e001      	b.n	8001022 <LoopFillZerobss>

0800101e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001020:	3204      	adds	r2, #4

08001022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001024:	d3fb      	bcc.n	800101e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001026:	f7ff ffd7 	bl	8000fd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800102a:	f002 fecd 	bl	8003dc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800102e:	f7ff fad1 	bl	80005d4 <main>
  bx  lr    
 8001032:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001034:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800103c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001040:	08005004 	.word	0x08005004
  ldr r2, =_sbss
 8001044:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001048:	20000164 	.word	0x20000164

0800104c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC_IRQHandler>

0800104e <VL53L4CD_GetSWVersion>:
	  put 0x40 in location 0x87 */
};

VL53L4CD_Error VL53L4CD_GetSWVersion(
		VL53L4CD_Version_t *p_Version)
{
 800104e:	b480      	push	{r7}
 8001050:	b085      	sub	sp, #20
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
	VL53L4CD_Error Status = VL53L4CD_ERROR_NONE;
 8001056:	2300      	movs	r3, #0
 8001058:	73fb      	strb	r3, [r7, #15]

	p_Version->major = VL53L4CD_IMPLEMENTATION_VER_MAJOR;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2202      	movs	r2, #2
 800105e:	701a      	strb	r2, [r3, #0]
	p_Version->minor = VL53L4CD_IMPLEMENTATION_VER_MINOR;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2201      	movs	r2, #1
 8001064:	705a      	strb	r2, [r3, #1]
	p_Version->build = VL53L4CD_IMPLEMENTATION_VER_BUILD;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2201      	movs	r2, #1
 800106a:	709a      	strb	r2, [r3, #2]
	p_Version->revision = VL53L4CD_IMPLEMENTATION_VER_REVISION;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	605a      	str	r2, [r3, #4]
	return Status;
 8001072:	7bfb      	ldrb	r3, [r7, #15]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <VL53L4CD_GetSensorId>:
}

VL53L4CD_Error VL53L4CD_GetSensorId(
		Dev_t dev,
		uint16_t *p_id)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_IDENTIFICATION__MODEL_ID, p_id);
 8001090:	88fb      	ldrh	r3, [r7, #6]
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	f240 110f 	movw	r1, #271	; 0x10f
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fcf9 	bl	8000a90 <VL53L4CD_RdWord>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	73fb      	strb	r3, [r7, #15]
	return status;
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <VL53L4CD_SensorInit>:

VL53L4CD_Error VL53L4CD_SensorInit(
		Dev_t dev)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 80010be:	2300      	movs	r3, #0
 80010c0:	73fb      	strb	r3, [r7, #15]
	uint8_t Addr, tmp;
	uint8_t continue_loop = 1;
 80010c2:	2301      	movs	r3, #1
 80010c4:	737b      	strb	r3, [r7, #13]
	uint16_t i = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	817b      	strh	r3, [r7, #10]

	do{
		status |= VL53L4CD_RdByte(dev,
 80010ca:	f107 0209 	add.w	r2, r7, #9
 80010ce:	88fb      	ldrh	r3, [r7, #6]
 80010d0:	21e5      	movs	r1, #229	; 0xe5
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fd16 	bl	8000b04 <VL53L4CD_RdByte>
 80010d8:	4603      	mov	r3, r0
 80010da:	461a      	mov	r2, r3
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	4313      	orrs	r3, r2
 80010e0:	73fb      	strb	r3, [r7, #15]
				VL53L4CD_FIRMWARE__SYSTEM_STATUS, &tmp);

		if(tmp == (uint8_t)0x3) /* Sensor booted */
 80010e2:	7a7b      	ldrb	r3, [r7, #9]
 80010e4:	2b03      	cmp	r3, #3
 80010e6:	d102      	bne.n	80010ee <VL53L4CD_SensorInit+0x3a>
		{
			continue_loop = (uint8_t)0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	737b      	strb	r3, [r7, #13]
 80010ec:	e00b      	b.n	8001106 <VL53L4CD_SensorInit+0x52>
		}
		else if(i < (uint16_t)1000)       /* Wait for boot */
 80010ee:	897b      	ldrh	r3, [r7, #10]
 80010f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010f4:	d203      	bcs.n	80010fe <VL53L4CD_SensorInit+0x4a>
		{
			i++;
 80010f6:	897b      	ldrh	r3, [r7, #10]
 80010f8:	3301      	adds	r3, #1
 80010fa:	817b      	strh	r3, [r7, #10]
 80010fc:	e003      	b.n	8001106 <VL53L4CD_SensorInit+0x52>
		}
		else /* Timeout 1000ms reached */
		{
			continue_loop = (uint8_t)0;
 80010fe:	2300      	movs	r3, #0
 8001100:	737b      	strb	r3, [r7, #13]
			status |= (uint8_t)VL53L4CD_ERROR_TIMEOUT;
 8001102:	23ff      	movs	r3, #255	; 0xff
 8001104:	73fb      	strb	r3, [r7, #15]
		}
		WaitMs(dev, 1);
 8001106:	88fb      	ldrh	r3, [r7, #6]
 8001108:	2101      	movs	r1, #1
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fdb6 	bl	8000c7c <WaitMs>
	}while(continue_loop == (uint8_t)1);
 8001110:	7b7b      	ldrb	r3, [r7, #13]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d0d9      	beq.n	80010ca <VL53L4CD_SensorInit+0x16>

	/* Load default configuration */
	for (Addr = (uint8_t)0x2D; Addr <= (uint8_t)0x87; Addr++)
 8001116:	232d      	movs	r3, #45	; 0x2d
 8001118:	73bb      	strb	r3, [r7, #14]
 800111a:	e011      	b.n	8001140 <VL53L4CD_SensorInit+0x8c>
	{
		status |= VL53L4CD_WrByte(dev, Addr,
 800111c:	7bbb      	ldrb	r3, [r7, #14]
 800111e:	b299      	uxth	r1, r3
				VL53L4CD_DEFAULT_CONFIGURATION[
                                  Addr - (uint8_t)0x2D]);
 8001120:	7bbb      	ldrb	r3, [r7, #14]
 8001122:	3b2d      	subs	r3, #45	; 0x2d
		status |= VL53L4CD_WrByte(dev, Addr,
 8001124:	4a44      	ldr	r2, [pc, #272]	; (8001238 <VL53L4CD_SensorInit+0x184>)
 8001126:	5cd2      	ldrb	r2, [r2, r3]
 8001128:	88fb      	ldrh	r3, [r7, #6]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fd1c 	bl	8000b68 <VL53L4CD_WrByte>
 8001130:	4603      	mov	r3, r0
 8001132:	461a      	mov	r2, r3
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	4313      	orrs	r3, r2
 8001138:	73fb      	strb	r3, [r7, #15]
	for (Addr = (uint8_t)0x2D; Addr <= (uint8_t)0x87; Addr++)
 800113a:	7bbb      	ldrb	r3, [r7, #14]
 800113c:	3301      	adds	r3, #1
 800113e:	73bb      	strb	r3, [r7, #14]
 8001140:	7bbb      	ldrb	r3, [r7, #14]
 8001142:	2b87      	cmp	r3, #135	; 0x87
 8001144:	d9ea      	bls.n	800111c <VL53L4CD_SensorInit+0x68>
	}

	/* Start VHV */
	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, (uint8_t)0x40);
 8001146:	88fb      	ldrh	r3, [r7, #6]
 8001148:	2240      	movs	r2, #64	; 0x40
 800114a:	2187      	movs	r1, #135	; 0x87
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fd0b 	bl	8000b68 <VL53L4CD_WrByte>
 8001152:	4603      	mov	r3, r0
 8001154:	461a      	mov	r2, r3
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	4313      	orrs	r3, r2
 800115a:	73fb      	strb	r3, [r7, #15]
	i  = (uint8_t)0;
 800115c:	2300      	movs	r3, #0
 800115e:	817b      	strh	r3, [r7, #10]
	continue_loop = (uint8_t)1;
 8001160:	2301      	movs	r3, #1
 8001162:	737b      	strb	r3, [r7, #13]
	do{
		status |= VL53L4CD_CheckForDataReady(dev, &tmp);
 8001164:	f107 0209 	add.w	r2, r7, #9
 8001168:	88fb      	ldrh	r3, [r7, #6]
 800116a:	4611      	mov	r1, r2
 800116c:	4618      	mov	r0, r3
 800116e:	f000 f8c5 	bl	80012fc <VL53L4CD_CheckForDataReady>
 8001172:	4603      	mov	r3, r0
 8001174:	461a      	mov	r2, r3
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	4313      	orrs	r3, r2
 800117a:	73fb      	strb	r3, [r7, #15]
		if(tmp == (uint8_t)1) /* Data ready */
 800117c:	7a7b      	ldrb	r3, [r7, #9]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d102      	bne.n	8001188 <VL53L4CD_SensorInit+0xd4>
		{
			continue_loop = (uint8_t)0;
 8001182:	2300      	movs	r3, #0
 8001184:	737b      	strb	r3, [r7, #13]
 8001186:	e00b      	b.n	80011a0 <VL53L4CD_SensorInit+0xec>
		}
		else if(i < (uint16_t)1000)       /* Wait for answer */
 8001188:	897b      	ldrh	r3, [r7, #10]
 800118a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800118e:	d203      	bcs.n	8001198 <VL53L4CD_SensorInit+0xe4>
		{
			i++;
 8001190:	897b      	ldrh	r3, [r7, #10]
 8001192:	3301      	adds	r3, #1
 8001194:	817b      	strh	r3, [r7, #10]
 8001196:	e003      	b.n	80011a0 <VL53L4CD_SensorInit+0xec>
		}
		else /* Timeout 1000ms reached */
		{
			continue_loop = (uint8_t)0;
 8001198:	2300      	movs	r3, #0
 800119a:	737b      	strb	r3, [r7, #13]
			status |= (uint8_t)VL53L4CD_ERROR_TIMEOUT;
 800119c:	23ff      	movs	r3, #255	; 0xff
 800119e:	73fb      	strb	r3, [r7, #15]
		}
		WaitMs(dev, 1);
 80011a0:	88fb      	ldrh	r3, [r7, #6]
 80011a2:	2101      	movs	r1, #1
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff fd69 	bl	8000c7c <WaitMs>
	}while(continue_loop == (uint8_t)1);
 80011aa:	7b7b      	ldrb	r3, [r7, #13]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d0d9      	beq.n	8001164 <VL53L4CD_SensorInit+0xb0>

	status |= VL53L4CD_ClearInterrupt(dev);
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 f842 	bl	800123c <VL53L4CD_ClearInterrupt>
 80011b8:	4603      	mov	r3, r0
 80011ba:	461a      	mov	r2, r3
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	4313      	orrs	r3, r2
 80011c0:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_StopRanging(dev);
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 f882 	bl	80012ce <VL53L4CD_StopRanging>
 80011ca:	4603      	mov	r3, r0
 80011cc:	461a      	mov	r2, r3
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrByte(dev,
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	2209      	movs	r2, #9
 80011d8:	2108      	movs	r1, #8
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fcc4 	bl	8000b68 <VL53L4CD_WrByte>
 80011e0:	4603      	mov	r3, r0
 80011e2:	461a      	mov	r2, r3
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	73fb      	strb	r3, [r7, #15]
			VL53L4CD_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 
                        (uint8_t)0x09);
	status |= VL53L4CD_WrByte(dev, 0x0B, (uint8_t)0);
 80011ea:	88fb      	ldrh	r3, [r7, #6]
 80011ec:	2200      	movs	r2, #0
 80011ee:	210b      	movs	r1, #11
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fcb9 	bl	8000b68 <VL53L4CD_WrByte>
 80011f6:	4603      	mov	r3, r0
 80011f8:	461a      	mov	r2, r3
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	73fb      	strb	r3, [r7, #15]
	status |= VL53L4CD_WrWord(dev, 0x0024, 0x500);
 8001200:	88fb      	ldrh	r3, [r7, #6]
 8001202:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001206:	2124      	movs	r1, #36	; 0x24
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fcd5 	bl	8000bb8 <VL53L4CD_WrWord>
 800120e:	4603      	mov	r3, r0
 8001210:	461a      	mov	r2, r3
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	4313      	orrs	r3, r2
 8001216:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_SetRangeTiming(dev, 50, 0);
 8001218:	88fb      	ldrh	r3, [r7, #6]
 800121a:	2200      	movs	r2, #0
 800121c:	2132      	movs	r1, #50	; 0x32
 800121e:	4618      	mov	r0, r3
 8001220:	f000 f8b0 	bl	8001384 <VL53L4CD_SetRangeTiming>
 8001224:	4603      	mov	r3, r0
 8001226:	461a      	mov	r2, r3
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	4313      	orrs	r3, r2
 800122c:	73fb      	strb	r3, [r7, #15]

	return status;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	08004f00 	.word	0x08004f00

0800123c <VL53L4CD_ClearInterrupt>:

VL53L4CD_Error VL53L4CD_ClearInterrupt(
		Dev_t dev)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8001246:	2300      	movs	r3, #0
 8001248:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM__INTERRUPT_CLEAR, 0x01);
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	2201      	movs	r2, #1
 800124e:	2186      	movs	r1, #134	; 0x86
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fc89 	bl	8000b68 <VL53L4CD_WrByte>
 8001256:	4603      	mov	r3, r0
 8001258:	461a      	mov	r2, r3
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	4313      	orrs	r3, r2
 800125e:	73fb      	strb	r3, [r7, #15]
	return status;
 8001260:	7bfb      	ldrb	r3, [r7, #15]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <VL53L4CD_StartRanging>:

VL53L4CD_Error VL53L4CD_StartRanging(
		Dev_t dev)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b084      	sub	sp, #16
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8001274:	2300      	movs	r3, #0
 8001276:	73fb      	strb	r3, [r7, #15]
	uint32_t tmp;

	status |= VL53L4CD_RdDWord(dev, VL53L4CD_INTERMEASUREMENT_MS, &tmp);
 8001278:	f107 0208 	add.w	r2, r7, #8
 800127c:	88fb      	ldrh	r3, [r7, #6]
 800127e:	216c      	movs	r1, #108	; 0x6c
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fbc9 	bl	8000a18 <VL53L4CD_RdDWord>
 8001286:	4603      	mov	r3, r0
 8001288:	461a      	mov	r2, r3
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	4313      	orrs	r3, r2
 800128e:	73fb      	strb	r3, [r7, #15]

	/* Sensor runs in continuous mode */
	if(tmp == (uint32_t)0)
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10b      	bne.n	80012ae <VL53L4CD_StartRanging+0x44>
	{
		status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, 0x21);
 8001296:	88fb      	ldrh	r3, [r7, #6]
 8001298:	2221      	movs	r2, #33	; 0x21
 800129a:	2187      	movs	r1, #135	; 0x87
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fc63 	bl	8000b68 <VL53L4CD_WrByte>
 80012a2:	4603      	mov	r3, r0
 80012a4:	461a      	mov	r2, r3
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	e00a      	b.n	80012c4 <VL53L4CD_StartRanging+0x5a>
	}
	/* Sensor runs in autonomous mode */
	else
	{
		status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, 0x40);
 80012ae:	88fb      	ldrh	r3, [r7, #6]
 80012b0:	2240      	movs	r2, #64	; 0x40
 80012b2:	2187      	movs	r1, #135	; 0x87
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fc57 	bl	8000b68 <VL53L4CD_WrByte>
 80012ba:	4603      	mov	r3, r0
 80012bc:	461a      	mov	r2, r3
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <VL53L4CD_StopRanging>:

VL53L4CD_Error VL53L4CD_StopRanging(
		Dev_t dev)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b084      	sub	sp, #16
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	4603      	mov	r3, r0
 80012d6:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 80012d8:	2300      	movs	r3, #0
 80012da:	73fb      	strb	r3, [r7, #15]

	status |= VL53L4CD_WrByte(dev, VL53L4CD_SYSTEM_START, 0x00);
 80012dc:	88fb      	ldrh	r3, [r7, #6]
 80012de:	2200      	movs	r2, #0
 80012e0:	2187      	movs	r1, #135	; 0x87
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fc40 	bl	8000b68 <VL53L4CD_WrByte>
 80012e8:	4603      	mov	r3, r0
 80012ea:	461a      	mov	r2, r3
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	73fb      	strb	r3, [r7, #15]
	return status;
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <VL53L4CD_CheckForDataReady>:

VL53L4CD_Error VL53L4CD_CheckForDataReady(
		Dev_t dev,
		uint8_t *p_is_data_ready)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	6039      	str	r1, [r7, #0]
 8001306:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8001308:	2300      	movs	r3, #0
 800130a:	73bb      	strb	r3, [r7, #14]
	uint8_t temp;
	uint8_t int_pol;

	status |= VL53L4CD_RdByte(dev, VL53L4CD_GPIO_HV_MUX__CTRL, &temp);
 800130c:	f107 020d 	add.w	r2, r7, #13
 8001310:	88fb      	ldrh	r3, [r7, #6]
 8001312:	2130      	movs	r1, #48	; 0x30
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fbf5 	bl	8000b04 <VL53L4CD_RdByte>
 800131a:	4603      	mov	r3, r0
 800131c:	461a      	mov	r2, r3
 800131e:	7bbb      	ldrb	r3, [r7, #14]
 8001320:	4313      	orrs	r3, r2
 8001322:	73bb      	strb	r3, [r7, #14]
	temp = temp & (uint8_t)0x10;
 8001324:	7b7b      	ldrb	r3, [r7, #13]
 8001326:	f003 0310 	and.w	r3, r3, #16
 800132a:	b2db      	uxtb	r3, r3
 800132c:	737b      	strb	r3, [r7, #13]
	temp = temp >> 4;
 800132e:	7b7b      	ldrb	r3, [r7, #13]
 8001330:	091b      	lsrs	r3, r3, #4
 8001332:	b2db      	uxtb	r3, r3
 8001334:	737b      	strb	r3, [r7, #13]

	if (temp == (uint8_t)1)
 8001336:	7b7b      	ldrb	r3, [r7, #13]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d102      	bne.n	8001342 <VL53L4CD_CheckForDataReady+0x46>
	{
		int_pol = (uint8_t)0;
 800133c:	2300      	movs	r3, #0
 800133e:	73fb      	strb	r3, [r7, #15]
 8001340:	e001      	b.n	8001346 <VL53L4CD_CheckForDataReady+0x4a>
	}
	else
	{
		int_pol = (uint8_t)1;
 8001342:	2301      	movs	r3, #1
 8001344:	73fb      	strb	r3, [r7, #15]
	}

	status |= VL53L4CD_RdByte(dev, VL53L4CD_GPIO__TIO_HV_STATUS, &temp);
 8001346:	f107 020d 	add.w	r2, r7, #13
 800134a:	88fb      	ldrh	r3, [r7, #6]
 800134c:	2131      	movs	r1, #49	; 0x31
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fbd8 	bl	8000b04 <VL53L4CD_RdByte>
 8001354:	4603      	mov	r3, r0
 8001356:	461a      	mov	r2, r3
 8001358:	7bbb      	ldrb	r3, [r7, #14]
 800135a:	4313      	orrs	r3, r2
 800135c:	73bb      	strb	r3, [r7, #14]

	if ((temp & (uint8_t)1) == int_pol)
 800135e:	7b7b      	ldrb	r3, [r7, #13]
 8001360:	f003 0201 	and.w	r2, r3, #1
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	429a      	cmp	r2, r3
 8001368:	d103      	bne.n	8001372 <VL53L4CD_CheckForDataReady+0x76>
	{
		*p_is_data_ready = (uint8_t)1;
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	2201      	movs	r2, #1
 800136e:	701a      	strb	r2, [r3, #0]
 8001370:	e002      	b.n	8001378 <VL53L4CD_CheckForDataReady+0x7c>
	}
	else
	{
		*p_is_data_ready = (uint8_t)0;
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8001378:	7bbb      	ldrb	r3, [r7, #14]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <VL53L4CD_SetRangeTiming>:

VL53L4CD_Error VL53L4CD_SetRangeTiming(
		Dev_t dev,
		uint32_t timing_budget_ms,
		uint32_t inter_measurement_ms)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08c      	sub	sp, #48	; 0x30
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
 8001390:	81fb      	strh	r3, [r7, #14]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 8001392:	2300      	movs	r3, #0
 8001394:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint16_t clock_pll, osc_frequency, ms_byte;
	uint32_t macro_period_us = 0, timing_budget_us = 0, ls_byte, tmp;
 8001398:	2300      	movs	r3, #0
 800139a:	62bb      	str	r3, [r7, #40]	; 0x28
 800139c:	2300      	movs	r3, #0
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
	float_t inter_measurement_factor = (float_t)1.055;
 80013a0:	4b86      	ldr	r3, [pc, #536]	; (80015bc <VL53L4CD_SetRangeTiming+0x238>)
 80013a2:	61fb      	str	r3, [r7, #28]

	status |= VL53L4CD_RdWord(dev, 0x0006, &osc_frequency);
 80013a4:	f107 0214 	add.w	r2, r7, #20
 80013a8:	89fb      	ldrh	r3, [r7, #14]
 80013aa:	2106      	movs	r1, #6
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fb6f 	bl	8000a90 <VL53L4CD_RdWord>
 80013b2:	4603      	mov	r3, r0
 80013b4:	461a      	mov	r2, r3
 80013b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013ba:	4313      	orrs	r3, r2
 80013bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if(osc_frequency != (uint16_t)0)
 80013c0:	8abb      	ldrh	r3, [r7, #20]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d012      	beq.n	80013ec <VL53L4CD_SetRangeTiming+0x68>
	{
		timing_budget_us = timing_budget_ms*(uint32_t)1000;
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013cc:	fb02 f303 	mul.w	r3, r2, r3
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
		macro_period_us = (uint32_t)((uint32_t)2304 *
		((uint32_t)0x40000000 / (uint32_t)osc_frequency)) >> 6;
 80013d2:	8abb      	ldrh	r3, [r7, #20]
 80013d4:	461a      	mov	r2, r3
 80013d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013da:	fbb3 f2f2 	udiv	r2, r3, r2
		macro_period_us = (uint32_t)((uint32_t)2304 *
 80013de:	4613      	mov	r3, r2
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	4413      	add	r3, r2
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	099b      	lsrs	r3, r3, #6
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80013ea:	e005      	b.n	80013f8 <VL53L4CD_SetRangeTiming+0x74>
	}
	else
	{
		status |= (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT;
 80013ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013f0:	f063 0301 	orn	r3, r3, #1
 80013f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	/* Timing budget check validity */
	if ((timing_budget_ms < (uint32_t)10) 
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	2b09      	cmp	r3, #9
 80013fc:	d906      	bls.n	800140c <VL53L4CD_SetRangeTiming+0x88>
			|| (timing_budget_ms > (uint32_t)200) || (status != (uint8_t)0))
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	2bc8      	cmp	r3, #200	; 0xc8
 8001402:	d803      	bhi.n	800140c <VL53L4CD_SetRangeTiming+0x88>
 8001404:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001408:	2b00      	cmp	r3, #0
 800140a:	d006      	beq.n	800141a <VL53L4CD_SetRangeTiming+0x96>
	{
		status |= VL53L4CD_ERROR_INVALID_ARGUMENT;
 800140c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001410:	f063 0301 	orn	r3, r3, #1
 8001414:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001418:	e05e      	b.n	80014d8 <VL53L4CD_SetRangeTiming+0x154>
	}
	/* Sensor runs in continuous mode */
	else if(inter_measurement_ms == (uint32_t)0)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d111      	bne.n	8001444 <VL53L4CD_SetRangeTiming+0xc0>
	{
		status |= VL53L4CD_WrDWord(dev,VL53L4CD_INTERMEASUREMENT_MS, 0);
 8001420:	89fb      	ldrh	r3, [r7, #14]
 8001422:	2200      	movs	r2, #0
 8001424:	216c      	movs	r1, #108	; 0x6c
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fbf4 	bl	8000c14 <VL53L4CD_WrDWord>
 800142c:	4603      	mov	r3, r0
 800142e:	461a      	mov	r2, r3
 8001430:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001434:	4313      	orrs	r3, r2
 8001436:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		timing_budget_us -= (uint32_t)2500;
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	f6a3 13c4 	subw	r3, r3, #2500	; 0x9c4
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
 8001442:	e049      	b.n	80014d8 <VL53L4CD_SetRangeTiming+0x154>
	}
	/* Sensor runs in autonomous low power mode */
	else if(inter_measurement_ms > timing_budget_ms)
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	429a      	cmp	r2, r3
 800144a:	d93f      	bls.n	80014cc <VL53L4CD_SetRangeTiming+0x148>
	{
		status |= VL53L4CD_RdWord(dev,
 800144c:	f107 0216 	add.w	r2, r7, #22
 8001450:	89fb      	ldrh	r3, [r7, #14]
 8001452:	21de      	movs	r1, #222	; 0xde
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fb1b 	bl	8000a90 <VL53L4CD_RdWord>
 800145a:	4603      	mov	r3, r0
 800145c:	461a      	mov	r2, r3
 800145e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001462:	4313      	orrs	r3, r2
 8001464:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L4CD_RESULT__OSC_CALIBRATE_VAL, &clock_pll);
		clock_pll = clock_pll & (uint16_t)0x3FF;
 8001468:	8afb      	ldrh	r3, [r7, #22]
 800146a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800146e:	b29b      	uxth	r3, r3
 8001470:	82fb      	strh	r3, [r7, #22]
				inter_measurement_factor = inter_measurement_factor
				  * (float_t)inter_measurement_ms
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800147c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001480:	ee27 7a27 	vmul.f32	s14, s14, s15
				  * (float_t)clock_pll;
 8001484:	8afb      	ldrh	r3, [r7, #22]
 8001486:	ee07 3a90 	vmov	s15, r3
 800148a:	eef8 7a67 	vcvt.f32.u32	s15, s15
				inter_measurement_factor = inter_measurement_factor
 800148e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001492:	edc7 7a07 	vstr	s15, [r7, #28]
		status |= VL53L4CD_WrDWord(dev, VL53L4CD_INTERMEASUREMENT_MS,
 8001496:	edd7 7a07 	vldr	s15, [r7, #28]
 800149a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800149e:	89fb      	ldrh	r3, [r7, #14]
 80014a0:	ee17 2a90 	vmov	r2, s15
 80014a4:	216c      	movs	r1, #108	; 0x6c
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fbb4 	bl	8000c14 <VL53L4CD_WrDWord>
 80014ac:	4603      	mov	r3, r0
 80014ae:	461a      	mov	r2, r3
 80014b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014b4:	4313      	orrs	r3, r2
 80014b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				(uint32_t)inter_measurement_factor);

		timing_budget_us -= (uint32_t)4300;
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	f5a3 5386 	sub.w	r3, r3, #4288	; 0x10c0
 80014c0:	3b0c      	subs	r3, #12
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
		timing_budget_us /= (uint32_t)2;
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	085b      	lsrs	r3, r3, #1
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
 80014ca:	e005      	b.n	80014d8 <VL53L4CD_SetRangeTiming+0x154>

	}
	/* Invalid case */
	else
	{
		status |= (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT;
 80014cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014d0:	f063 0301 	orn	r3, r3, #1
 80014d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	if(status != (uint8_t)VL53L4CD_ERROR_INVALID_ARGUMENT)
 80014d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014dc:	2bfe      	cmp	r3, #254	; 0xfe
 80014de:	d067      	beq.n	80015b0 <VL53L4CD_SetRangeTiming+0x22c>
	{
				ms_byte = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	85bb      	strh	r3, [r7, #44]	; 0x2c
				timing_budget_us = timing_budget_us << 12;
 80014e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e6:	031b      	lsls	r3, r3, #12
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
				tmp = macro_period_us*(uint32_t)16;
 80014ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ec:	011b      	lsls	r3, r3, #4
 80014ee:	61bb      	str	r3, [r7, #24]
				ls_byte = ((timing_budget_us + ((tmp >> 6)>>1)) /(tmp>> 6))
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	09da      	lsrs	r2, r3, #7
 80014f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f6:	441a      	add	r2, r3
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	099b      	lsrs	r3, r3, #6
 80014fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001500:	3b01      	subs	r3, #1
 8001502:	623b      	str	r3, [r7, #32]
				  - (uint32_t)1;

				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 8001504:	e005      	b.n	8001512 <VL53L4CD_SetRangeTiming+0x18e>
						 ls_byte = ls_byte >> 1;
 8001506:	6a3b      	ldr	r3, [r7, #32]
 8001508:	085b      	lsrs	r3, r3, #1
 800150a:	623b      	str	r3, [r7, #32]
						 ms_byte++;
 800150c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800150e:	3301      	adds	r3, #1
 8001510:	85bb      	strh	r3, [r7, #44]	; 0x2c
				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 8001512:	6a3b      	ldr	r3, [r7, #32]
 8001514:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1f4      	bne.n	8001506 <VL53L4CD_SetRangeTiming+0x182>
				}
				ms_byte = (uint16_t)(ms_byte << 8)
 800151c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800151e:	021b      	lsls	r3, r3, #8
 8001520:	b29a      	uxth	r2, r3
			+ (uint16_t) (ls_byte & (uint32_t)0xFF);
 8001522:	6a3b      	ldr	r3, [r7, #32]
 8001524:	b29b      	uxth	r3, r3
 8001526:	b2db      	uxtb	r3, r3
 8001528:	b29b      	uxth	r3, r3
				ms_byte = (uint16_t)(ms_byte << 8)
 800152a:	4413      	add	r3, r2
 800152c:	85bb      	strh	r3, [r7, #44]	; 0x2c
				status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_CONFIG_A,ms_byte);
 800152e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001530:	89fb      	ldrh	r3, [r7, #14]
 8001532:	215e      	movs	r1, #94	; 0x5e
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fb3f 	bl	8000bb8 <VL53L4CD_WrWord>
 800153a:	4603      	mov	r3, r0
 800153c:	461a      	mov	r2, r3
 800153e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001542:	4313      	orrs	r3, r2
 8001544:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

				ms_byte = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	85bb      	strh	r3, [r7, #44]	; 0x2c
				tmp = macro_period_us*(uint32_t)12;
 800154c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800154e:	4613      	mov	r3, r2
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	4413      	add	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	61bb      	str	r3, [r7, #24]
				ls_byte = ((timing_budget_us + ((tmp >> 6)>>1)) /(tmp>> 6))
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	09da      	lsrs	r2, r3, #7
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	441a      	add	r2, r3
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	099b      	lsrs	r3, r3, #6
 8001564:	fbb2 f3f3 	udiv	r3, r2, r3
 8001568:	3b01      	subs	r3, #1
 800156a:	623b      	str	r3, [r7, #32]
				  - (uint32_t)1;

				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 800156c:	e005      	b.n	800157a <VL53L4CD_SetRangeTiming+0x1f6>
						 ls_byte = ls_byte >> 1;
 800156e:	6a3b      	ldr	r3, [r7, #32]
 8001570:	085b      	lsrs	r3, r3, #1
 8001572:	623b      	str	r3, [r7, #32]
						 ms_byte++;
 8001574:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001576:	3301      	adds	r3, #1
 8001578:	85bb      	strh	r3, [r7, #44]	; 0x2c
				while ((ls_byte & 0xFFFFFF00U) > 0U) {
 800157a:	6a3b      	ldr	r3, [r7, #32]
 800157c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1f4      	bne.n	800156e <VL53L4CD_SetRangeTiming+0x1ea>
				}
				ms_byte = (uint16_t)(ms_byte << 8)
 8001584:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001586:	021b      	lsls	r3, r3, #8
 8001588:	b29a      	uxth	r2, r3
			+ (uint16_t) (ls_byte & (uint32_t)0xFF);
 800158a:	6a3b      	ldr	r3, [r7, #32]
 800158c:	b29b      	uxth	r3, r3
 800158e:	b2db      	uxtb	r3, r3
 8001590:	b29b      	uxth	r3, r3
				ms_byte = (uint16_t)(ms_byte << 8)
 8001592:	4413      	add	r3, r2
 8001594:	85bb      	strh	r3, [r7, #44]	; 0x2c
				status |= VL53L4CD_WrWord(dev, VL53L4CD_RANGE_CONFIG_B,ms_byte);
 8001596:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001598:	89fb      	ldrh	r3, [r7, #14]
 800159a:	2161      	movs	r1, #97	; 0x61
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fb0b 	bl	8000bb8 <VL53L4CD_WrWord>
 80015a2:	4603      	mov	r3, r0
 80015a4:	461a      	mov	r2, r3
 80015a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015aa:	4313      	orrs	r3, r2
 80015ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	return status;
 80015b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3730      	adds	r7, #48	; 0x30
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	3f870a3d 	.word	0x3f870a3d

080015c0 <VL53L4CD_GetResult>:
}

VL53L4CD_Error VL53L4CD_GetResult(
		Dev_t dev,
		VL53L4CD_ResultsData_t *p_result)
{
 80015c0:	b5b0      	push	{r4, r5, r7, lr}
 80015c2:	b08a      	sub	sp, #40	; 0x28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	6039      	str	r1, [r7, #0]
 80015ca:	80fb      	strh	r3, [r7, #6]
	VL53L4CD_Error status = VL53L4CD_ERROR_NONE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t temp_16;
	uint8_t temp_8;
	uint8_t status_rtn[24] = { 255, 255, 255, 5, 2, 4, 1, 7, 3,
 80015d2:	4b52      	ldr	r3, [pc, #328]	; (800171c <VL53L4CD_GetResult+0x15c>)
 80015d4:	f107 0408 	add.w	r4, r7, #8
 80015d8:	461d      	mov	r5, r3
 80015da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015de:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015e2:	e884 0003 	stmia.w	r4, {r0, r1}
			0, 255, 255, 9, 13, 255, 255, 255, 255, 10, 6,
			255, 255, 11, 12 };

	status |= VL53L4CD_RdByte(dev, VL53L4CD_RESULT__RANGE_STATUS,
 80015e6:	f107 0223 	add.w	r2, r7, #35	; 0x23
 80015ea:	88fb      	ldrh	r3, [r7, #6]
 80015ec:	2189      	movs	r1, #137	; 0x89
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fa88 	bl	8000b04 <VL53L4CD_RdByte>
 80015f4:	4603      	mov	r3, r0
 80015f6:	461a      	mov	r2, r3
 80015f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015fc:	4313      	orrs	r3, r2
 80015fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		&temp_8);
	temp_8 = temp_8 & (uint8_t)0x1F;
 8001602:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001606:	f003 031f 	and.w	r3, r3, #31
 800160a:	b2db      	uxtb	r3, r3
 800160c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (temp_8 < (uint8_t)24)
 8001610:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001614:	2b17      	cmp	r3, #23
 8001616:	d807      	bhi.n	8001628 <VL53L4CD_GetResult+0x68>
	{
		temp_8 = status_rtn[temp_8];
 8001618:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800161c:	3328      	adds	r3, #40	; 0x28
 800161e:	443b      	add	r3, r7
 8001620:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001624:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	p_result->range_status = temp_8;
 8001628:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	701a      	strb	r2, [r3, #0]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SPAD_NB,
 8001630:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001634:	88fb      	ldrh	r3, [r7, #6]
 8001636:	218c      	movs	r1, #140	; 0x8c
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fa29 	bl	8000a90 <VL53L4CD_RdWord>
 800163e:	4603      	mov	r3, r0
 8001640:	461a      	mov	r2, r3
 8001642:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001646:	4313      	orrs	r3, r2
 8001648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		&temp_16);
	p_result->number_of_spad = temp_16 / (uint16_t) 256;
 800164c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800164e:	0a1b      	lsrs	r3, r3, #8
 8001650:	b29a      	uxth	r2, r3
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	819a      	strh	r2, [r3, #12]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SIGNAL_RATE,
 8001656:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	218e      	movs	r1, #142	; 0x8e
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fa16 	bl	8000a90 <VL53L4CD_RdWord>
 8001664:	4603      	mov	r3, r0
 8001666:	461a      	mov	r2, r3
 8001668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800166c:	4313      	orrs	r3, r2
 800166e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		&temp_16);
	p_result->signal_rate_kcps = temp_16 * (uint16_t) 8;
 8001672:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	b29a      	uxth	r2, r3
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	811a      	strh	r2, [r3, #8]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__AMBIENT_RATE,
 800167c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001680:	88fb      	ldrh	r3, [r7, #6]
 8001682:	2190      	movs	r1, #144	; 0x90
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fa03 	bl	8000a90 <VL53L4CD_RdWord>
 800168a:	4603      	mov	r3, r0
 800168c:	461a      	mov	r2, r3
 800168e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001692:	4313      	orrs	r3, r2
 8001694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		&temp_16);
	p_result->ambient_rate_kcps = temp_16 * (uint16_t) 8;
 8001698:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	b29a      	uxth	r2, r3
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	809a      	strh	r2, [r3, #4]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__SIGMA,
 80016a2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80016a6:	88fb      	ldrh	r3, [r7, #6]
 80016a8:	2192      	movs	r1, #146	; 0x92
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff f9f0 	bl	8000a90 <VL53L4CD_RdWord>
 80016b0:	4603      	mov	r3, r0
 80016b2:	461a      	mov	r2, r3
 80016b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016b8:	4313      	orrs	r3, r2
 80016ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		&temp_16);
	p_result->sigma_mm = temp_16 / (uint16_t) 4;
 80016be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80016c0:	089b      	lsrs	r3, r3, #2
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	81da      	strh	r2, [r3, #14]

	status |= VL53L4CD_RdWord(dev, VL53L4CD_RESULT__DISTANCE,
 80016c8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	2196      	movs	r1, #150	; 0x96
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff f9dd 	bl	8000a90 <VL53L4CD_RdWord>
 80016d6:	4603      	mov	r3, r0
 80016d8:	461a      	mov	r2, r3
 80016da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016de:	4313      	orrs	r3, r2
 80016e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		&temp_16);
	p_result->distance_mm = temp_16;
 80016e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	805a      	strh	r2, [r3, #2]

	p_result->signal_per_spad_kcps = p_result->signal_rate_kcps
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	891a      	ldrh	r2, [r3, #8]
			/p_result->number_of_spad;
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	899b      	ldrh	r3, [r3, #12]
	p_result->signal_per_spad_kcps = p_result->signal_rate_kcps
 80016f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	815a      	strh	r2, [r3, #10]
	p_result->ambient_per_spad_kcps = p_result->ambient_rate_kcps
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	889a      	ldrh	r2, [r3, #4]
			/p_result->number_of_spad;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	899b      	ldrh	r3, [r3, #12]
	p_result->ambient_per_spad_kcps = p_result->ambient_rate_kcps
 8001704:	fbb2 f3f3 	udiv	r3, r2, r3
 8001708:	b29a      	uxth	r2, r3
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	80da      	strh	r2, [r3, #6]

	return status;
 800170e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001712:	4618      	mov	r0, r3
 8001714:	3728      	adds	r7, #40	; 0x28
 8001716:	46bd      	mov	sp, r7
 8001718:	bdb0      	pop	{r4, r5, r7, pc}
 800171a:	bf00      	nop
 800171c:	08004ed0 	.word	0x08004ed0

08001720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001724:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <HAL_Init+0x40>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a0d      	ldr	r2, [pc, #52]	; (8001760 <HAL_Init+0x40>)
 800172a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800172e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001730:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <HAL_Init+0x40>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <HAL_Init+0x40>)
 8001736:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800173a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800173c:	4b08      	ldr	r3, [pc, #32]	; (8001760 <HAL_Init+0x40>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a07      	ldr	r2, [pc, #28]	; (8001760 <HAL_Init+0x40>)
 8001742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001746:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001748:	2003      	movs	r0, #3
 800174a:	f000 f94f 	bl	80019ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800174e:	2000      	movs	r0, #0
 8001750:	f000 f808 	bl	8001764 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001754:	f7ff faa0 	bl	8000c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40023c00 	.word	0x40023c00

08001764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800176c:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <HAL_InitTick+0x54>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <HAL_InitTick+0x58>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	4619      	mov	r1, r3
 8001776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800177a:	fbb3 f3f1 	udiv	r3, r3, r1
 800177e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001782:	4618      	mov	r0, r3
 8001784:	f000 f967 	bl	8001a56 <HAL_SYSTICK_Config>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e00e      	b.n	80017b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b0f      	cmp	r3, #15
 8001796:	d80a      	bhi.n	80017ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001798:	2200      	movs	r2, #0
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	f04f 30ff 	mov.w	r0, #4294967295
 80017a0:	f000 f92f 	bl	8001a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017a4:	4a06      	ldr	r2, [pc, #24]	; (80017c0 <HAL_InitTick+0x5c>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
 80017ac:	e000      	b.n	80017b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000000 	.word	0x20000000
 80017bc:	20000008 	.word	0x20000008
 80017c0:	20000004 	.word	0x20000004

080017c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_IncTick+0x20>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <HAL_IncTick+0x24>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4413      	add	r3, r2
 80017d4:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <HAL_IncTick+0x24>)
 80017d6:	6013      	str	r3, [r2, #0]
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	20000008 	.word	0x20000008
 80017e8:	20000150 	.word	0x20000150

080017ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return uwTick;
 80017f0:	4b03      	ldr	r3, [pc, #12]	; (8001800 <HAL_GetTick+0x14>)
 80017f2:	681b      	ldr	r3, [r3, #0]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	20000150 	.word	0x20000150

08001804 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800180c:	f7ff ffee 	bl	80017ec <HAL_GetTick>
 8001810:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800181c:	d005      	beq.n	800182a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800181e:	4b0a      	ldr	r3, [pc, #40]	; (8001848 <HAL_Delay+0x44>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4413      	add	r3, r2
 8001828:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800182a:	bf00      	nop
 800182c:	f7ff ffde 	bl	80017ec <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	429a      	cmp	r2, r3
 800183a:	d8f7      	bhi.n	800182c <HAL_Delay+0x28>
  {
  }
}
 800183c:	bf00      	nop
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000008 	.word	0x20000008

0800184c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001868:	4013      	ands	r3, r2
 800186a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800187c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187e:	4a04      	ldr	r2, [pc, #16]	; (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	60d3      	str	r3, [r2, #12]
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001898:	4b04      	ldr	r3, [pc, #16]	; (80018ac <__NVIC_GetPriorityGrouping+0x18>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	0a1b      	lsrs	r3, r3, #8
 800189e:	f003 0307 	and.w	r3, r3, #7
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	db0b      	blt.n	80018da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	f003 021f 	and.w	r2, r3, #31
 80018c8:	4907      	ldr	r1, [pc, #28]	; (80018e8 <__NVIC_EnableIRQ+0x38>)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	095b      	lsrs	r3, r3, #5
 80018d0:	2001      	movs	r0, #1
 80018d2:	fa00 f202 	lsl.w	r2, r0, r2
 80018d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000e100 	.word	0xe000e100

080018ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	6039      	str	r1, [r7, #0]
 80018f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	db0a      	blt.n	8001916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	b2da      	uxtb	r2, r3
 8001904:	490c      	ldr	r1, [pc, #48]	; (8001938 <__NVIC_SetPriority+0x4c>)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	0112      	lsls	r2, r2, #4
 800190c:	b2d2      	uxtb	r2, r2
 800190e:	440b      	add	r3, r1
 8001910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001914:	e00a      	b.n	800192c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	b2da      	uxtb	r2, r3
 800191a:	4908      	ldr	r1, [pc, #32]	; (800193c <__NVIC_SetPriority+0x50>)
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	3b04      	subs	r3, #4
 8001924:	0112      	lsls	r2, r2, #4
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	440b      	add	r3, r1
 800192a:	761a      	strb	r2, [r3, #24]
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000e100 	.word	0xe000e100
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001940:	b480      	push	{r7}
 8001942:	b089      	sub	sp, #36	; 0x24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f1c3 0307 	rsb	r3, r3, #7
 800195a:	2b04      	cmp	r3, #4
 800195c:	bf28      	it	cs
 800195e:	2304      	movcs	r3, #4
 8001960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3304      	adds	r3, #4
 8001966:	2b06      	cmp	r3, #6
 8001968:	d902      	bls.n	8001970 <NVIC_EncodePriority+0x30>
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3b03      	subs	r3, #3
 800196e:	e000      	b.n	8001972 <NVIC_EncodePriority+0x32>
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001974:	f04f 32ff 	mov.w	r2, #4294967295
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43da      	mvns	r2, r3
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	401a      	ands	r2, r3
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001988:	f04f 31ff 	mov.w	r1, #4294967295
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	fa01 f303 	lsl.w	r3, r1, r3
 8001992:	43d9      	mvns	r1, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001998:	4313      	orrs	r3, r2
         );
}
 800199a:	4618      	mov	r0, r3
 800199c:	3724      	adds	r7, #36	; 0x24
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
	...

080019a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b8:	d301      	bcc.n	80019be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ba:	2301      	movs	r3, #1
 80019bc:	e00f      	b.n	80019de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019be:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <SysTick_Config+0x40>)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019c6:	210f      	movs	r1, #15
 80019c8:	f04f 30ff 	mov.w	r0, #4294967295
 80019cc:	f7ff ff8e 	bl	80018ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <SysTick_Config+0x40>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d6:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <SysTick_Config+0x40>)
 80019d8:	2207      	movs	r2, #7
 80019da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	e000e010 	.word	0xe000e010

080019ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff ff29 	bl	800184c <__NVIC_SetPriorityGrouping>
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b086      	sub	sp, #24
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	4603      	mov	r3, r0
 8001a0a:	60b9      	str	r1, [r7, #8]
 8001a0c:	607a      	str	r2, [r7, #4]
 8001a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a14:	f7ff ff3e 	bl	8001894 <__NVIC_GetPriorityGrouping>
 8001a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	68b9      	ldr	r1, [r7, #8]
 8001a1e:	6978      	ldr	r0, [r7, #20]
 8001a20:	f7ff ff8e 	bl	8001940 <NVIC_EncodePriority>
 8001a24:	4602      	mov	r2, r0
 8001a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff5d 	bl	80018ec <__NVIC_SetPriority>
}
 8001a32:	bf00      	nop
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4603      	mov	r3, r0
 8001a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff31 	bl	80018b0 <__NVIC_EnableIRQ>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ffa2 	bl	80019a8 <SysTick_Config>
 8001a64:	4603      	mov	r3, r0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b089      	sub	sp, #36	; 0x24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
 8001a8a:	e159      	b.n	8001d40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	f040 8148 	bne.w	8001d3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d005      	beq.n	8001ac2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d130      	bne.n	8001b24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	2203      	movs	r2, #3
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001af8:	2201      	movs	r2, #1
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	091b      	lsrs	r3, r3, #4
 8001b0e:	f003 0201 	and.w	r2, r3, #1
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d017      	beq.n	8001b60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d123      	bne.n	8001bb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	08da      	lsrs	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3208      	adds	r2, #8
 8001b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	220f      	movs	r2, #15
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	691a      	ldr	r2, [r3, #16]
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	08da      	lsrs	r2, r3, #3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3208      	adds	r2, #8
 8001bae:	69b9      	ldr	r1, [r7, #24]
 8001bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0203 	and.w	r2, r3, #3
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 80a2 	beq.w	8001d3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	4b57      	ldr	r3, [pc, #348]	; (8001d58 <HAL_GPIO_Init+0x2e8>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	4a56      	ldr	r2, [pc, #344]	; (8001d58 <HAL_GPIO_Init+0x2e8>)
 8001c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c04:	6453      	str	r3, [r2, #68]	; 0x44
 8001c06:	4b54      	ldr	r3, [pc, #336]	; (8001d58 <HAL_GPIO_Init+0x2e8>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c12:	4a52      	ldr	r2, [pc, #328]	; (8001d5c <HAL_GPIO_Init+0x2ec>)
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	089b      	lsrs	r3, r3, #2
 8001c18:	3302      	adds	r3, #2
 8001c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	220f      	movs	r2, #15
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4013      	ands	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a49      	ldr	r2, [pc, #292]	; (8001d60 <HAL_GPIO_Init+0x2f0>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d019      	beq.n	8001c72 <HAL_GPIO_Init+0x202>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a48      	ldr	r2, [pc, #288]	; (8001d64 <HAL_GPIO_Init+0x2f4>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d013      	beq.n	8001c6e <HAL_GPIO_Init+0x1fe>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a47      	ldr	r2, [pc, #284]	; (8001d68 <HAL_GPIO_Init+0x2f8>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d00d      	beq.n	8001c6a <HAL_GPIO_Init+0x1fa>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a46      	ldr	r2, [pc, #280]	; (8001d6c <HAL_GPIO_Init+0x2fc>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d007      	beq.n	8001c66 <HAL_GPIO_Init+0x1f6>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a45      	ldr	r2, [pc, #276]	; (8001d70 <HAL_GPIO_Init+0x300>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d101      	bne.n	8001c62 <HAL_GPIO_Init+0x1f2>
 8001c5e:	2304      	movs	r3, #4
 8001c60:	e008      	b.n	8001c74 <HAL_GPIO_Init+0x204>
 8001c62:	2307      	movs	r3, #7
 8001c64:	e006      	b.n	8001c74 <HAL_GPIO_Init+0x204>
 8001c66:	2303      	movs	r3, #3
 8001c68:	e004      	b.n	8001c74 <HAL_GPIO_Init+0x204>
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	e002      	b.n	8001c74 <HAL_GPIO_Init+0x204>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <HAL_GPIO_Init+0x204>
 8001c72:	2300      	movs	r3, #0
 8001c74:	69fa      	ldr	r2, [r7, #28]
 8001c76:	f002 0203 	and.w	r2, r2, #3
 8001c7a:	0092      	lsls	r2, r2, #2
 8001c7c:	4093      	lsls	r3, r2
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c84:	4935      	ldr	r1, [pc, #212]	; (8001d5c <HAL_GPIO_Init+0x2ec>)
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	089b      	lsrs	r3, r3, #2
 8001c8a:	3302      	adds	r3, #2
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c92:	4b38      	ldr	r3, [pc, #224]	; (8001d74 <HAL_GPIO_Init+0x304>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cb6:	4a2f      	ldr	r2, [pc, #188]	; (8001d74 <HAL_GPIO_Init+0x304>)
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cbc:	4b2d      	ldr	r3, [pc, #180]	; (8001d74 <HAL_GPIO_Init+0x304>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ce0:	4a24      	ldr	r2, [pc, #144]	; (8001d74 <HAL_GPIO_Init+0x304>)
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ce6:	4b23      	ldr	r3, [pc, #140]	; (8001d74 <HAL_GPIO_Init+0x304>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d0a:	4a1a      	ldr	r2, [pc, #104]	; (8001d74 <HAL_GPIO_Init+0x304>)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d10:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <HAL_GPIO_Init+0x304>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d34:	4a0f      	ldr	r2, [pc, #60]	; (8001d74 <HAL_GPIO_Init+0x304>)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	61fb      	str	r3, [r7, #28]
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	2b0f      	cmp	r3, #15
 8001d44:	f67f aea2 	bls.w	8001a8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d48:	bf00      	nop
 8001d4a:	bf00      	nop
 8001d4c:	3724      	adds	r7, #36	; 0x24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40013800 	.word	0x40013800
 8001d60:	40020000 	.word	0x40020000
 8001d64:	40020400 	.word	0x40020400
 8001d68:	40020800 	.word	0x40020800
 8001d6c:	40020c00 	.word	0x40020c00
 8001d70:	40021000 	.word	0x40021000
 8001d74:	40013c00 	.word	0x40013c00

08001d78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	807b      	strh	r3, [r7, #2]
 8001d84:	4613      	mov	r3, r2
 8001d86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d88:	787b      	ldrb	r3, [r7, #1]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d8e:	887a      	ldrh	r2, [r7, #2]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d94:	e003      	b.n	8001d9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d96:	887b      	ldrh	r3, [r7, #2]
 8001d98:	041a      	lsls	r2, r3, #16
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	619a      	str	r2, [r3, #24]
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001db6:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001db8:	695a      	ldr	r2, [r3, #20]
 8001dba:	88fb      	ldrh	r3, [r7, #6]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d006      	beq.n	8001dd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dc2:	4a05      	ldr	r2, [pc, #20]	; (8001dd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dc4:	88fb      	ldrh	r3, [r7, #6]
 8001dc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dc8:	88fb      	ldrh	r3, [r7, #6]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fbec 	bl	80005a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001dd0:	bf00      	nop
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40013c00 	.word	0x40013c00

08001ddc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e12b      	b.n	8002046 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d106      	bne.n	8001e08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7fe ff70 	bl	8000ce8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2224      	movs	r2, #36	; 0x24
 8001e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 0201 	bic.w	r2, r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e40:	f001 fbd2 	bl	80035e8 <HAL_RCC_GetPCLK1Freq>
 8001e44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	4a81      	ldr	r2, [pc, #516]	; (8002050 <HAL_I2C_Init+0x274>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d807      	bhi.n	8001e60 <HAL_I2C_Init+0x84>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4a80      	ldr	r2, [pc, #512]	; (8002054 <HAL_I2C_Init+0x278>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	bf94      	ite	ls
 8001e58:	2301      	movls	r3, #1
 8001e5a:	2300      	movhi	r3, #0
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	e006      	b.n	8001e6e <HAL_I2C_Init+0x92>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4a7d      	ldr	r2, [pc, #500]	; (8002058 <HAL_I2C_Init+0x27c>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	bf94      	ite	ls
 8001e68:	2301      	movls	r3, #1
 8001e6a:	2300      	movhi	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e0e7      	b.n	8002046 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	4a78      	ldr	r2, [pc, #480]	; (800205c <HAL_I2C_Init+0x280>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	0c9b      	lsrs	r3, r3, #18
 8001e80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68ba      	ldr	r2, [r7, #8]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	4a6a      	ldr	r2, [pc, #424]	; (8002050 <HAL_I2C_Init+0x274>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d802      	bhi.n	8001eb0 <HAL_I2C_Init+0xd4>
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	3301      	adds	r3, #1
 8001eae:	e009      	b.n	8001ec4 <HAL_I2C_Init+0xe8>
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001eb6:	fb02 f303 	mul.w	r3, r2, r3
 8001eba:	4a69      	ldr	r2, [pc, #420]	; (8002060 <HAL_I2C_Init+0x284>)
 8001ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec0:	099b      	lsrs	r3, r3, #6
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6812      	ldr	r2, [r2, #0]
 8001ec8:	430b      	orrs	r3, r1
 8001eca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ed6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	495c      	ldr	r1, [pc, #368]	; (8002050 <HAL_I2C_Init+0x274>)
 8001ee0:	428b      	cmp	r3, r1
 8001ee2:	d819      	bhi.n	8001f18 <HAL_I2C_Init+0x13c>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	1e59      	subs	r1, r3, #1
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ef2:	1c59      	adds	r1, r3, #1
 8001ef4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ef8:	400b      	ands	r3, r1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00a      	beq.n	8001f14 <HAL_I2C_Init+0x138>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	1e59      	subs	r1, r3, #1
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f12:	e051      	b.n	8001fb8 <HAL_I2C_Init+0x1dc>
 8001f14:	2304      	movs	r3, #4
 8001f16:	e04f      	b.n	8001fb8 <HAL_I2C_Init+0x1dc>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d111      	bne.n	8001f44 <HAL_I2C_Init+0x168>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	1e58      	subs	r0, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6859      	ldr	r1, [r3, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	440b      	add	r3, r1
 8001f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f32:	3301      	adds	r3, #1
 8001f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	bf0c      	ite	eq
 8001f3c:	2301      	moveq	r3, #1
 8001f3e:	2300      	movne	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	e012      	b.n	8001f6a <HAL_I2C_Init+0x18e>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	1e58      	subs	r0, r3, #1
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6859      	ldr	r1, [r3, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	0099      	lsls	r1, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	bf0c      	ite	eq
 8001f64:	2301      	moveq	r3, #1
 8001f66:	2300      	movne	r3, #0
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_I2C_Init+0x196>
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e022      	b.n	8001fb8 <HAL_I2C_Init+0x1dc>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10e      	bne.n	8001f98 <HAL_I2C_Init+0x1bc>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	1e58      	subs	r0, r3, #1
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6859      	ldr	r1, [r3, #4]
 8001f82:	460b      	mov	r3, r1
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	440b      	add	r3, r1
 8001f88:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f96:	e00f      	b.n	8001fb8 <HAL_I2C_Init+0x1dc>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	1e58      	subs	r0, r3, #1
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6859      	ldr	r1, [r3, #4]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	0099      	lsls	r1, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fae:	3301      	adds	r3, #1
 8001fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	6809      	ldr	r1, [r1, #0]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69da      	ldr	r2, [r3, #28]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fe6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	6911      	ldr	r1, [r2, #16]
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	68d2      	ldr	r2, [r2, #12]
 8001ff2:	4311      	orrs	r1, r2
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	430b      	orrs	r3, r1
 8001ffa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	695a      	ldr	r2, [r3, #20]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	431a      	orrs	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	430a      	orrs	r2, r1
 8002016:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f042 0201 	orr.w	r2, r2, #1
 8002026:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2220      	movs	r2, #32
 8002032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	000186a0 	.word	0x000186a0
 8002054:	001e847f 	.word	0x001e847f
 8002058:	003d08ff 	.word	0x003d08ff
 800205c:	431bde83 	.word	0x431bde83
 8002060:	10624dd3 	.word	0x10624dd3

08002064 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af02      	add	r7, sp, #8
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	607a      	str	r2, [r7, #4]
 800206e:	461a      	mov	r2, r3
 8002070:	460b      	mov	r3, r1
 8002072:	817b      	strh	r3, [r7, #10]
 8002074:	4613      	mov	r3, r2
 8002076:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002078:	f7ff fbb8 	bl	80017ec <HAL_GetTick>
 800207c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b20      	cmp	r3, #32
 8002088:	f040 80e0 	bne.w	800224c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	2319      	movs	r3, #25
 8002092:	2201      	movs	r2, #1
 8002094:	4970      	ldr	r1, [pc, #448]	; (8002258 <HAL_I2C_Master_Transmit+0x1f4>)
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 fc58 	bl	800294c <I2C_WaitOnFlagUntilTimeout>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80020a2:	2302      	movs	r3, #2
 80020a4:	e0d3      	b.n	800224e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <HAL_I2C_Master_Transmit+0x50>
 80020b0:	2302      	movs	r3, #2
 80020b2:	e0cc      	b.n	800224e <HAL_I2C_Master_Transmit+0x1ea>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d007      	beq.n	80020da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f042 0201 	orr.w	r2, r2, #1
 80020d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2221      	movs	r2, #33	; 0x21
 80020ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2210      	movs	r2, #16
 80020f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	893a      	ldrh	r2, [r7, #8]
 800210a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002110:	b29a      	uxth	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	4a50      	ldr	r2, [pc, #320]	; (800225c <HAL_I2C_Master_Transmit+0x1f8>)
 800211a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800211c:	8979      	ldrh	r1, [r7, #10]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	6a3a      	ldr	r2, [r7, #32]
 8002122:	68f8      	ldr	r0, [r7, #12]
 8002124:	f000 fac2 	bl	80026ac <I2C_MasterRequestWrite>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e08d      	b.n	800224e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002148:	e066      	b.n	8002218 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	6a39      	ldr	r1, [r7, #32]
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 fcd2 	bl	8002af8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00d      	beq.n	8002176 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	2b04      	cmp	r3, #4
 8002160:	d107      	bne.n	8002172 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002170:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e06b      	b.n	800224e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	781a      	ldrb	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002190:	b29b      	uxth	r3, r3
 8002192:	3b01      	subs	r3, #1
 8002194:	b29a      	uxth	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800219e:	3b01      	subs	r3, #1
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b04      	cmp	r3, #4
 80021b2:	d11b      	bne.n	80021ec <HAL_I2C_Master_Transmit+0x188>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d017      	beq.n	80021ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	781a      	ldrb	r2, [r3, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021cc:	1c5a      	adds	r2, r3, #1
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e4:	3b01      	subs	r3, #1
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	6a39      	ldr	r1, [r7, #32]
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f000 fcc2 	bl	8002b7a <I2C_WaitOnBTFFlagUntilTimeout>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00d      	beq.n	8002218 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	2b04      	cmp	r3, #4
 8002202:	d107      	bne.n	8002214 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002212:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e01a      	b.n	800224e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221c:	2b00      	cmp	r3, #0
 800221e:	d194      	bne.n	800214a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800222e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2220      	movs	r2, #32
 8002234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002248:	2300      	movs	r3, #0
 800224a:	e000      	b.n	800224e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800224c:	2302      	movs	r3, #2
  }
}
 800224e:	4618      	mov	r0, r3
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	00100002 	.word	0x00100002
 800225c:	ffff0000 	.word	0xffff0000

08002260 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08c      	sub	sp, #48	; 0x30
 8002264:	af02      	add	r7, sp, #8
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	607a      	str	r2, [r7, #4]
 800226a:	461a      	mov	r2, r3
 800226c:	460b      	mov	r3, r1
 800226e:	817b      	strh	r3, [r7, #10]
 8002270:	4613      	mov	r3, r2
 8002272:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002274:	f7ff faba 	bl	80017ec <HAL_GetTick>
 8002278:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b20      	cmp	r3, #32
 8002284:	f040 820b 	bne.w	800269e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	2319      	movs	r3, #25
 800228e:	2201      	movs	r2, #1
 8002290:	497c      	ldr	r1, [pc, #496]	; (8002484 <HAL_I2C_Master_Receive+0x224>)
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 fb5a 	bl	800294c <I2C_WaitOnFlagUntilTimeout>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800229e:	2302      	movs	r3, #2
 80022a0:	e1fe      	b.n	80026a0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d101      	bne.n	80022b0 <HAL_I2C_Master_Receive+0x50>
 80022ac:	2302      	movs	r3, #2
 80022ae:	e1f7      	b.n	80026a0 <HAL_I2C_Master_Receive+0x440>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d007      	beq.n	80022d6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f042 0201 	orr.w	r2, r2, #1
 80022d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2222      	movs	r2, #34	; 0x22
 80022ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2210      	movs	r2, #16
 80022f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	893a      	ldrh	r2, [r7, #8]
 8002306:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230c:	b29a      	uxth	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	4a5c      	ldr	r2, [pc, #368]	; (8002488 <HAL_I2C_Master_Receive+0x228>)
 8002316:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002318:	8979      	ldrh	r1, [r7, #10]
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 fa46 	bl	80027b0 <I2C_MasterRequestRead>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e1b8      	b.n	80026a0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002332:	2b00      	cmp	r3, #0
 8002334:	d113      	bne.n	800235e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002336:	2300      	movs	r3, #0
 8002338:	623b      	str	r3, [r7, #32]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	623b      	str	r3, [r7, #32]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	623b      	str	r3, [r7, #32]
 800234a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	e18c      	b.n	8002678 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002362:	2b01      	cmp	r3, #1
 8002364:	d11b      	bne.n	800239e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002374:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	61fb      	str	r3, [r7, #28]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	61fb      	str	r3, [r7, #28]
 800238a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	e16c      	b.n	8002678 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d11b      	bne.n	80023de <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023c6:	2300      	movs	r3, #0
 80023c8:	61bb      	str	r3, [r7, #24]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	61bb      	str	r3, [r7, #24]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	61bb      	str	r3, [r7, #24]
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	e14c      	b.n	8002678 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002404:	e138      	b.n	8002678 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240a:	2b03      	cmp	r3, #3
 800240c:	f200 80f1 	bhi.w	80025f2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002414:	2b01      	cmp	r3, #1
 8002416:	d123      	bne.n	8002460 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800241a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 fbed 	bl	8002bfc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e139      	b.n	80026a0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	691a      	ldr	r2, [r3, #16]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002448:	3b01      	subs	r3, #1
 800244a:	b29a      	uxth	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002454:	b29b      	uxth	r3, r3
 8002456:	3b01      	subs	r3, #1
 8002458:	b29a      	uxth	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800245e:	e10b      	b.n	8002678 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002464:	2b02      	cmp	r3, #2
 8002466:	d14e      	bne.n	8002506 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246e:	2200      	movs	r2, #0
 8002470:	4906      	ldr	r1, [pc, #24]	; (800248c <HAL_I2C_Master_Receive+0x22c>)
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 fa6a 	bl	800294c <I2C_WaitOnFlagUntilTimeout>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d008      	beq.n	8002490 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e10e      	b.n	80026a0 <HAL_I2C_Master_Receive+0x440>
 8002482:	bf00      	nop
 8002484:	00100002 	.word	0x00100002
 8002488:	ffff0000 	.word	0xffff0000
 800248c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800249e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	691a      	ldr	r2, [r3, #16]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	b2d2      	uxtb	r2, r2
 80024ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b2:	1c5a      	adds	r2, r3, #1
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024bc:	3b01      	subs	r3, #1
 80024be:	b29a      	uxth	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	691a      	ldr	r2, [r3, #16]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	b2d2      	uxtb	r2, r2
 80024de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	3b01      	subs	r3, #1
 80024fe:	b29a      	uxth	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002504:	e0b8      	b.n	8002678 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250c:	2200      	movs	r2, #0
 800250e:	4966      	ldr	r1, [pc, #408]	; (80026a8 <HAL_I2C_Master_Receive+0x448>)
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f000 fa1b 	bl	800294c <I2C_WaitOnFlagUntilTimeout>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0bf      	b.n	80026a0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800252e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	691a      	ldr	r2, [r3, #16]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254c:	3b01      	subs	r3, #1
 800254e:	b29a      	uxth	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002558:	b29b      	uxth	r3, r3
 800255a:	3b01      	subs	r3, #1
 800255c:	b29a      	uxth	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002568:	2200      	movs	r2, #0
 800256a:	494f      	ldr	r1, [pc, #316]	; (80026a8 <HAL_I2C_Master_Receive+0x448>)
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 f9ed 	bl	800294c <I2C_WaitOnFlagUntilTimeout>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e091      	b.n	80026a0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800258a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	691a      	ldr	r2, [r3, #16]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	3b01      	subs	r3, #1
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	1c5a      	adds	r2, r3, #1
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025da:	3b01      	subs	r3, #1
 80025dc:	b29a      	uxth	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025f0:	e042      	b.n	8002678 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 fb00 	bl	8002bfc <I2C_WaitOnRXNEFlagUntilTimeout>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e04c      	b.n	80026a0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	691a      	ldr	r2, [r3, #16]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	1c5a      	adds	r2, r3, #1
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002622:	3b01      	subs	r3, #1
 8002624:	b29a      	uxth	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262e:	b29b      	uxth	r3, r3
 8002630:	3b01      	subs	r3, #1
 8002632:	b29a      	uxth	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	f003 0304 	and.w	r3, r3, #4
 8002642:	2b04      	cmp	r3, #4
 8002644:	d118      	bne.n	8002678 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002662:	3b01      	subs	r3, #1
 8002664:	b29a      	uxth	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266e:	b29b      	uxth	r3, r3
 8002670:	3b01      	subs	r3, #1
 8002672:	b29a      	uxth	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267c:	2b00      	cmp	r3, #0
 800267e:	f47f aec2 	bne.w	8002406 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2220      	movs	r2, #32
 8002686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	e000      	b.n	80026a0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800269e:	2302      	movs	r3, #2
  }
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3728      	adds	r7, #40	; 0x28
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	00010004 	.word	0x00010004

080026ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b088      	sub	sp, #32
 80026b0:	af02      	add	r7, sp, #8
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	607a      	str	r2, [r7, #4]
 80026b6:	603b      	str	r3, [r7, #0]
 80026b8:	460b      	mov	r3, r1
 80026ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	d006      	beq.n	80026d6 <I2C_MasterRequestWrite+0x2a>
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d003      	beq.n	80026d6 <I2C_MasterRequestWrite+0x2a>
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026d4:	d108      	bne.n	80026e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	e00b      	b.n	8002700 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ec:	2b12      	cmp	r3, #18
 80026ee:	d107      	bne.n	8002700 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f000 f91d 	bl	800294c <I2C_WaitOnFlagUntilTimeout>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00d      	beq.n	8002734 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002726:	d103      	bne.n	8002730 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800272e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e035      	b.n	80027a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800273c:	d108      	bne.n	8002750 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800273e:	897b      	ldrh	r3, [r7, #10]
 8002740:	b2db      	uxtb	r3, r3
 8002742:	461a      	mov	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800274c:	611a      	str	r2, [r3, #16]
 800274e:	e01b      	b.n	8002788 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002750:	897b      	ldrh	r3, [r7, #10]
 8002752:	11db      	asrs	r3, r3, #7
 8002754:	b2db      	uxtb	r3, r3
 8002756:	f003 0306 	and.w	r3, r3, #6
 800275a:	b2db      	uxtb	r3, r3
 800275c:	f063 030f 	orn	r3, r3, #15
 8002760:	b2da      	uxtb	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	490e      	ldr	r1, [pc, #56]	; (80027a8 <I2C_MasterRequestWrite+0xfc>)
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 f943 	bl	80029fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e010      	b.n	80027a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800277e:	897b      	ldrh	r3, [r7, #10]
 8002780:	b2da      	uxtb	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	4907      	ldr	r1, [pc, #28]	; (80027ac <I2C_MasterRequestWrite+0x100>)
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 f933 	bl	80029fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e000      	b.n	80027a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	00010008 	.word	0x00010008
 80027ac:	00010002 	.word	0x00010002

080027b0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	607a      	str	r2, [r7, #4]
 80027ba:	603b      	str	r3, [r7, #0]
 80027bc:	460b      	mov	r3, r1
 80027be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027d4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d006      	beq.n	80027ea <I2C_MasterRequestRead+0x3a>
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d003      	beq.n	80027ea <I2C_MasterRequestRead+0x3a>
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027e8:	d108      	bne.n	80027fc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	e00b      	b.n	8002814 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	2b11      	cmp	r3, #17
 8002802:	d107      	bne.n	8002814 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002812:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 f893 	bl	800294c <I2C_WaitOnFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00d      	beq.n	8002848 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800283a:	d103      	bne.n	8002844 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002842:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e079      	b.n	800293c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002850:	d108      	bne.n	8002864 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002852:	897b      	ldrh	r3, [r7, #10]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	b2da      	uxtb	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	611a      	str	r2, [r3, #16]
 8002862:	e05f      	b.n	8002924 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002864:	897b      	ldrh	r3, [r7, #10]
 8002866:	11db      	asrs	r3, r3, #7
 8002868:	b2db      	uxtb	r3, r3
 800286a:	f003 0306 	and.w	r3, r3, #6
 800286e:	b2db      	uxtb	r3, r3
 8002870:	f063 030f 	orn	r3, r3, #15
 8002874:	b2da      	uxtb	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	4930      	ldr	r1, [pc, #192]	; (8002944 <I2C_MasterRequestRead+0x194>)
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 f8b9 	bl	80029fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e054      	b.n	800293c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002892:	897b      	ldrh	r3, [r7, #10]
 8002894:	b2da      	uxtb	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	4929      	ldr	r1, [pc, #164]	; (8002948 <I2C_MasterRequestRead+0x198>)
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 f8a9 	bl	80029fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e044      	b.n	800293c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028b2:	2300      	movs	r3, #0
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	613b      	str	r3, [r7, #16]
 80028c6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028d6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f000 f831 	bl	800294c <I2C_WaitOnFlagUntilTimeout>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00d      	beq.n	800290c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028fe:	d103      	bne.n	8002908 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002906:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e017      	b.n	800293c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800290c:	897b      	ldrh	r3, [r7, #10]
 800290e:	11db      	asrs	r3, r3, #7
 8002910:	b2db      	uxtb	r3, r3
 8002912:	f003 0306 	and.w	r3, r3, #6
 8002916:	b2db      	uxtb	r3, r3
 8002918:	f063 030e 	orn	r3, r3, #14
 800291c:	b2da      	uxtb	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	4907      	ldr	r1, [pc, #28]	; (8002948 <I2C_MasterRequestRead+0x198>)
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 f865 	bl	80029fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e000      	b.n	800293c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	00010008 	.word	0x00010008
 8002948:	00010002 	.word	0x00010002

0800294c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	4613      	mov	r3, r2
 800295a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800295c:	e025      	b.n	80029aa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002964:	d021      	beq.n	80029aa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002966:	f7fe ff41 	bl	80017ec <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d302      	bcc.n	800297c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d116      	bne.n	80029aa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2220      	movs	r2, #32
 8002986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f043 0220 	orr.w	r2, r3, #32
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e023      	b.n	80029f2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	0c1b      	lsrs	r3, r3, #16
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d10d      	bne.n	80029d0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	43da      	mvns	r2, r3
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	4013      	ands	r3, r2
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	bf0c      	ite	eq
 80029c6:	2301      	moveq	r3, #1
 80029c8:	2300      	movne	r3, #0
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	461a      	mov	r2, r3
 80029ce:	e00c      	b.n	80029ea <I2C_WaitOnFlagUntilTimeout+0x9e>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	43da      	mvns	r2, r3
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	4013      	ands	r3, r2
 80029dc:	b29b      	uxth	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	bf0c      	ite	eq
 80029e2:	2301      	moveq	r3, #1
 80029e4:	2300      	movne	r3, #0
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	461a      	mov	r2, r3
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d0b6      	beq.n	800295e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b084      	sub	sp, #16
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	60f8      	str	r0, [r7, #12]
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	607a      	str	r2, [r7, #4]
 8002a06:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a08:	e051      	b.n	8002aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a18:	d123      	bne.n	8002a62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a28:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a32:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	f043 0204 	orr.w	r2, r3, #4
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e046      	b.n	8002af0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a68:	d021      	beq.n	8002aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a6a:	f7fe febf 	bl	80017ec <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d302      	bcc.n	8002a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d116      	bne.n	8002aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2220      	movs	r2, #32
 8002a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f043 0220 	orr.w	r2, r3, #32
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e020      	b.n	8002af0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	0c1b      	lsrs	r3, r3, #16
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d10c      	bne.n	8002ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	43da      	mvns	r2, r3
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	bf14      	ite	ne
 8002aca:	2301      	movne	r3, #1
 8002acc:	2300      	moveq	r3, #0
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	e00b      	b.n	8002aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	43da      	mvns	r2, r3
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	4013      	ands	r3, r2
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	bf14      	ite	ne
 8002ae4:	2301      	movne	r3, #1
 8002ae6:	2300      	moveq	r3, #0
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d18d      	bne.n	8002a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b04:	e02d      	b.n	8002b62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 f8ce 	bl	8002ca8 <I2C_IsAcknowledgeFailed>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e02d      	b.n	8002b72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1c:	d021      	beq.n	8002b62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b1e:	f7fe fe65 	bl	80017ec <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d302      	bcc.n	8002b34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d116      	bne.n	8002b62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f043 0220 	orr.w	r2, r3, #32
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e007      	b.n	8002b72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6c:	2b80      	cmp	r3, #128	; 0x80
 8002b6e:	d1ca      	bne.n	8002b06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b084      	sub	sp, #16
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	60f8      	str	r0, [r7, #12]
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b86:	e02d      	b.n	8002be4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 f88d 	bl	8002ca8 <I2C_IsAcknowledgeFailed>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e02d      	b.n	8002bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9e:	d021      	beq.n	8002be4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ba0:	f7fe fe24 	bl	80017ec <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d302      	bcc.n	8002bb6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d116      	bne.n	8002be4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	f043 0220 	orr.w	r2, r3, #32
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e007      	b.n	8002bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d1ca      	bne.n	8002b88 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c08:	e042      	b.n	8002c90 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	2b10      	cmp	r3, #16
 8002c16:	d119      	bne.n	8002c4c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f06f 0210 	mvn.w	r2, #16
 8002c20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e029      	b.n	8002ca0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4c:	f7fe fdce 	bl	80017ec <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d302      	bcc.n	8002c62 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d116      	bne.n	8002c90 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	f043 0220 	orr.w	r2, r3, #32
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e007      	b.n	8002ca0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9a:	2b40      	cmp	r3, #64	; 0x40
 8002c9c:	d1b5      	bne.n	8002c0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cbe:	d11b      	bne.n	8002cf8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cc8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	f043 0204 	orr.w	r2, r3, #4
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e000      	b.n	8002cfa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
	...

08002d08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e267      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d075      	beq.n	8002e12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d26:	4b88      	ldr	r3, [pc, #544]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d00c      	beq.n	8002d4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d32:	4b85      	ldr	r3, [pc, #532]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d112      	bne.n	8002d64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d3e:	4b82      	ldr	r3, [pc, #520]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d4a:	d10b      	bne.n	8002d64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d4c:	4b7e      	ldr	r3, [pc, #504]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d05b      	beq.n	8002e10 <HAL_RCC_OscConfig+0x108>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d157      	bne.n	8002e10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e242      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d6c:	d106      	bne.n	8002d7c <HAL_RCC_OscConfig+0x74>
 8002d6e:	4b76      	ldr	r3, [pc, #472]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a75      	ldr	r2, [pc, #468]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	e01d      	b.n	8002db8 <HAL_RCC_OscConfig+0xb0>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d84:	d10c      	bne.n	8002da0 <HAL_RCC_OscConfig+0x98>
 8002d86:	4b70      	ldr	r3, [pc, #448]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a6f      	ldr	r2, [pc, #444]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	4b6d      	ldr	r3, [pc, #436]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a6c      	ldr	r2, [pc, #432]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	e00b      	b.n	8002db8 <HAL_RCC_OscConfig+0xb0>
 8002da0:	4b69      	ldr	r3, [pc, #420]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a68      	ldr	r2, [pc, #416]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002daa:	6013      	str	r3, [r2, #0]
 8002dac:	4b66      	ldr	r3, [pc, #408]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a65      	ldr	r2, [pc, #404]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d013      	beq.n	8002de8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f7fe fd14 	bl	80017ec <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dc8:	f7fe fd10 	bl	80017ec <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b64      	cmp	r3, #100	; 0x64
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e207      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dda:	4b5b      	ldr	r3, [pc, #364]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0xc0>
 8002de6:	e014      	b.n	8002e12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de8:	f7fe fd00 	bl	80017ec <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002df0:	f7fe fcfc 	bl	80017ec <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b64      	cmp	r3, #100	; 0x64
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e1f3      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e02:	4b51      	ldr	r3, [pc, #324]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f0      	bne.n	8002df0 <HAL_RCC_OscConfig+0xe8>
 8002e0e:	e000      	b.n	8002e12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d063      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e1e:	4b4a      	ldr	r3, [pc, #296]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 030c 	and.w	r3, r3, #12
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00b      	beq.n	8002e42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e2a:	4b47      	ldr	r3, [pc, #284]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d11c      	bne.n	8002e70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e36:	4b44      	ldr	r3, [pc, #272]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d116      	bne.n	8002e70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e42:	4b41      	ldr	r3, [pc, #260]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d005      	beq.n	8002e5a <HAL_RCC_OscConfig+0x152>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d001      	beq.n	8002e5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e1c7      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e5a:	4b3b      	ldr	r3, [pc, #236]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4937      	ldr	r1, [pc, #220]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e6e:	e03a      	b.n	8002ee6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d020      	beq.n	8002eba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e78:	4b34      	ldr	r3, [pc, #208]	; (8002f4c <HAL_RCC_OscConfig+0x244>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7e:	f7fe fcb5 	bl	80017ec <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e86:	f7fe fcb1 	bl	80017ec <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e1a8      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e98:	4b2b      	ldr	r3, [pc, #172]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f0      	beq.n	8002e86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea4:	4b28      	ldr	r3, [pc, #160]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	4925      	ldr	r1, [pc, #148]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	600b      	str	r3, [r1, #0]
 8002eb8:	e015      	b.n	8002ee6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eba:	4b24      	ldr	r3, [pc, #144]	; (8002f4c <HAL_RCC_OscConfig+0x244>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec0:	f7fe fc94 	bl	80017ec <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ec8:	f7fe fc90 	bl	80017ec <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e187      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eda:	4b1b      	ldr	r3, [pc, #108]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f0      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d036      	beq.n	8002f60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d016      	beq.n	8002f28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002efa:	4b15      	ldr	r3, [pc, #84]	; (8002f50 <HAL_RCC_OscConfig+0x248>)
 8002efc:	2201      	movs	r2, #1
 8002efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f00:	f7fe fc74 	bl	80017ec <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f08:	f7fe fc70 	bl	80017ec <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e167      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f1a:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0x200>
 8002f26:	e01b      	b.n	8002f60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f28:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <HAL_RCC_OscConfig+0x248>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2e:	f7fe fc5d 	bl	80017ec <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f34:	e00e      	b.n	8002f54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f36:	f7fe fc59 	bl	80017ec <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d907      	bls.n	8002f54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e150      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	42470000 	.word	0x42470000
 8002f50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f54:	4b88      	ldr	r3, [pc, #544]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1ea      	bne.n	8002f36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 8097 	beq.w	800309c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f72:	4b81      	ldr	r3, [pc, #516]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10f      	bne.n	8002f9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60bb      	str	r3, [r7, #8]
 8002f82:	4b7d      	ldr	r3, [pc, #500]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	4a7c      	ldr	r2, [pc, #496]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f8e:	4b7a      	ldr	r3, [pc, #488]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9e:	4b77      	ldr	r3, [pc, #476]	; (800317c <HAL_RCC_OscConfig+0x474>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d118      	bne.n	8002fdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002faa:	4b74      	ldr	r3, [pc, #464]	; (800317c <HAL_RCC_OscConfig+0x474>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a73      	ldr	r2, [pc, #460]	; (800317c <HAL_RCC_OscConfig+0x474>)
 8002fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fb6:	f7fe fc19 	bl	80017ec <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fbe:	f7fe fc15 	bl	80017ec <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e10c      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd0:	4b6a      	ldr	r3, [pc, #424]	; (800317c <HAL_RCC_OscConfig+0x474>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0f0      	beq.n	8002fbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d106      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x2ea>
 8002fe4:	4b64      	ldr	r3, [pc, #400]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe8:	4a63      	ldr	r2, [pc, #396]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff0:	e01c      	b.n	800302c <HAL_RCC_OscConfig+0x324>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2b05      	cmp	r3, #5
 8002ff8:	d10c      	bne.n	8003014 <HAL_RCC_OscConfig+0x30c>
 8002ffa:	4b5f      	ldr	r3, [pc, #380]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8002ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffe:	4a5e      	ldr	r2, [pc, #376]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003000:	f043 0304 	orr.w	r3, r3, #4
 8003004:	6713      	str	r3, [r2, #112]	; 0x70
 8003006:	4b5c      	ldr	r3, [pc, #368]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300a:	4a5b      	ldr	r2, [pc, #364]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	6713      	str	r3, [r2, #112]	; 0x70
 8003012:	e00b      	b.n	800302c <HAL_RCC_OscConfig+0x324>
 8003014:	4b58      	ldr	r3, [pc, #352]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003018:	4a57      	ldr	r2, [pc, #348]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 800301a:	f023 0301 	bic.w	r3, r3, #1
 800301e:	6713      	str	r3, [r2, #112]	; 0x70
 8003020:	4b55      	ldr	r3, [pc, #340]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003024:	4a54      	ldr	r2, [pc, #336]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003026:	f023 0304 	bic.w	r3, r3, #4
 800302a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d015      	beq.n	8003060 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003034:	f7fe fbda 	bl	80017ec <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303a:	e00a      	b.n	8003052 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800303c:	f7fe fbd6 	bl	80017ec <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	f241 3288 	movw	r2, #5000	; 0x1388
 800304a:	4293      	cmp	r3, r2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e0cb      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003052:	4b49      	ldr	r3, [pc, #292]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0ee      	beq.n	800303c <HAL_RCC_OscConfig+0x334>
 800305e:	e014      	b.n	800308a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003060:	f7fe fbc4 	bl	80017ec <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003066:	e00a      	b.n	800307e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003068:	f7fe fbc0 	bl	80017ec <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	f241 3288 	movw	r2, #5000	; 0x1388
 8003076:	4293      	cmp	r3, r2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e0b5      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800307e:	4b3e      	ldr	r3, [pc, #248]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1ee      	bne.n	8003068 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800308a:	7dfb      	ldrb	r3, [r7, #23]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d105      	bne.n	800309c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003090:	4b39      	ldr	r3, [pc, #228]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	4a38      	ldr	r2, [pc, #224]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003096:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800309a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 80a1 	beq.w	80031e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030a6:	4b34      	ldr	r3, [pc, #208]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d05c      	beq.n	800316c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d141      	bne.n	800313e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ba:	4b31      	ldr	r3, [pc, #196]	; (8003180 <HAL_RCC_OscConfig+0x478>)
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c0:	f7fe fb94 	bl	80017ec <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c8:	f7fe fb90 	bl	80017ec <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e087      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030da:	4b27      	ldr	r3, [pc, #156]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69da      	ldr	r2, [r3, #28]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	019b      	lsls	r3, r3, #6
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fc:	085b      	lsrs	r3, r3, #1
 80030fe:	3b01      	subs	r3, #1
 8003100:	041b      	lsls	r3, r3, #16
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003108:	061b      	lsls	r3, r3, #24
 800310a:	491b      	ldr	r1, [pc, #108]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 800310c:	4313      	orrs	r3, r2
 800310e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003110:	4b1b      	ldr	r3, [pc, #108]	; (8003180 <HAL_RCC_OscConfig+0x478>)
 8003112:	2201      	movs	r2, #1
 8003114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003116:	f7fe fb69 	bl	80017ec <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800311c:	e008      	b.n	8003130 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800311e:	f7fe fb65 	bl	80017ec <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e05c      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003130:	4b11      	ldr	r3, [pc, #68]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0f0      	beq.n	800311e <HAL_RCC_OscConfig+0x416>
 800313c:	e054      	b.n	80031e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313e:	4b10      	ldr	r3, [pc, #64]	; (8003180 <HAL_RCC_OscConfig+0x478>)
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003144:	f7fe fb52 	bl	80017ec <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800314c:	f7fe fb4e 	bl	80017ec <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e045      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315e:	4b06      	ldr	r3, [pc, #24]	; (8003178 <HAL_RCC_OscConfig+0x470>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x444>
 800316a:	e03d      	b.n	80031e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d107      	bne.n	8003184 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e038      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
 8003178:	40023800 	.word	0x40023800
 800317c:	40007000 	.word	0x40007000
 8003180:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003184:	4b1b      	ldr	r3, [pc, #108]	; (80031f4 <HAL_RCC_OscConfig+0x4ec>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d028      	beq.n	80031e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800319c:	429a      	cmp	r2, r3
 800319e:	d121      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d11a      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031b4:	4013      	ands	r3, r2
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031bc:	4293      	cmp	r3, r2
 80031be:	d111      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ca:	085b      	lsrs	r3, r3, #1
 80031cc:	3b01      	subs	r3, #1
 80031ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d107      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e000      	b.n	80031ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40023800 	.word	0x40023800

080031f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e0cc      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800320c:	4b68      	ldr	r3, [pc, #416]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d90c      	bls.n	8003234 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321a:	4b65      	ldr	r3, [pc, #404]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003222:	4b63      	ldr	r3, [pc, #396]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d001      	beq.n	8003234 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e0b8      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d020      	beq.n	8003282 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800324c:	4b59      	ldr	r3, [pc, #356]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	4a58      	ldr	r2, [pc, #352]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003256:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0308 	and.w	r3, r3, #8
 8003260:	2b00      	cmp	r3, #0
 8003262:	d005      	beq.n	8003270 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003264:	4b53      	ldr	r3, [pc, #332]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	4a52      	ldr	r2, [pc, #328]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800326e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003270:	4b50      	ldr	r3, [pc, #320]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	494d      	ldr	r1, [pc, #308]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	4313      	orrs	r3, r2
 8003280:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d044      	beq.n	8003318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d107      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003296:	4b47      	ldr	r3, [pc, #284]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d119      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e07f      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d003      	beq.n	80032b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d107      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b6:	4b3f      	ldr	r3, [pc, #252]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d109      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e06f      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c6:	4b3b      	ldr	r3, [pc, #236]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e067      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032d6:	4b37      	ldr	r3, [pc, #220]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f023 0203 	bic.w	r2, r3, #3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	4934      	ldr	r1, [pc, #208]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032e8:	f7fe fa80 	bl	80017ec <HAL_GetTick>
 80032ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ee:	e00a      	b.n	8003306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032f0:	f7fe fa7c 	bl	80017ec <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fe:	4293      	cmp	r3, r2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e04f      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003306:	4b2b      	ldr	r3, [pc, #172]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 020c 	and.w	r2, r3, #12
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	429a      	cmp	r2, r3
 8003316:	d1eb      	bne.n	80032f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003318:	4b25      	ldr	r3, [pc, #148]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d20c      	bcs.n	8003340 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003326:	4b22      	ldr	r3, [pc, #136]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800332e:	4b20      	ldr	r3, [pc, #128]	; (80033b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d001      	beq.n	8003340 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e032      	b.n	80033a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b00      	cmp	r3, #0
 800334a:	d008      	beq.n	800335e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800334c:	4b19      	ldr	r3, [pc, #100]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	4916      	ldr	r1, [pc, #88]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	4313      	orrs	r3, r2
 800335c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b00      	cmp	r3, #0
 8003368:	d009      	beq.n	800337e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800336a:	4b12      	ldr	r3, [pc, #72]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	490e      	ldr	r1, [pc, #56]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	4313      	orrs	r3, r2
 800337c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800337e:	f000 f821 	bl	80033c4 <HAL_RCC_GetSysClockFreq>
 8003382:	4602      	mov	r2, r0
 8003384:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	091b      	lsrs	r3, r3, #4
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	490a      	ldr	r1, [pc, #40]	; (80033b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003390:	5ccb      	ldrb	r3, [r1, r3]
 8003392:	fa22 f303 	lsr.w	r3, r2, r3
 8003396:	4a09      	ldr	r2, [pc, #36]	; (80033bc <HAL_RCC_ClockConfig+0x1c4>)
 8003398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800339a:	4b09      	ldr	r3, [pc, #36]	; (80033c0 <HAL_RCC_ClockConfig+0x1c8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fe f9e0 	bl	8001764 <HAL_InitTick>

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40023c00 	.word	0x40023c00
 80033b4:	40023800 	.word	0x40023800
 80033b8:	08004ee8 	.word	0x08004ee8
 80033bc:	20000000 	.word	0x20000000
 80033c0:	20000004 	.word	0x20000004

080033c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033c8:	b094      	sub	sp, #80	; 0x50
 80033ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	647b      	str	r3, [r7, #68]	; 0x44
 80033d0:	2300      	movs	r3, #0
 80033d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033d4:	2300      	movs	r3, #0
 80033d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80033d8:	2300      	movs	r3, #0
 80033da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033dc:	4b79      	ldr	r3, [pc, #484]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 030c 	and.w	r3, r3, #12
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d00d      	beq.n	8003404 <HAL_RCC_GetSysClockFreq+0x40>
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	f200 80e1 	bhi.w	80035b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <HAL_RCC_GetSysClockFreq+0x34>
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d003      	beq.n	80033fe <HAL_RCC_GetSysClockFreq+0x3a>
 80033f6:	e0db      	b.n	80035b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033f8:	4b73      	ldr	r3, [pc, #460]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80033fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80033fc:	e0db      	b.n	80035b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033fe:	4b73      	ldr	r3, [pc, #460]	; (80035cc <HAL_RCC_GetSysClockFreq+0x208>)
 8003400:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003402:	e0d8      	b.n	80035b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003404:	4b6f      	ldr	r3, [pc, #444]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800340c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800340e:	4b6d      	ldr	r3, [pc, #436]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d063      	beq.n	80034e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800341a:	4b6a      	ldr	r3, [pc, #424]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	099b      	lsrs	r3, r3, #6
 8003420:	2200      	movs	r2, #0
 8003422:	63bb      	str	r3, [r7, #56]	; 0x38
 8003424:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800342c:	633b      	str	r3, [r7, #48]	; 0x30
 800342e:	2300      	movs	r3, #0
 8003430:	637b      	str	r3, [r7, #52]	; 0x34
 8003432:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003436:	4622      	mov	r2, r4
 8003438:	462b      	mov	r3, r5
 800343a:	f04f 0000 	mov.w	r0, #0
 800343e:	f04f 0100 	mov.w	r1, #0
 8003442:	0159      	lsls	r1, r3, #5
 8003444:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003448:	0150      	lsls	r0, r2, #5
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4621      	mov	r1, r4
 8003450:	1a51      	subs	r1, r2, r1
 8003452:	6139      	str	r1, [r7, #16]
 8003454:	4629      	mov	r1, r5
 8003456:	eb63 0301 	sbc.w	r3, r3, r1
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	f04f 0300 	mov.w	r3, #0
 8003464:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003468:	4659      	mov	r1, fp
 800346a:	018b      	lsls	r3, r1, #6
 800346c:	4651      	mov	r1, sl
 800346e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003472:	4651      	mov	r1, sl
 8003474:	018a      	lsls	r2, r1, #6
 8003476:	4651      	mov	r1, sl
 8003478:	ebb2 0801 	subs.w	r8, r2, r1
 800347c:	4659      	mov	r1, fp
 800347e:	eb63 0901 	sbc.w	r9, r3, r1
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	f04f 0300 	mov.w	r3, #0
 800348a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800348e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003492:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003496:	4690      	mov	r8, r2
 8003498:	4699      	mov	r9, r3
 800349a:	4623      	mov	r3, r4
 800349c:	eb18 0303 	adds.w	r3, r8, r3
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	462b      	mov	r3, r5
 80034a4:	eb49 0303 	adc.w	r3, r9, r3
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034b6:	4629      	mov	r1, r5
 80034b8:	024b      	lsls	r3, r1, #9
 80034ba:	4621      	mov	r1, r4
 80034bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034c0:	4621      	mov	r1, r4
 80034c2:	024a      	lsls	r2, r1, #9
 80034c4:	4610      	mov	r0, r2
 80034c6:	4619      	mov	r1, r3
 80034c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ca:	2200      	movs	r2, #0
 80034cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034d4:	f7fc fed4 	bl	8000280 <__aeabi_uldivmod>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	4613      	mov	r3, r2
 80034de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034e0:	e058      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034e2:	4b38      	ldr	r3, [pc, #224]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	099b      	lsrs	r3, r3, #6
 80034e8:	2200      	movs	r2, #0
 80034ea:	4618      	mov	r0, r3
 80034ec:	4611      	mov	r1, r2
 80034ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034f2:	623b      	str	r3, [r7, #32]
 80034f4:	2300      	movs	r3, #0
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24
 80034f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034fc:	4642      	mov	r2, r8
 80034fe:	464b      	mov	r3, r9
 8003500:	f04f 0000 	mov.w	r0, #0
 8003504:	f04f 0100 	mov.w	r1, #0
 8003508:	0159      	lsls	r1, r3, #5
 800350a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800350e:	0150      	lsls	r0, r2, #5
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4641      	mov	r1, r8
 8003516:	ebb2 0a01 	subs.w	sl, r2, r1
 800351a:	4649      	mov	r1, r9
 800351c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800352c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003530:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003534:	ebb2 040a 	subs.w	r4, r2, sl
 8003538:	eb63 050b 	sbc.w	r5, r3, fp
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	00eb      	lsls	r3, r5, #3
 8003546:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800354a:	00e2      	lsls	r2, r4, #3
 800354c:	4614      	mov	r4, r2
 800354e:	461d      	mov	r5, r3
 8003550:	4643      	mov	r3, r8
 8003552:	18e3      	adds	r3, r4, r3
 8003554:	603b      	str	r3, [r7, #0]
 8003556:	464b      	mov	r3, r9
 8003558:	eb45 0303 	adc.w	r3, r5, r3
 800355c:	607b      	str	r3, [r7, #4]
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	e9d7 4500 	ldrd	r4, r5, [r7]
 800356a:	4629      	mov	r1, r5
 800356c:	028b      	lsls	r3, r1, #10
 800356e:	4621      	mov	r1, r4
 8003570:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003574:	4621      	mov	r1, r4
 8003576:	028a      	lsls	r2, r1, #10
 8003578:	4610      	mov	r0, r2
 800357a:	4619      	mov	r1, r3
 800357c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800357e:	2200      	movs	r2, #0
 8003580:	61bb      	str	r3, [r7, #24]
 8003582:	61fa      	str	r2, [r7, #28]
 8003584:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003588:	f7fc fe7a 	bl	8000280 <__aeabi_uldivmod>
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	4613      	mov	r3, r2
 8003592:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003594:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	0c1b      	lsrs	r3, r3, #16
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	3301      	adds	r3, #1
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80035a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035ae:	e002      	b.n	80035b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035b0:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80035b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3750      	adds	r7, #80	; 0x50
 80035bc:	46bd      	mov	sp, r7
 80035be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035c2:	bf00      	nop
 80035c4:	40023800 	.word	0x40023800
 80035c8:	00f42400 	.word	0x00f42400
 80035cc:	007a1200 	.word	0x007a1200

080035d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035d4:	4b03      	ldr	r3, [pc, #12]	; (80035e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80035d6:	681b      	ldr	r3, [r3, #0]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	20000000 	.word	0x20000000

080035e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035ec:	f7ff fff0 	bl	80035d0 <HAL_RCC_GetHCLKFreq>
 80035f0:	4602      	mov	r2, r0
 80035f2:	4b05      	ldr	r3, [pc, #20]	; (8003608 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	0a9b      	lsrs	r3, r3, #10
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	4903      	ldr	r1, [pc, #12]	; (800360c <HAL_RCC_GetPCLK1Freq+0x24>)
 80035fe:	5ccb      	ldrb	r3, [r1, r3]
 8003600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003604:	4618      	mov	r0, r3
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40023800 	.word	0x40023800
 800360c:	08004ef8 	.word	0x08004ef8

08003610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003614:	f7ff ffdc 	bl	80035d0 <HAL_RCC_GetHCLKFreq>
 8003618:	4602      	mov	r2, r0
 800361a:	4b05      	ldr	r3, [pc, #20]	; (8003630 <HAL_RCC_GetPCLK2Freq+0x20>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	0b5b      	lsrs	r3, r3, #13
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	4903      	ldr	r1, [pc, #12]	; (8003634 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003626:	5ccb      	ldrb	r3, [r1, r3]
 8003628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800362c:	4618      	mov	r0, r3
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40023800 	.word	0x40023800
 8003634:	08004ef8 	.word	0x08004ef8

08003638 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e03f      	b.n	80036ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d106      	bne.n	8003664 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7fd fb8a 	bl	8000d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2224      	movs	r2, #36	; 0x24
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800367a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f929 	bl	80038d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	691a      	ldr	r2, [r3, #16]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003690:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	695a      	ldr	r2, [r3, #20]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68da      	ldr	r2, [r3, #12]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b08a      	sub	sp, #40	; 0x28
 80036d6:	af02      	add	r7, sp, #8
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	603b      	str	r3, [r7, #0]
 80036de:	4613      	mov	r3, r2
 80036e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b20      	cmp	r3, #32
 80036f0:	d17c      	bne.n	80037ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d002      	beq.n	80036fe <HAL_UART_Transmit+0x2c>
 80036f8:	88fb      	ldrh	r3, [r7, #6]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e075      	b.n	80037ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <HAL_UART_Transmit+0x3e>
 800370c:	2302      	movs	r3, #2
 800370e:	e06e      	b.n	80037ee <HAL_UART_Transmit+0x11c>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2221      	movs	r2, #33	; 0x21
 8003722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003726:	f7fe f861 	bl	80017ec <HAL_GetTick>
 800372a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	88fa      	ldrh	r2, [r7, #6]
 8003730:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	88fa      	ldrh	r2, [r7, #6]
 8003736:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003740:	d108      	bne.n	8003754 <HAL_UART_Transmit+0x82>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d104      	bne.n	8003754 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800374a:	2300      	movs	r3, #0
 800374c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	61bb      	str	r3, [r7, #24]
 8003752:	e003      	b.n	800375c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003758:	2300      	movs	r3, #0
 800375a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003764:	e02a      	b.n	80037bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2200      	movs	r2, #0
 800376e:	2180      	movs	r1, #128	; 0x80
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 f840 	bl	80037f6 <UART_WaitOnFlagUntilTimeout>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e036      	b.n	80037ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10b      	bne.n	800379e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003794:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	3302      	adds	r3, #2
 800379a:	61bb      	str	r3, [r7, #24]
 800379c:	e007      	b.n	80037ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	781a      	ldrb	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	3301      	adds	r3, #1
 80037ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1cf      	bne.n	8003766 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2200      	movs	r2, #0
 80037ce:	2140      	movs	r1, #64	; 0x40
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f000 f810 	bl	80037f6 <UART_WaitOnFlagUntilTimeout>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e006      	b.n	80037ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80037e8:	2300      	movs	r3, #0
 80037ea:	e000      	b.n	80037ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80037ec:	2302      	movs	r3, #2
  }
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3720      	adds	r7, #32
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b090      	sub	sp, #64	; 0x40
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	60f8      	str	r0, [r7, #12]
 80037fe:	60b9      	str	r1, [r7, #8]
 8003800:	603b      	str	r3, [r7, #0]
 8003802:	4613      	mov	r3, r2
 8003804:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003806:	e050      	b.n	80038aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800380a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380e:	d04c      	beq.n	80038aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003812:	2b00      	cmp	r3, #0
 8003814:	d007      	beq.n	8003826 <UART_WaitOnFlagUntilTimeout+0x30>
 8003816:	f7fd ffe9 	bl	80017ec <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003822:	429a      	cmp	r2, r3
 8003824:	d241      	bcs.n	80038aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	330c      	adds	r3, #12
 800382c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003830:	e853 3f00 	ldrex	r3, [r3]
 8003834:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800383c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	330c      	adds	r3, #12
 8003844:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003846:	637a      	str	r2, [r7, #52]	; 0x34
 8003848:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800384c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800384e:	e841 2300 	strex	r3, r2, [r1]
 8003852:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1e5      	bne.n	8003826 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	3314      	adds	r3, #20
 8003860:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	e853 3f00 	ldrex	r3, [r3]
 8003868:	613b      	str	r3, [r7, #16]
   return(result);
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f023 0301 	bic.w	r3, r3, #1
 8003870:	63bb      	str	r3, [r7, #56]	; 0x38
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	3314      	adds	r3, #20
 8003878:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800387a:	623a      	str	r2, [r7, #32]
 800387c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387e:	69f9      	ldr	r1, [r7, #28]
 8003880:	6a3a      	ldr	r2, [r7, #32]
 8003882:	e841 2300 	strex	r3, r2, [r1]
 8003886:	61bb      	str	r3, [r7, #24]
   return(result);
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1e5      	bne.n	800385a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2220      	movs	r2, #32
 8003892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2220      	movs	r2, #32
 800389a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e00f      	b.n	80038ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	4013      	ands	r3, r2
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	bf0c      	ite	eq
 80038ba:	2301      	moveq	r3, #1
 80038bc:	2300      	movne	r3, #0
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	461a      	mov	r2, r3
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d09f      	beq.n	8003808 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3740      	adds	r7, #64	; 0x40
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038d8:	b0c0      	sub	sp, #256	; 0x100
 80038da:	af00      	add	r7, sp, #0
 80038dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f0:	68d9      	ldr	r1, [r3, #12]
 80038f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	ea40 0301 	orr.w	r3, r0, r1
 80038fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	431a      	orrs	r2, r3
 800390c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	431a      	orrs	r2, r3
 8003914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	4313      	orrs	r3, r2
 800391c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800392c:	f021 010c 	bic.w	r1, r1, #12
 8003930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800393a:	430b      	orrs	r3, r1
 800393c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800393e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800394a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800394e:	6999      	ldr	r1, [r3, #24]
 8003950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	ea40 0301 	orr.w	r3, r0, r1
 800395a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800395c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	4b8f      	ldr	r3, [pc, #572]	; (8003ba0 <UART_SetConfig+0x2cc>)
 8003964:	429a      	cmp	r2, r3
 8003966:	d005      	beq.n	8003974 <UART_SetConfig+0xa0>
 8003968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	4b8d      	ldr	r3, [pc, #564]	; (8003ba4 <UART_SetConfig+0x2d0>)
 8003970:	429a      	cmp	r2, r3
 8003972:	d104      	bne.n	800397e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003974:	f7ff fe4c 	bl	8003610 <HAL_RCC_GetPCLK2Freq>
 8003978:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800397c:	e003      	b.n	8003986 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800397e:	f7ff fe33 	bl	80035e8 <HAL_RCC_GetPCLK1Freq>
 8003982:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003990:	f040 810c 	bne.w	8003bac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003994:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003998:	2200      	movs	r2, #0
 800399a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800399e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80039a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80039a6:	4622      	mov	r2, r4
 80039a8:	462b      	mov	r3, r5
 80039aa:	1891      	adds	r1, r2, r2
 80039ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80039ae:	415b      	adcs	r3, r3
 80039b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80039b6:	4621      	mov	r1, r4
 80039b8:	eb12 0801 	adds.w	r8, r2, r1
 80039bc:	4629      	mov	r1, r5
 80039be:	eb43 0901 	adc.w	r9, r3, r1
 80039c2:	f04f 0200 	mov.w	r2, #0
 80039c6:	f04f 0300 	mov.w	r3, #0
 80039ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039d6:	4690      	mov	r8, r2
 80039d8:	4699      	mov	r9, r3
 80039da:	4623      	mov	r3, r4
 80039dc:	eb18 0303 	adds.w	r3, r8, r3
 80039e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039e4:	462b      	mov	r3, r5
 80039e6:	eb49 0303 	adc.w	r3, r9, r3
 80039ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80039fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a02:	460b      	mov	r3, r1
 8003a04:	18db      	adds	r3, r3, r3
 8003a06:	653b      	str	r3, [r7, #80]	; 0x50
 8003a08:	4613      	mov	r3, r2
 8003a0a:	eb42 0303 	adc.w	r3, r2, r3
 8003a0e:	657b      	str	r3, [r7, #84]	; 0x54
 8003a10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a18:	f7fc fc32 	bl	8000280 <__aeabi_uldivmod>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4b61      	ldr	r3, [pc, #388]	; (8003ba8 <UART_SetConfig+0x2d4>)
 8003a22:	fba3 2302 	umull	r2, r3, r3, r2
 8003a26:	095b      	lsrs	r3, r3, #5
 8003a28:	011c      	lsls	r4, r3, #4
 8003a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a3c:	4642      	mov	r2, r8
 8003a3e:	464b      	mov	r3, r9
 8003a40:	1891      	adds	r1, r2, r2
 8003a42:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a44:	415b      	adcs	r3, r3
 8003a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a4c:	4641      	mov	r1, r8
 8003a4e:	eb12 0a01 	adds.w	sl, r2, r1
 8003a52:	4649      	mov	r1, r9
 8003a54:	eb43 0b01 	adc.w	fp, r3, r1
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	f04f 0300 	mov.w	r3, #0
 8003a60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a6c:	4692      	mov	sl, r2
 8003a6e:	469b      	mov	fp, r3
 8003a70:	4643      	mov	r3, r8
 8003a72:	eb1a 0303 	adds.w	r3, sl, r3
 8003a76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a7a:	464b      	mov	r3, r9
 8003a7c:	eb4b 0303 	adc.w	r3, fp, r3
 8003a80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	18db      	adds	r3, r3, r3
 8003a9c:	643b      	str	r3, [r7, #64]	; 0x40
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	eb42 0303 	adc.w	r3, r2, r3
 8003aa4:	647b      	str	r3, [r7, #68]	; 0x44
 8003aa6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003aaa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003aae:	f7fc fbe7 	bl	8000280 <__aeabi_uldivmod>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4611      	mov	r1, r2
 8003ab8:	4b3b      	ldr	r3, [pc, #236]	; (8003ba8 <UART_SetConfig+0x2d4>)
 8003aba:	fba3 2301 	umull	r2, r3, r3, r1
 8003abe:	095b      	lsrs	r3, r3, #5
 8003ac0:	2264      	movs	r2, #100	; 0x64
 8003ac2:	fb02 f303 	mul.w	r3, r2, r3
 8003ac6:	1acb      	subs	r3, r1, r3
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ace:	4b36      	ldr	r3, [pc, #216]	; (8003ba8 <UART_SetConfig+0x2d4>)
 8003ad0:	fba3 2302 	umull	r2, r3, r3, r2
 8003ad4:	095b      	lsrs	r3, r3, #5
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003adc:	441c      	add	r4, r3
 8003ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ae8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003aec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003af0:	4642      	mov	r2, r8
 8003af2:	464b      	mov	r3, r9
 8003af4:	1891      	adds	r1, r2, r2
 8003af6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003af8:	415b      	adcs	r3, r3
 8003afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003afc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b00:	4641      	mov	r1, r8
 8003b02:	1851      	adds	r1, r2, r1
 8003b04:	6339      	str	r1, [r7, #48]	; 0x30
 8003b06:	4649      	mov	r1, r9
 8003b08:	414b      	adcs	r3, r1
 8003b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	f04f 0300 	mov.w	r3, #0
 8003b14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b18:	4659      	mov	r1, fp
 8003b1a:	00cb      	lsls	r3, r1, #3
 8003b1c:	4651      	mov	r1, sl
 8003b1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b22:	4651      	mov	r1, sl
 8003b24:	00ca      	lsls	r2, r1, #3
 8003b26:	4610      	mov	r0, r2
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	4642      	mov	r2, r8
 8003b2e:	189b      	adds	r3, r3, r2
 8003b30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b34:	464b      	mov	r3, r9
 8003b36:	460a      	mov	r2, r1
 8003b38:	eb42 0303 	adc.w	r3, r2, r3
 8003b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b54:	460b      	mov	r3, r1
 8003b56:	18db      	adds	r3, r3, r3
 8003b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	eb42 0303 	adc.w	r3, r2, r3
 8003b60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b6a:	f7fc fb89 	bl	8000280 <__aeabi_uldivmod>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	460b      	mov	r3, r1
 8003b72:	4b0d      	ldr	r3, [pc, #52]	; (8003ba8 <UART_SetConfig+0x2d4>)
 8003b74:	fba3 1302 	umull	r1, r3, r3, r2
 8003b78:	095b      	lsrs	r3, r3, #5
 8003b7a:	2164      	movs	r1, #100	; 0x64
 8003b7c:	fb01 f303 	mul.w	r3, r1, r3
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	3332      	adds	r3, #50	; 0x32
 8003b86:	4a08      	ldr	r2, [pc, #32]	; (8003ba8 <UART_SetConfig+0x2d4>)
 8003b88:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8c:	095b      	lsrs	r3, r3, #5
 8003b8e:	f003 0207 	and.w	r2, r3, #7
 8003b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4422      	add	r2, r4
 8003b9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b9c:	e105      	b.n	8003daa <UART_SetConfig+0x4d6>
 8003b9e:	bf00      	nop
 8003ba0:	40011000 	.word	0x40011000
 8003ba4:	40011400 	.word	0x40011400
 8003ba8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003bba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003bbe:	4642      	mov	r2, r8
 8003bc0:	464b      	mov	r3, r9
 8003bc2:	1891      	adds	r1, r2, r2
 8003bc4:	6239      	str	r1, [r7, #32]
 8003bc6:	415b      	adcs	r3, r3
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bce:	4641      	mov	r1, r8
 8003bd0:	1854      	adds	r4, r2, r1
 8003bd2:	4649      	mov	r1, r9
 8003bd4:	eb43 0501 	adc.w	r5, r3, r1
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	00eb      	lsls	r3, r5, #3
 8003be2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003be6:	00e2      	lsls	r2, r4, #3
 8003be8:	4614      	mov	r4, r2
 8003bea:	461d      	mov	r5, r3
 8003bec:	4643      	mov	r3, r8
 8003bee:	18e3      	adds	r3, r4, r3
 8003bf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003bf4:	464b      	mov	r3, r9
 8003bf6:	eb45 0303 	adc.w	r3, r5, r3
 8003bfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c0e:	f04f 0200 	mov.w	r2, #0
 8003c12:	f04f 0300 	mov.w	r3, #0
 8003c16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c1a:	4629      	mov	r1, r5
 8003c1c:	008b      	lsls	r3, r1, #2
 8003c1e:	4621      	mov	r1, r4
 8003c20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c24:	4621      	mov	r1, r4
 8003c26:	008a      	lsls	r2, r1, #2
 8003c28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c2c:	f7fc fb28 	bl	8000280 <__aeabi_uldivmod>
 8003c30:	4602      	mov	r2, r0
 8003c32:	460b      	mov	r3, r1
 8003c34:	4b60      	ldr	r3, [pc, #384]	; (8003db8 <UART_SetConfig+0x4e4>)
 8003c36:	fba3 2302 	umull	r2, r3, r3, r2
 8003c3a:	095b      	lsrs	r3, r3, #5
 8003c3c:	011c      	lsls	r4, r3, #4
 8003c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c42:	2200      	movs	r2, #0
 8003c44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c50:	4642      	mov	r2, r8
 8003c52:	464b      	mov	r3, r9
 8003c54:	1891      	adds	r1, r2, r2
 8003c56:	61b9      	str	r1, [r7, #24]
 8003c58:	415b      	adcs	r3, r3
 8003c5a:	61fb      	str	r3, [r7, #28]
 8003c5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c60:	4641      	mov	r1, r8
 8003c62:	1851      	adds	r1, r2, r1
 8003c64:	6139      	str	r1, [r7, #16]
 8003c66:	4649      	mov	r1, r9
 8003c68:	414b      	adcs	r3, r1
 8003c6a:	617b      	str	r3, [r7, #20]
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	f04f 0300 	mov.w	r3, #0
 8003c74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c78:	4659      	mov	r1, fp
 8003c7a:	00cb      	lsls	r3, r1, #3
 8003c7c:	4651      	mov	r1, sl
 8003c7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c82:	4651      	mov	r1, sl
 8003c84:	00ca      	lsls	r2, r1, #3
 8003c86:	4610      	mov	r0, r2
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	4642      	mov	r2, r8
 8003c8e:	189b      	adds	r3, r3, r2
 8003c90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c94:	464b      	mov	r3, r9
 8003c96:	460a      	mov	r2, r1
 8003c98:	eb42 0303 	adc.w	r3, r2, r3
 8003c9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003caa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003cb8:	4649      	mov	r1, r9
 8003cba:	008b      	lsls	r3, r1, #2
 8003cbc:	4641      	mov	r1, r8
 8003cbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cc2:	4641      	mov	r1, r8
 8003cc4:	008a      	lsls	r2, r1, #2
 8003cc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003cca:	f7fc fad9 	bl	8000280 <__aeabi_uldivmod>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	4b39      	ldr	r3, [pc, #228]	; (8003db8 <UART_SetConfig+0x4e4>)
 8003cd4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cd8:	095b      	lsrs	r3, r3, #5
 8003cda:	2164      	movs	r1, #100	; 0x64
 8003cdc:	fb01 f303 	mul.w	r3, r1, r3
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	3332      	adds	r3, #50	; 0x32
 8003ce6:	4a34      	ldr	r2, [pc, #208]	; (8003db8 <UART_SetConfig+0x4e4>)
 8003ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cec:	095b      	lsrs	r3, r3, #5
 8003cee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cf2:	441c      	add	r4, r3
 8003cf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	673b      	str	r3, [r7, #112]	; 0x70
 8003cfc:	677a      	str	r2, [r7, #116]	; 0x74
 8003cfe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d02:	4642      	mov	r2, r8
 8003d04:	464b      	mov	r3, r9
 8003d06:	1891      	adds	r1, r2, r2
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	415b      	adcs	r3, r3
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d12:	4641      	mov	r1, r8
 8003d14:	1851      	adds	r1, r2, r1
 8003d16:	6039      	str	r1, [r7, #0]
 8003d18:	4649      	mov	r1, r9
 8003d1a:	414b      	adcs	r3, r1
 8003d1c:	607b      	str	r3, [r7, #4]
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	f04f 0300 	mov.w	r3, #0
 8003d26:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d2a:	4659      	mov	r1, fp
 8003d2c:	00cb      	lsls	r3, r1, #3
 8003d2e:	4651      	mov	r1, sl
 8003d30:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d34:	4651      	mov	r1, sl
 8003d36:	00ca      	lsls	r2, r1, #3
 8003d38:	4610      	mov	r0, r2
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	4642      	mov	r2, r8
 8003d40:	189b      	adds	r3, r3, r2
 8003d42:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d44:	464b      	mov	r3, r9
 8003d46:	460a      	mov	r2, r1
 8003d48:	eb42 0303 	adc.w	r3, r2, r3
 8003d4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	663b      	str	r3, [r7, #96]	; 0x60
 8003d58:	667a      	str	r2, [r7, #100]	; 0x64
 8003d5a:	f04f 0200 	mov.w	r2, #0
 8003d5e:	f04f 0300 	mov.w	r3, #0
 8003d62:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d66:	4649      	mov	r1, r9
 8003d68:	008b      	lsls	r3, r1, #2
 8003d6a:	4641      	mov	r1, r8
 8003d6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d70:	4641      	mov	r1, r8
 8003d72:	008a      	lsls	r2, r1, #2
 8003d74:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d78:	f7fc fa82 	bl	8000280 <__aeabi_uldivmod>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4b0d      	ldr	r3, [pc, #52]	; (8003db8 <UART_SetConfig+0x4e4>)
 8003d82:	fba3 1302 	umull	r1, r3, r3, r2
 8003d86:	095b      	lsrs	r3, r3, #5
 8003d88:	2164      	movs	r1, #100	; 0x64
 8003d8a:	fb01 f303 	mul.w	r3, r1, r3
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	3332      	adds	r3, #50	; 0x32
 8003d94:	4a08      	ldr	r2, [pc, #32]	; (8003db8 <UART_SetConfig+0x4e4>)
 8003d96:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9a:	095b      	lsrs	r3, r3, #5
 8003d9c:	f003 020f 	and.w	r2, r3, #15
 8003da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4422      	add	r2, r4
 8003da8:	609a      	str	r2, [r3, #8]
}
 8003daa:	bf00      	nop
 8003dac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003db0:	46bd      	mov	sp, r7
 8003db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003db6:	bf00      	nop
 8003db8:	51eb851f 	.word	0x51eb851f

08003dbc <__errno>:
 8003dbc:	4b01      	ldr	r3, [pc, #4]	; (8003dc4 <__errno+0x8>)
 8003dbe:	6818      	ldr	r0, [r3, #0]
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	2000000c 	.word	0x2000000c

08003dc8 <__libc_init_array>:
 8003dc8:	b570      	push	{r4, r5, r6, lr}
 8003dca:	4d0d      	ldr	r5, [pc, #52]	; (8003e00 <__libc_init_array+0x38>)
 8003dcc:	4c0d      	ldr	r4, [pc, #52]	; (8003e04 <__libc_init_array+0x3c>)
 8003dce:	1b64      	subs	r4, r4, r5
 8003dd0:	10a4      	asrs	r4, r4, #2
 8003dd2:	2600      	movs	r6, #0
 8003dd4:	42a6      	cmp	r6, r4
 8003dd6:	d109      	bne.n	8003dec <__libc_init_array+0x24>
 8003dd8:	4d0b      	ldr	r5, [pc, #44]	; (8003e08 <__libc_init_array+0x40>)
 8003dda:	4c0c      	ldr	r4, [pc, #48]	; (8003e0c <__libc_init_array+0x44>)
 8003ddc:	f001 f824 	bl	8004e28 <_init>
 8003de0:	1b64      	subs	r4, r4, r5
 8003de2:	10a4      	asrs	r4, r4, #2
 8003de4:	2600      	movs	r6, #0
 8003de6:	42a6      	cmp	r6, r4
 8003de8:	d105      	bne.n	8003df6 <__libc_init_array+0x2e>
 8003dea:	bd70      	pop	{r4, r5, r6, pc}
 8003dec:	f855 3b04 	ldr.w	r3, [r5], #4
 8003df0:	4798      	blx	r3
 8003df2:	3601      	adds	r6, #1
 8003df4:	e7ee      	b.n	8003dd4 <__libc_init_array+0xc>
 8003df6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dfa:	4798      	blx	r3
 8003dfc:	3601      	adds	r6, #1
 8003dfe:	e7f2      	b.n	8003de6 <__libc_init_array+0x1e>
 8003e00:	08004ffc 	.word	0x08004ffc
 8003e04:	08004ffc 	.word	0x08004ffc
 8003e08:	08004ffc 	.word	0x08004ffc
 8003e0c:	08005000 	.word	0x08005000

08003e10 <memset>:
 8003e10:	4402      	add	r2, r0
 8003e12:	4603      	mov	r3, r0
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d100      	bne.n	8003e1a <memset+0xa>
 8003e18:	4770      	bx	lr
 8003e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e1e:	e7f9      	b.n	8003e14 <memset+0x4>

08003e20 <iprintf>:
 8003e20:	b40f      	push	{r0, r1, r2, r3}
 8003e22:	4b0a      	ldr	r3, [pc, #40]	; (8003e4c <iprintf+0x2c>)
 8003e24:	b513      	push	{r0, r1, r4, lr}
 8003e26:	681c      	ldr	r4, [r3, #0]
 8003e28:	b124      	cbz	r4, 8003e34 <iprintf+0x14>
 8003e2a:	69a3      	ldr	r3, [r4, #24]
 8003e2c:	b913      	cbnz	r3, 8003e34 <iprintf+0x14>
 8003e2e:	4620      	mov	r0, r4
 8003e30:	f000 fa5e 	bl	80042f0 <__sinit>
 8003e34:	ab05      	add	r3, sp, #20
 8003e36:	9a04      	ldr	r2, [sp, #16]
 8003e38:	68a1      	ldr	r1, [r4, #8]
 8003e3a:	9301      	str	r3, [sp, #4]
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	f000 fc67 	bl	8004710 <_vfiprintf_r>
 8003e42:	b002      	add	sp, #8
 8003e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e48:	b004      	add	sp, #16
 8003e4a:	4770      	bx	lr
 8003e4c:	2000000c 	.word	0x2000000c

08003e50 <_puts_r>:
 8003e50:	b570      	push	{r4, r5, r6, lr}
 8003e52:	460e      	mov	r6, r1
 8003e54:	4605      	mov	r5, r0
 8003e56:	b118      	cbz	r0, 8003e60 <_puts_r+0x10>
 8003e58:	6983      	ldr	r3, [r0, #24]
 8003e5a:	b90b      	cbnz	r3, 8003e60 <_puts_r+0x10>
 8003e5c:	f000 fa48 	bl	80042f0 <__sinit>
 8003e60:	69ab      	ldr	r3, [r5, #24]
 8003e62:	68ac      	ldr	r4, [r5, #8]
 8003e64:	b913      	cbnz	r3, 8003e6c <_puts_r+0x1c>
 8003e66:	4628      	mov	r0, r5
 8003e68:	f000 fa42 	bl	80042f0 <__sinit>
 8003e6c:	4b2c      	ldr	r3, [pc, #176]	; (8003f20 <_puts_r+0xd0>)
 8003e6e:	429c      	cmp	r4, r3
 8003e70:	d120      	bne.n	8003eb4 <_puts_r+0x64>
 8003e72:	686c      	ldr	r4, [r5, #4]
 8003e74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e76:	07db      	lsls	r3, r3, #31
 8003e78:	d405      	bmi.n	8003e86 <_puts_r+0x36>
 8003e7a:	89a3      	ldrh	r3, [r4, #12]
 8003e7c:	0598      	lsls	r0, r3, #22
 8003e7e:	d402      	bmi.n	8003e86 <_puts_r+0x36>
 8003e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e82:	f000 fad3 	bl	800442c <__retarget_lock_acquire_recursive>
 8003e86:	89a3      	ldrh	r3, [r4, #12]
 8003e88:	0719      	lsls	r1, r3, #28
 8003e8a:	d51d      	bpl.n	8003ec8 <_puts_r+0x78>
 8003e8c:	6923      	ldr	r3, [r4, #16]
 8003e8e:	b1db      	cbz	r3, 8003ec8 <_puts_r+0x78>
 8003e90:	3e01      	subs	r6, #1
 8003e92:	68a3      	ldr	r3, [r4, #8]
 8003e94:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	60a3      	str	r3, [r4, #8]
 8003e9c:	bb39      	cbnz	r1, 8003eee <_puts_r+0x9e>
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	da38      	bge.n	8003f14 <_puts_r+0xc4>
 8003ea2:	4622      	mov	r2, r4
 8003ea4:	210a      	movs	r1, #10
 8003ea6:	4628      	mov	r0, r5
 8003ea8:	f000 f848 	bl	8003f3c <__swbuf_r>
 8003eac:	3001      	adds	r0, #1
 8003eae:	d011      	beq.n	8003ed4 <_puts_r+0x84>
 8003eb0:	250a      	movs	r5, #10
 8003eb2:	e011      	b.n	8003ed8 <_puts_r+0x88>
 8003eb4:	4b1b      	ldr	r3, [pc, #108]	; (8003f24 <_puts_r+0xd4>)
 8003eb6:	429c      	cmp	r4, r3
 8003eb8:	d101      	bne.n	8003ebe <_puts_r+0x6e>
 8003eba:	68ac      	ldr	r4, [r5, #8]
 8003ebc:	e7da      	b.n	8003e74 <_puts_r+0x24>
 8003ebe:	4b1a      	ldr	r3, [pc, #104]	; (8003f28 <_puts_r+0xd8>)
 8003ec0:	429c      	cmp	r4, r3
 8003ec2:	bf08      	it	eq
 8003ec4:	68ec      	ldreq	r4, [r5, #12]
 8003ec6:	e7d5      	b.n	8003e74 <_puts_r+0x24>
 8003ec8:	4621      	mov	r1, r4
 8003eca:	4628      	mov	r0, r5
 8003ecc:	f000 f888 	bl	8003fe0 <__swsetup_r>
 8003ed0:	2800      	cmp	r0, #0
 8003ed2:	d0dd      	beq.n	8003e90 <_puts_r+0x40>
 8003ed4:	f04f 35ff 	mov.w	r5, #4294967295
 8003ed8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003eda:	07da      	lsls	r2, r3, #31
 8003edc:	d405      	bmi.n	8003eea <_puts_r+0x9a>
 8003ede:	89a3      	ldrh	r3, [r4, #12]
 8003ee0:	059b      	lsls	r3, r3, #22
 8003ee2:	d402      	bmi.n	8003eea <_puts_r+0x9a>
 8003ee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ee6:	f000 faa2 	bl	800442e <__retarget_lock_release_recursive>
 8003eea:	4628      	mov	r0, r5
 8003eec:	bd70      	pop	{r4, r5, r6, pc}
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	da04      	bge.n	8003efc <_puts_r+0xac>
 8003ef2:	69a2      	ldr	r2, [r4, #24]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	dc06      	bgt.n	8003f06 <_puts_r+0xb6>
 8003ef8:	290a      	cmp	r1, #10
 8003efa:	d004      	beq.n	8003f06 <_puts_r+0xb6>
 8003efc:	6823      	ldr	r3, [r4, #0]
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	6022      	str	r2, [r4, #0]
 8003f02:	7019      	strb	r1, [r3, #0]
 8003f04:	e7c5      	b.n	8003e92 <_puts_r+0x42>
 8003f06:	4622      	mov	r2, r4
 8003f08:	4628      	mov	r0, r5
 8003f0a:	f000 f817 	bl	8003f3c <__swbuf_r>
 8003f0e:	3001      	adds	r0, #1
 8003f10:	d1bf      	bne.n	8003e92 <_puts_r+0x42>
 8003f12:	e7df      	b.n	8003ed4 <_puts_r+0x84>
 8003f14:	6823      	ldr	r3, [r4, #0]
 8003f16:	250a      	movs	r5, #10
 8003f18:	1c5a      	adds	r2, r3, #1
 8003f1a:	6022      	str	r2, [r4, #0]
 8003f1c:	701d      	strb	r5, [r3, #0]
 8003f1e:	e7db      	b.n	8003ed8 <_puts_r+0x88>
 8003f20:	08004f80 	.word	0x08004f80
 8003f24:	08004fa0 	.word	0x08004fa0
 8003f28:	08004f60 	.word	0x08004f60

08003f2c <puts>:
 8003f2c:	4b02      	ldr	r3, [pc, #8]	; (8003f38 <puts+0xc>)
 8003f2e:	4601      	mov	r1, r0
 8003f30:	6818      	ldr	r0, [r3, #0]
 8003f32:	f7ff bf8d 	b.w	8003e50 <_puts_r>
 8003f36:	bf00      	nop
 8003f38:	2000000c 	.word	0x2000000c

08003f3c <__swbuf_r>:
 8003f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f3e:	460e      	mov	r6, r1
 8003f40:	4614      	mov	r4, r2
 8003f42:	4605      	mov	r5, r0
 8003f44:	b118      	cbz	r0, 8003f4e <__swbuf_r+0x12>
 8003f46:	6983      	ldr	r3, [r0, #24]
 8003f48:	b90b      	cbnz	r3, 8003f4e <__swbuf_r+0x12>
 8003f4a:	f000 f9d1 	bl	80042f0 <__sinit>
 8003f4e:	4b21      	ldr	r3, [pc, #132]	; (8003fd4 <__swbuf_r+0x98>)
 8003f50:	429c      	cmp	r4, r3
 8003f52:	d12b      	bne.n	8003fac <__swbuf_r+0x70>
 8003f54:	686c      	ldr	r4, [r5, #4]
 8003f56:	69a3      	ldr	r3, [r4, #24]
 8003f58:	60a3      	str	r3, [r4, #8]
 8003f5a:	89a3      	ldrh	r3, [r4, #12]
 8003f5c:	071a      	lsls	r2, r3, #28
 8003f5e:	d52f      	bpl.n	8003fc0 <__swbuf_r+0x84>
 8003f60:	6923      	ldr	r3, [r4, #16]
 8003f62:	b36b      	cbz	r3, 8003fc0 <__swbuf_r+0x84>
 8003f64:	6923      	ldr	r3, [r4, #16]
 8003f66:	6820      	ldr	r0, [r4, #0]
 8003f68:	1ac0      	subs	r0, r0, r3
 8003f6a:	6963      	ldr	r3, [r4, #20]
 8003f6c:	b2f6      	uxtb	r6, r6
 8003f6e:	4283      	cmp	r3, r0
 8003f70:	4637      	mov	r7, r6
 8003f72:	dc04      	bgt.n	8003f7e <__swbuf_r+0x42>
 8003f74:	4621      	mov	r1, r4
 8003f76:	4628      	mov	r0, r5
 8003f78:	f000 f926 	bl	80041c8 <_fflush_r>
 8003f7c:	bb30      	cbnz	r0, 8003fcc <__swbuf_r+0x90>
 8003f7e:	68a3      	ldr	r3, [r4, #8]
 8003f80:	3b01      	subs	r3, #1
 8003f82:	60a3      	str	r3, [r4, #8]
 8003f84:	6823      	ldr	r3, [r4, #0]
 8003f86:	1c5a      	adds	r2, r3, #1
 8003f88:	6022      	str	r2, [r4, #0]
 8003f8a:	701e      	strb	r6, [r3, #0]
 8003f8c:	6963      	ldr	r3, [r4, #20]
 8003f8e:	3001      	adds	r0, #1
 8003f90:	4283      	cmp	r3, r0
 8003f92:	d004      	beq.n	8003f9e <__swbuf_r+0x62>
 8003f94:	89a3      	ldrh	r3, [r4, #12]
 8003f96:	07db      	lsls	r3, r3, #31
 8003f98:	d506      	bpl.n	8003fa8 <__swbuf_r+0x6c>
 8003f9a:	2e0a      	cmp	r6, #10
 8003f9c:	d104      	bne.n	8003fa8 <__swbuf_r+0x6c>
 8003f9e:	4621      	mov	r1, r4
 8003fa0:	4628      	mov	r0, r5
 8003fa2:	f000 f911 	bl	80041c8 <_fflush_r>
 8003fa6:	b988      	cbnz	r0, 8003fcc <__swbuf_r+0x90>
 8003fa8:	4638      	mov	r0, r7
 8003faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fac:	4b0a      	ldr	r3, [pc, #40]	; (8003fd8 <__swbuf_r+0x9c>)
 8003fae:	429c      	cmp	r4, r3
 8003fb0:	d101      	bne.n	8003fb6 <__swbuf_r+0x7a>
 8003fb2:	68ac      	ldr	r4, [r5, #8]
 8003fb4:	e7cf      	b.n	8003f56 <__swbuf_r+0x1a>
 8003fb6:	4b09      	ldr	r3, [pc, #36]	; (8003fdc <__swbuf_r+0xa0>)
 8003fb8:	429c      	cmp	r4, r3
 8003fba:	bf08      	it	eq
 8003fbc:	68ec      	ldreq	r4, [r5, #12]
 8003fbe:	e7ca      	b.n	8003f56 <__swbuf_r+0x1a>
 8003fc0:	4621      	mov	r1, r4
 8003fc2:	4628      	mov	r0, r5
 8003fc4:	f000 f80c 	bl	8003fe0 <__swsetup_r>
 8003fc8:	2800      	cmp	r0, #0
 8003fca:	d0cb      	beq.n	8003f64 <__swbuf_r+0x28>
 8003fcc:	f04f 37ff 	mov.w	r7, #4294967295
 8003fd0:	e7ea      	b.n	8003fa8 <__swbuf_r+0x6c>
 8003fd2:	bf00      	nop
 8003fd4:	08004f80 	.word	0x08004f80
 8003fd8:	08004fa0 	.word	0x08004fa0
 8003fdc:	08004f60 	.word	0x08004f60

08003fe0 <__swsetup_r>:
 8003fe0:	4b32      	ldr	r3, [pc, #200]	; (80040ac <__swsetup_r+0xcc>)
 8003fe2:	b570      	push	{r4, r5, r6, lr}
 8003fe4:	681d      	ldr	r5, [r3, #0]
 8003fe6:	4606      	mov	r6, r0
 8003fe8:	460c      	mov	r4, r1
 8003fea:	b125      	cbz	r5, 8003ff6 <__swsetup_r+0x16>
 8003fec:	69ab      	ldr	r3, [r5, #24]
 8003fee:	b913      	cbnz	r3, 8003ff6 <__swsetup_r+0x16>
 8003ff0:	4628      	mov	r0, r5
 8003ff2:	f000 f97d 	bl	80042f0 <__sinit>
 8003ff6:	4b2e      	ldr	r3, [pc, #184]	; (80040b0 <__swsetup_r+0xd0>)
 8003ff8:	429c      	cmp	r4, r3
 8003ffa:	d10f      	bne.n	800401c <__swsetup_r+0x3c>
 8003ffc:	686c      	ldr	r4, [r5, #4]
 8003ffe:	89a3      	ldrh	r3, [r4, #12]
 8004000:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004004:	0719      	lsls	r1, r3, #28
 8004006:	d42c      	bmi.n	8004062 <__swsetup_r+0x82>
 8004008:	06dd      	lsls	r5, r3, #27
 800400a:	d411      	bmi.n	8004030 <__swsetup_r+0x50>
 800400c:	2309      	movs	r3, #9
 800400e:	6033      	str	r3, [r6, #0]
 8004010:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004014:	81a3      	strh	r3, [r4, #12]
 8004016:	f04f 30ff 	mov.w	r0, #4294967295
 800401a:	e03e      	b.n	800409a <__swsetup_r+0xba>
 800401c:	4b25      	ldr	r3, [pc, #148]	; (80040b4 <__swsetup_r+0xd4>)
 800401e:	429c      	cmp	r4, r3
 8004020:	d101      	bne.n	8004026 <__swsetup_r+0x46>
 8004022:	68ac      	ldr	r4, [r5, #8]
 8004024:	e7eb      	b.n	8003ffe <__swsetup_r+0x1e>
 8004026:	4b24      	ldr	r3, [pc, #144]	; (80040b8 <__swsetup_r+0xd8>)
 8004028:	429c      	cmp	r4, r3
 800402a:	bf08      	it	eq
 800402c:	68ec      	ldreq	r4, [r5, #12]
 800402e:	e7e6      	b.n	8003ffe <__swsetup_r+0x1e>
 8004030:	0758      	lsls	r0, r3, #29
 8004032:	d512      	bpl.n	800405a <__swsetup_r+0x7a>
 8004034:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004036:	b141      	cbz	r1, 800404a <__swsetup_r+0x6a>
 8004038:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800403c:	4299      	cmp	r1, r3
 800403e:	d002      	beq.n	8004046 <__swsetup_r+0x66>
 8004040:	4630      	mov	r0, r6
 8004042:	f000 fa5b 	bl	80044fc <_free_r>
 8004046:	2300      	movs	r3, #0
 8004048:	6363      	str	r3, [r4, #52]	; 0x34
 800404a:	89a3      	ldrh	r3, [r4, #12]
 800404c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004050:	81a3      	strh	r3, [r4, #12]
 8004052:	2300      	movs	r3, #0
 8004054:	6063      	str	r3, [r4, #4]
 8004056:	6923      	ldr	r3, [r4, #16]
 8004058:	6023      	str	r3, [r4, #0]
 800405a:	89a3      	ldrh	r3, [r4, #12]
 800405c:	f043 0308 	orr.w	r3, r3, #8
 8004060:	81a3      	strh	r3, [r4, #12]
 8004062:	6923      	ldr	r3, [r4, #16]
 8004064:	b94b      	cbnz	r3, 800407a <__swsetup_r+0x9a>
 8004066:	89a3      	ldrh	r3, [r4, #12]
 8004068:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800406c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004070:	d003      	beq.n	800407a <__swsetup_r+0x9a>
 8004072:	4621      	mov	r1, r4
 8004074:	4630      	mov	r0, r6
 8004076:	f000 fa01 	bl	800447c <__smakebuf_r>
 800407a:	89a0      	ldrh	r0, [r4, #12]
 800407c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004080:	f010 0301 	ands.w	r3, r0, #1
 8004084:	d00a      	beq.n	800409c <__swsetup_r+0xbc>
 8004086:	2300      	movs	r3, #0
 8004088:	60a3      	str	r3, [r4, #8]
 800408a:	6963      	ldr	r3, [r4, #20]
 800408c:	425b      	negs	r3, r3
 800408e:	61a3      	str	r3, [r4, #24]
 8004090:	6923      	ldr	r3, [r4, #16]
 8004092:	b943      	cbnz	r3, 80040a6 <__swsetup_r+0xc6>
 8004094:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004098:	d1ba      	bne.n	8004010 <__swsetup_r+0x30>
 800409a:	bd70      	pop	{r4, r5, r6, pc}
 800409c:	0781      	lsls	r1, r0, #30
 800409e:	bf58      	it	pl
 80040a0:	6963      	ldrpl	r3, [r4, #20]
 80040a2:	60a3      	str	r3, [r4, #8]
 80040a4:	e7f4      	b.n	8004090 <__swsetup_r+0xb0>
 80040a6:	2000      	movs	r0, #0
 80040a8:	e7f7      	b.n	800409a <__swsetup_r+0xba>
 80040aa:	bf00      	nop
 80040ac:	2000000c 	.word	0x2000000c
 80040b0:	08004f80 	.word	0x08004f80
 80040b4:	08004fa0 	.word	0x08004fa0
 80040b8:	08004f60 	.word	0x08004f60

080040bc <__sflush_r>:
 80040bc:	898a      	ldrh	r2, [r1, #12]
 80040be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040c2:	4605      	mov	r5, r0
 80040c4:	0710      	lsls	r0, r2, #28
 80040c6:	460c      	mov	r4, r1
 80040c8:	d458      	bmi.n	800417c <__sflush_r+0xc0>
 80040ca:	684b      	ldr	r3, [r1, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	dc05      	bgt.n	80040dc <__sflush_r+0x20>
 80040d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	dc02      	bgt.n	80040dc <__sflush_r+0x20>
 80040d6:	2000      	movs	r0, #0
 80040d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040de:	2e00      	cmp	r6, #0
 80040e0:	d0f9      	beq.n	80040d6 <__sflush_r+0x1a>
 80040e2:	2300      	movs	r3, #0
 80040e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80040e8:	682f      	ldr	r7, [r5, #0]
 80040ea:	602b      	str	r3, [r5, #0]
 80040ec:	d032      	beq.n	8004154 <__sflush_r+0x98>
 80040ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80040f0:	89a3      	ldrh	r3, [r4, #12]
 80040f2:	075a      	lsls	r2, r3, #29
 80040f4:	d505      	bpl.n	8004102 <__sflush_r+0x46>
 80040f6:	6863      	ldr	r3, [r4, #4]
 80040f8:	1ac0      	subs	r0, r0, r3
 80040fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80040fc:	b10b      	cbz	r3, 8004102 <__sflush_r+0x46>
 80040fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004100:	1ac0      	subs	r0, r0, r3
 8004102:	2300      	movs	r3, #0
 8004104:	4602      	mov	r2, r0
 8004106:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004108:	6a21      	ldr	r1, [r4, #32]
 800410a:	4628      	mov	r0, r5
 800410c:	47b0      	blx	r6
 800410e:	1c43      	adds	r3, r0, #1
 8004110:	89a3      	ldrh	r3, [r4, #12]
 8004112:	d106      	bne.n	8004122 <__sflush_r+0x66>
 8004114:	6829      	ldr	r1, [r5, #0]
 8004116:	291d      	cmp	r1, #29
 8004118:	d82c      	bhi.n	8004174 <__sflush_r+0xb8>
 800411a:	4a2a      	ldr	r2, [pc, #168]	; (80041c4 <__sflush_r+0x108>)
 800411c:	40ca      	lsrs	r2, r1
 800411e:	07d6      	lsls	r6, r2, #31
 8004120:	d528      	bpl.n	8004174 <__sflush_r+0xb8>
 8004122:	2200      	movs	r2, #0
 8004124:	6062      	str	r2, [r4, #4]
 8004126:	04d9      	lsls	r1, r3, #19
 8004128:	6922      	ldr	r2, [r4, #16]
 800412a:	6022      	str	r2, [r4, #0]
 800412c:	d504      	bpl.n	8004138 <__sflush_r+0x7c>
 800412e:	1c42      	adds	r2, r0, #1
 8004130:	d101      	bne.n	8004136 <__sflush_r+0x7a>
 8004132:	682b      	ldr	r3, [r5, #0]
 8004134:	b903      	cbnz	r3, 8004138 <__sflush_r+0x7c>
 8004136:	6560      	str	r0, [r4, #84]	; 0x54
 8004138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800413a:	602f      	str	r7, [r5, #0]
 800413c:	2900      	cmp	r1, #0
 800413e:	d0ca      	beq.n	80040d6 <__sflush_r+0x1a>
 8004140:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004144:	4299      	cmp	r1, r3
 8004146:	d002      	beq.n	800414e <__sflush_r+0x92>
 8004148:	4628      	mov	r0, r5
 800414a:	f000 f9d7 	bl	80044fc <_free_r>
 800414e:	2000      	movs	r0, #0
 8004150:	6360      	str	r0, [r4, #52]	; 0x34
 8004152:	e7c1      	b.n	80040d8 <__sflush_r+0x1c>
 8004154:	6a21      	ldr	r1, [r4, #32]
 8004156:	2301      	movs	r3, #1
 8004158:	4628      	mov	r0, r5
 800415a:	47b0      	blx	r6
 800415c:	1c41      	adds	r1, r0, #1
 800415e:	d1c7      	bne.n	80040f0 <__sflush_r+0x34>
 8004160:	682b      	ldr	r3, [r5, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d0c4      	beq.n	80040f0 <__sflush_r+0x34>
 8004166:	2b1d      	cmp	r3, #29
 8004168:	d001      	beq.n	800416e <__sflush_r+0xb2>
 800416a:	2b16      	cmp	r3, #22
 800416c:	d101      	bne.n	8004172 <__sflush_r+0xb6>
 800416e:	602f      	str	r7, [r5, #0]
 8004170:	e7b1      	b.n	80040d6 <__sflush_r+0x1a>
 8004172:	89a3      	ldrh	r3, [r4, #12]
 8004174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004178:	81a3      	strh	r3, [r4, #12]
 800417a:	e7ad      	b.n	80040d8 <__sflush_r+0x1c>
 800417c:	690f      	ldr	r7, [r1, #16]
 800417e:	2f00      	cmp	r7, #0
 8004180:	d0a9      	beq.n	80040d6 <__sflush_r+0x1a>
 8004182:	0793      	lsls	r3, r2, #30
 8004184:	680e      	ldr	r6, [r1, #0]
 8004186:	bf08      	it	eq
 8004188:	694b      	ldreq	r3, [r1, #20]
 800418a:	600f      	str	r7, [r1, #0]
 800418c:	bf18      	it	ne
 800418e:	2300      	movne	r3, #0
 8004190:	eba6 0807 	sub.w	r8, r6, r7
 8004194:	608b      	str	r3, [r1, #8]
 8004196:	f1b8 0f00 	cmp.w	r8, #0
 800419a:	dd9c      	ble.n	80040d6 <__sflush_r+0x1a>
 800419c:	6a21      	ldr	r1, [r4, #32]
 800419e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80041a0:	4643      	mov	r3, r8
 80041a2:	463a      	mov	r2, r7
 80041a4:	4628      	mov	r0, r5
 80041a6:	47b0      	blx	r6
 80041a8:	2800      	cmp	r0, #0
 80041aa:	dc06      	bgt.n	80041ba <__sflush_r+0xfe>
 80041ac:	89a3      	ldrh	r3, [r4, #12]
 80041ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041b2:	81a3      	strh	r3, [r4, #12]
 80041b4:	f04f 30ff 	mov.w	r0, #4294967295
 80041b8:	e78e      	b.n	80040d8 <__sflush_r+0x1c>
 80041ba:	4407      	add	r7, r0
 80041bc:	eba8 0800 	sub.w	r8, r8, r0
 80041c0:	e7e9      	b.n	8004196 <__sflush_r+0xda>
 80041c2:	bf00      	nop
 80041c4:	20400001 	.word	0x20400001

080041c8 <_fflush_r>:
 80041c8:	b538      	push	{r3, r4, r5, lr}
 80041ca:	690b      	ldr	r3, [r1, #16]
 80041cc:	4605      	mov	r5, r0
 80041ce:	460c      	mov	r4, r1
 80041d0:	b913      	cbnz	r3, 80041d8 <_fflush_r+0x10>
 80041d2:	2500      	movs	r5, #0
 80041d4:	4628      	mov	r0, r5
 80041d6:	bd38      	pop	{r3, r4, r5, pc}
 80041d8:	b118      	cbz	r0, 80041e2 <_fflush_r+0x1a>
 80041da:	6983      	ldr	r3, [r0, #24]
 80041dc:	b90b      	cbnz	r3, 80041e2 <_fflush_r+0x1a>
 80041de:	f000 f887 	bl	80042f0 <__sinit>
 80041e2:	4b14      	ldr	r3, [pc, #80]	; (8004234 <_fflush_r+0x6c>)
 80041e4:	429c      	cmp	r4, r3
 80041e6:	d11b      	bne.n	8004220 <_fflush_r+0x58>
 80041e8:	686c      	ldr	r4, [r5, #4]
 80041ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0ef      	beq.n	80041d2 <_fflush_r+0xa>
 80041f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80041f4:	07d0      	lsls	r0, r2, #31
 80041f6:	d404      	bmi.n	8004202 <_fflush_r+0x3a>
 80041f8:	0599      	lsls	r1, r3, #22
 80041fa:	d402      	bmi.n	8004202 <_fflush_r+0x3a>
 80041fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041fe:	f000 f915 	bl	800442c <__retarget_lock_acquire_recursive>
 8004202:	4628      	mov	r0, r5
 8004204:	4621      	mov	r1, r4
 8004206:	f7ff ff59 	bl	80040bc <__sflush_r>
 800420a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800420c:	07da      	lsls	r2, r3, #31
 800420e:	4605      	mov	r5, r0
 8004210:	d4e0      	bmi.n	80041d4 <_fflush_r+0xc>
 8004212:	89a3      	ldrh	r3, [r4, #12]
 8004214:	059b      	lsls	r3, r3, #22
 8004216:	d4dd      	bmi.n	80041d4 <_fflush_r+0xc>
 8004218:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800421a:	f000 f908 	bl	800442e <__retarget_lock_release_recursive>
 800421e:	e7d9      	b.n	80041d4 <_fflush_r+0xc>
 8004220:	4b05      	ldr	r3, [pc, #20]	; (8004238 <_fflush_r+0x70>)
 8004222:	429c      	cmp	r4, r3
 8004224:	d101      	bne.n	800422a <_fflush_r+0x62>
 8004226:	68ac      	ldr	r4, [r5, #8]
 8004228:	e7df      	b.n	80041ea <_fflush_r+0x22>
 800422a:	4b04      	ldr	r3, [pc, #16]	; (800423c <_fflush_r+0x74>)
 800422c:	429c      	cmp	r4, r3
 800422e:	bf08      	it	eq
 8004230:	68ec      	ldreq	r4, [r5, #12]
 8004232:	e7da      	b.n	80041ea <_fflush_r+0x22>
 8004234:	08004f80 	.word	0x08004f80
 8004238:	08004fa0 	.word	0x08004fa0
 800423c:	08004f60 	.word	0x08004f60

08004240 <std>:
 8004240:	2300      	movs	r3, #0
 8004242:	b510      	push	{r4, lr}
 8004244:	4604      	mov	r4, r0
 8004246:	e9c0 3300 	strd	r3, r3, [r0]
 800424a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800424e:	6083      	str	r3, [r0, #8]
 8004250:	8181      	strh	r1, [r0, #12]
 8004252:	6643      	str	r3, [r0, #100]	; 0x64
 8004254:	81c2      	strh	r2, [r0, #14]
 8004256:	6183      	str	r3, [r0, #24]
 8004258:	4619      	mov	r1, r3
 800425a:	2208      	movs	r2, #8
 800425c:	305c      	adds	r0, #92	; 0x5c
 800425e:	f7ff fdd7 	bl	8003e10 <memset>
 8004262:	4b05      	ldr	r3, [pc, #20]	; (8004278 <std+0x38>)
 8004264:	6263      	str	r3, [r4, #36]	; 0x24
 8004266:	4b05      	ldr	r3, [pc, #20]	; (800427c <std+0x3c>)
 8004268:	62a3      	str	r3, [r4, #40]	; 0x28
 800426a:	4b05      	ldr	r3, [pc, #20]	; (8004280 <std+0x40>)
 800426c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800426e:	4b05      	ldr	r3, [pc, #20]	; (8004284 <std+0x44>)
 8004270:	6224      	str	r4, [r4, #32]
 8004272:	6323      	str	r3, [r4, #48]	; 0x30
 8004274:	bd10      	pop	{r4, pc}
 8004276:	bf00      	nop
 8004278:	08004cb9 	.word	0x08004cb9
 800427c:	08004cdb 	.word	0x08004cdb
 8004280:	08004d13 	.word	0x08004d13
 8004284:	08004d37 	.word	0x08004d37

08004288 <_cleanup_r>:
 8004288:	4901      	ldr	r1, [pc, #4]	; (8004290 <_cleanup_r+0x8>)
 800428a:	f000 b8af 	b.w	80043ec <_fwalk_reent>
 800428e:	bf00      	nop
 8004290:	080041c9 	.word	0x080041c9

08004294 <__sfmoreglue>:
 8004294:	b570      	push	{r4, r5, r6, lr}
 8004296:	2268      	movs	r2, #104	; 0x68
 8004298:	1e4d      	subs	r5, r1, #1
 800429a:	4355      	muls	r5, r2
 800429c:	460e      	mov	r6, r1
 800429e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80042a2:	f000 f997 	bl	80045d4 <_malloc_r>
 80042a6:	4604      	mov	r4, r0
 80042a8:	b140      	cbz	r0, 80042bc <__sfmoreglue+0x28>
 80042aa:	2100      	movs	r1, #0
 80042ac:	e9c0 1600 	strd	r1, r6, [r0]
 80042b0:	300c      	adds	r0, #12
 80042b2:	60a0      	str	r0, [r4, #8]
 80042b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80042b8:	f7ff fdaa 	bl	8003e10 <memset>
 80042bc:	4620      	mov	r0, r4
 80042be:	bd70      	pop	{r4, r5, r6, pc}

080042c0 <__sfp_lock_acquire>:
 80042c0:	4801      	ldr	r0, [pc, #4]	; (80042c8 <__sfp_lock_acquire+0x8>)
 80042c2:	f000 b8b3 	b.w	800442c <__retarget_lock_acquire_recursive>
 80042c6:	bf00      	nop
 80042c8:	20000155 	.word	0x20000155

080042cc <__sfp_lock_release>:
 80042cc:	4801      	ldr	r0, [pc, #4]	; (80042d4 <__sfp_lock_release+0x8>)
 80042ce:	f000 b8ae 	b.w	800442e <__retarget_lock_release_recursive>
 80042d2:	bf00      	nop
 80042d4:	20000155 	.word	0x20000155

080042d8 <__sinit_lock_acquire>:
 80042d8:	4801      	ldr	r0, [pc, #4]	; (80042e0 <__sinit_lock_acquire+0x8>)
 80042da:	f000 b8a7 	b.w	800442c <__retarget_lock_acquire_recursive>
 80042de:	bf00      	nop
 80042e0:	20000156 	.word	0x20000156

080042e4 <__sinit_lock_release>:
 80042e4:	4801      	ldr	r0, [pc, #4]	; (80042ec <__sinit_lock_release+0x8>)
 80042e6:	f000 b8a2 	b.w	800442e <__retarget_lock_release_recursive>
 80042ea:	bf00      	nop
 80042ec:	20000156 	.word	0x20000156

080042f0 <__sinit>:
 80042f0:	b510      	push	{r4, lr}
 80042f2:	4604      	mov	r4, r0
 80042f4:	f7ff fff0 	bl	80042d8 <__sinit_lock_acquire>
 80042f8:	69a3      	ldr	r3, [r4, #24]
 80042fa:	b11b      	cbz	r3, 8004304 <__sinit+0x14>
 80042fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004300:	f7ff bff0 	b.w	80042e4 <__sinit_lock_release>
 8004304:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004308:	6523      	str	r3, [r4, #80]	; 0x50
 800430a:	4b13      	ldr	r3, [pc, #76]	; (8004358 <__sinit+0x68>)
 800430c:	4a13      	ldr	r2, [pc, #76]	; (800435c <__sinit+0x6c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	62a2      	str	r2, [r4, #40]	; 0x28
 8004312:	42a3      	cmp	r3, r4
 8004314:	bf04      	itt	eq
 8004316:	2301      	moveq	r3, #1
 8004318:	61a3      	streq	r3, [r4, #24]
 800431a:	4620      	mov	r0, r4
 800431c:	f000 f820 	bl	8004360 <__sfp>
 8004320:	6060      	str	r0, [r4, #4]
 8004322:	4620      	mov	r0, r4
 8004324:	f000 f81c 	bl	8004360 <__sfp>
 8004328:	60a0      	str	r0, [r4, #8]
 800432a:	4620      	mov	r0, r4
 800432c:	f000 f818 	bl	8004360 <__sfp>
 8004330:	2200      	movs	r2, #0
 8004332:	60e0      	str	r0, [r4, #12]
 8004334:	2104      	movs	r1, #4
 8004336:	6860      	ldr	r0, [r4, #4]
 8004338:	f7ff ff82 	bl	8004240 <std>
 800433c:	68a0      	ldr	r0, [r4, #8]
 800433e:	2201      	movs	r2, #1
 8004340:	2109      	movs	r1, #9
 8004342:	f7ff ff7d 	bl	8004240 <std>
 8004346:	68e0      	ldr	r0, [r4, #12]
 8004348:	2202      	movs	r2, #2
 800434a:	2112      	movs	r1, #18
 800434c:	f7ff ff78 	bl	8004240 <std>
 8004350:	2301      	movs	r3, #1
 8004352:	61a3      	str	r3, [r4, #24]
 8004354:	e7d2      	b.n	80042fc <__sinit+0xc>
 8004356:	bf00      	nop
 8004358:	08004f5c 	.word	0x08004f5c
 800435c:	08004289 	.word	0x08004289

08004360 <__sfp>:
 8004360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004362:	4607      	mov	r7, r0
 8004364:	f7ff ffac 	bl	80042c0 <__sfp_lock_acquire>
 8004368:	4b1e      	ldr	r3, [pc, #120]	; (80043e4 <__sfp+0x84>)
 800436a:	681e      	ldr	r6, [r3, #0]
 800436c:	69b3      	ldr	r3, [r6, #24]
 800436e:	b913      	cbnz	r3, 8004376 <__sfp+0x16>
 8004370:	4630      	mov	r0, r6
 8004372:	f7ff ffbd 	bl	80042f0 <__sinit>
 8004376:	3648      	adds	r6, #72	; 0x48
 8004378:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800437c:	3b01      	subs	r3, #1
 800437e:	d503      	bpl.n	8004388 <__sfp+0x28>
 8004380:	6833      	ldr	r3, [r6, #0]
 8004382:	b30b      	cbz	r3, 80043c8 <__sfp+0x68>
 8004384:	6836      	ldr	r6, [r6, #0]
 8004386:	e7f7      	b.n	8004378 <__sfp+0x18>
 8004388:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800438c:	b9d5      	cbnz	r5, 80043c4 <__sfp+0x64>
 800438e:	4b16      	ldr	r3, [pc, #88]	; (80043e8 <__sfp+0x88>)
 8004390:	60e3      	str	r3, [r4, #12]
 8004392:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004396:	6665      	str	r5, [r4, #100]	; 0x64
 8004398:	f000 f847 	bl	800442a <__retarget_lock_init_recursive>
 800439c:	f7ff ff96 	bl	80042cc <__sfp_lock_release>
 80043a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80043a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80043a8:	6025      	str	r5, [r4, #0]
 80043aa:	61a5      	str	r5, [r4, #24]
 80043ac:	2208      	movs	r2, #8
 80043ae:	4629      	mov	r1, r5
 80043b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80043b4:	f7ff fd2c 	bl	8003e10 <memset>
 80043b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80043bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80043c0:	4620      	mov	r0, r4
 80043c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043c4:	3468      	adds	r4, #104	; 0x68
 80043c6:	e7d9      	b.n	800437c <__sfp+0x1c>
 80043c8:	2104      	movs	r1, #4
 80043ca:	4638      	mov	r0, r7
 80043cc:	f7ff ff62 	bl	8004294 <__sfmoreglue>
 80043d0:	4604      	mov	r4, r0
 80043d2:	6030      	str	r0, [r6, #0]
 80043d4:	2800      	cmp	r0, #0
 80043d6:	d1d5      	bne.n	8004384 <__sfp+0x24>
 80043d8:	f7ff ff78 	bl	80042cc <__sfp_lock_release>
 80043dc:	230c      	movs	r3, #12
 80043de:	603b      	str	r3, [r7, #0]
 80043e0:	e7ee      	b.n	80043c0 <__sfp+0x60>
 80043e2:	bf00      	nop
 80043e4:	08004f5c 	.word	0x08004f5c
 80043e8:	ffff0001 	.word	0xffff0001

080043ec <_fwalk_reent>:
 80043ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043f0:	4606      	mov	r6, r0
 80043f2:	4688      	mov	r8, r1
 80043f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80043f8:	2700      	movs	r7, #0
 80043fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80043fe:	f1b9 0901 	subs.w	r9, r9, #1
 8004402:	d505      	bpl.n	8004410 <_fwalk_reent+0x24>
 8004404:	6824      	ldr	r4, [r4, #0]
 8004406:	2c00      	cmp	r4, #0
 8004408:	d1f7      	bne.n	80043fa <_fwalk_reent+0xe>
 800440a:	4638      	mov	r0, r7
 800440c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004410:	89ab      	ldrh	r3, [r5, #12]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d907      	bls.n	8004426 <_fwalk_reent+0x3a>
 8004416:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800441a:	3301      	adds	r3, #1
 800441c:	d003      	beq.n	8004426 <_fwalk_reent+0x3a>
 800441e:	4629      	mov	r1, r5
 8004420:	4630      	mov	r0, r6
 8004422:	47c0      	blx	r8
 8004424:	4307      	orrs	r7, r0
 8004426:	3568      	adds	r5, #104	; 0x68
 8004428:	e7e9      	b.n	80043fe <_fwalk_reent+0x12>

0800442a <__retarget_lock_init_recursive>:
 800442a:	4770      	bx	lr

0800442c <__retarget_lock_acquire_recursive>:
 800442c:	4770      	bx	lr

0800442e <__retarget_lock_release_recursive>:
 800442e:	4770      	bx	lr

08004430 <__swhatbuf_r>:
 8004430:	b570      	push	{r4, r5, r6, lr}
 8004432:	460e      	mov	r6, r1
 8004434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004438:	2900      	cmp	r1, #0
 800443a:	b096      	sub	sp, #88	; 0x58
 800443c:	4614      	mov	r4, r2
 800443e:	461d      	mov	r5, r3
 8004440:	da08      	bge.n	8004454 <__swhatbuf_r+0x24>
 8004442:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	602a      	str	r2, [r5, #0]
 800444a:	061a      	lsls	r2, r3, #24
 800444c:	d410      	bmi.n	8004470 <__swhatbuf_r+0x40>
 800444e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004452:	e00e      	b.n	8004472 <__swhatbuf_r+0x42>
 8004454:	466a      	mov	r2, sp
 8004456:	f000 fc95 	bl	8004d84 <_fstat_r>
 800445a:	2800      	cmp	r0, #0
 800445c:	dbf1      	blt.n	8004442 <__swhatbuf_r+0x12>
 800445e:	9a01      	ldr	r2, [sp, #4]
 8004460:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004464:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004468:	425a      	negs	r2, r3
 800446a:	415a      	adcs	r2, r3
 800446c:	602a      	str	r2, [r5, #0]
 800446e:	e7ee      	b.n	800444e <__swhatbuf_r+0x1e>
 8004470:	2340      	movs	r3, #64	; 0x40
 8004472:	2000      	movs	r0, #0
 8004474:	6023      	str	r3, [r4, #0]
 8004476:	b016      	add	sp, #88	; 0x58
 8004478:	bd70      	pop	{r4, r5, r6, pc}
	...

0800447c <__smakebuf_r>:
 800447c:	898b      	ldrh	r3, [r1, #12]
 800447e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004480:	079d      	lsls	r5, r3, #30
 8004482:	4606      	mov	r6, r0
 8004484:	460c      	mov	r4, r1
 8004486:	d507      	bpl.n	8004498 <__smakebuf_r+0x1c>
 8004488:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800448c:	6023      	str	r3, [r4, #0]
 800448e:	6123      	str	r3, [r4, #16]
 8004490:	2301      	movs	r3, #1
 8004492:	6163      	str	r3, [r4, #20]
 8004494:	b002      	add	sp, #8
 8004496:	bd70      	pop	{r4, r5, r6, pc}
 8004498:	ab01      	add	r3, sp, #4
 800449a:	466a      	mov	r2, sp
 800449c:	f7ff ffc8 	bl	8004430 <__swhatbuf_r>
 80044a0:	9900      	ldr	r1, [sp, #0]
 80044a2:	4605      	mov	r5, r0
 80044a4:	4630      	mov	r0, r6
 80044a6:	f000 f895 	bl	80045d4 <_malloc_r>
 80044aa:	b948      	cbnz	r0, 80044c0 <__smakebuf_r+0x44>
 80044ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044b0:	059a      	lsls	r2, r3, #22
 80044b2:	d4ef      	bmi.n	8004494 <__smakebuf_r+0x18>
 80044b4:	f023 0303 	bic.w	r3, r3, #3
 80044b8:	f043 0302 	orr.w	r3, r3, #2
 80044bc:	81a3      	strh	r3, [r4, #12]
 80044be:	e7e3      	b.n	8004488 <__smakebuf_r+0xc>
 80044c0:	4b0d      	ldr	r3, [pc, #52]	; (80044f8 <__smakebuf_r+0x7c>)
 80044c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80044c4:	89a3      	ldrh	r3, [r4, #12]
 80044c6:	6020      	str	r0, [r4, #0]
 80044c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044cc:	81a3      	strh	r3, [r4, #12]
 80044ce:	9b00      	ldr	r3, [sp, #0]
 80044d0:	6163      	str	r3, [r4, #20]
 80044d2:	9b01      	ldr	r3, [sp, #4]
 80044d4:	6120      	str	r0, [r4, #16]
 80044d6:	b15b      	cbz	r3, 80044f0 <__smakebuf_r+0x74>
 80044d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044dc:	4630      	mov	r0, r6
 80044de:	f000 fc63 	bl	8004da8 <_isatty_r>
 80044e2:	b128      	cbz	r0, 80044f0 <__smakebuf_r+0x74>
 80044e4:	89a3      	ldrh	r3, [r4, #12]
 80044e6:	f023 0303 	bic.w	r3, r3, #3
 80044ea:	f043 0301 	orr.w	r3, r3, #1
 80044ee:	81a3      	strh	r3, [r4, #12]
 80044f0:	89a0      	ldrh	r0, [r4, #12]
 80044f2:	4305      	orrs	r5, r0
 80044f4:	81a5      	strh	r5, [r4, #12]
 80044f6:	e7cd      	b.n	8004494 <__smakebuf_r+0x18>
 80044f8:	08004289 	.word	0x08004289

080044fc <_free_r>:
 80044fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80044fe:	2900      	cmp	r1, #0
 8004500:	d044      	beq.n	800458c <_free_r+0x90>
 8004502:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004506:	9001      	str	r0, [sp, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	f1a1 0404 	sub.w	r4, r1, #4
 800450e:	bfb8      	it	lt
 8004510:	18e4      	addlt	r4, r4, r3
 8004512:	f000 fc6b 	bl	8004dec <__malloc_lock>
 8004516:	4a1e      	ldr	r2, [pc, #120]	; (8004590 <_free_r+0x94>)
 8004518:	9801      	ldr	r0, [sp, #4]
 800451a:	6813      	ldr	r3, [r2, #0]
 800451c:	b933      	cbnz	r3, 800452c <_free_r+0x30>
 800451e:	6063      	str	r3, [r4, #4]
 8004520:	6014      	str	r4, [r2, #0]
 8004522:	b003      	add	sp, #12
 8004524:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004528:	f000 bc66 	b.w	8004df8 <__malloc_unlock>
 800452c:	42a3      	cmp	r3, r4
 800452e:	d908      	bls.n	8004542 <_free_r+0x46>
 8004530:	6825      	ldr	r5, [r4, #0]
 8004532:	1961      	adds	r1, r4, r5
 8004534:	428b      	cmp	r3, r1
 8004536:	bf01      	itttt	eq
 8004538:	6819      	ldreq	r1, [r3, #0]
 800453a:	685b      	ldreq	r3, [r3, #4]
 800453c:	1949      	addeq	r1, r1, r5
 800453e:	6021      	streq	r1, [r4, #0]
 8004540:	e7ed      	b.n	800451e <_free_r+0x22>
 8004542:	461a      	mov	r2, r3
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	b10b      	cbz	r3, 800454c <_free_r+0x50>
 8004548:	42a3      	cmp	r3, r4
 800454a:	d9fa      	bls.n	8004542 <_free_r+0x46>
 800454c:	6811      	ldr	r1, [r2, #0]
 800454e:	1855      	adds	r5, r2, r1
 8004550:	42a5      	cmp	r5, r4
 8004552:	d10b      	bne.n	800456c <_free_r+0x70>
 8004554:	6824      	ldr	r4, [r4, #0]
 8004556:	4421      	add	r1, r4
 8004558:	1854      	adds	r4, r2, r1
 800455a:	42a3      	cmp	r3, r4
 800455c:	6011      	str	r1, [r2, #0]
 800455e:	d1e0      	bne.n	8004522 <_free_r+0x26>
 8004560:	681c      	ldr	r4, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	6053      	str	r3, [r2, #4]
 8004566:	4421      	add	r1, r4
 8004568:	6011      	str	r1, [r2, #0]
 800456a:	e7da      	b.n	8004522 <_free_r+0x26>
 800456c:	d902      	bls.n	8004574 <_free_r+0x78>
 800456e:	230c      	movs	r3, #12
 8004570:	6003      	str	r3, [r0, #0]
 8004572:	e7d6      	b.n	8004522 <_free_r+0x26>
 8004574:	6825      	ldr	r5, [r4, #0]
 8004576:	1961      	adds	r1, r4, r5
 8004578:	428b      	cmp	r3, r1
 800457a:	bf04      	itt	eq
 800457c:	6819      	ldreq	r1, [r3, #0]
 800457e:	685b      	ldreq	r3, [r3, #4]
 8004580:	6063      	str	r3, [r4, #4]
 8004582:	bf04      	itt	eq
 8004584:	1949      	addeq	r1, r1, r5
 8004586:	6021      	streq	r1, [r4, #0]
 8004588:	6054      	str	r4, [r2, #4]
 800458a:	e7ca      	b.n	8004522 <_free_r+0x26>
 800458c:	b003      	add	sp, #12
 800458e:	bd30      	pop	{r4, r5, pc}
 8004590:	20000158 	.word	0x20000158

08004594 <sbrk_aligned>:
 8004594:	b570      	push	{r4, r5, r6, lr}
 8004596:	4e0e      	ldr	r6, [pc, #56]	; (80045d0 <sbrk_aligned+0x3c>)
 8004598:	460c      	mov	r4, r1
 800459a:	6831      	ldr	r1, [r6, #0]
 800459c:	4605      	mov	r5, r0
 800459e:	b911      	cbnz	r1, 80045a6 <sbrk_aligned+0x12>
 80045a0:	f000 fb7a 	bl	8004c98 <_sbrk_r>
 80045a4:	6030      	str	r0, [r6, #0]
 80045a6:	4621      	mov	r1, r4
 80045a8:	4628      	mov	r0, r5
 80045aa:	f000 fb75 	bl	8004c98 <_sbrk_r>
 80045ae:	1c43      	adds	r3, r0, #1
 80045b0:	d00a      	beq.n	80045c8 <sbrk_aligned+0x34>
 80045b2:	1cc4      	adds	r4, r0, #3
 80045b4:	f024 0403 	bic.w	r4, r4, #3
 80045b8:	42a0      	cmp	r0, r4
 80045ba:	d007      	beq.n	80045cc <sbrk_aligned+0x38>
 80045bc:	1a21      	subs	r1, r4, r0
 80045be:	4628      	mov	r0, r5
 80045c0:	f000 fb6a 	bl	8004c98 <_sbrk_r>
 80045c4:	3001      	adds	r0, #1
 80045c6:	d101      	bne.n	80045cc <sbrk_aligned+0x38>
 80045c8:	f04f 34ff 	mov.w	r4, #4294967295
 80045cc:	4620      	mov	r0, r4
 80045ce:	bd70      	pop	{r4, r5, r6, pc}
 80045d0:	2000015c 	.word	0x2000015c

080045d4 <_malloc_r>:
 80045d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045d8:	1ccd      	adds	r5, r1, #3
 80045da:	f025 0503 	bic.w	r5, r5, #3
 80045de:	3508      	adds	r5, #8
 80045e0:	2d0c      	cmp	r5, #12
 80045e2:	bf38      	it	cc
 80045e4:	250c      	movcc	r5, #12
 80045e6:	2d00      	cmp	r5, #0
 80045e8:	4607      	mov	r7, r0
 80045ea:	db01      	blt.n	80045f0 <_malloc_r+0x1c>
 80045ec:	42a9      	cmp	r1, r5
 80045ee:	d905      	bls.n	80045fc <_malloc_r+0x28>
 80045f0:	230c      	movs	r3, #12
 80045f2:	603b      	str	r3, [r7, #0]
 80045f4:	2600      	movs	r6, #0
 80045f6:	4630      	mov	r0, r6
 80045f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045fc:	4e2e      	ldr	r6, [pc, #184]	; (80046b8 <_malloc_r+0xe4>)
 80045fe:	f000 fbf5 	bl	8004dec <__malloc_lock>
 8004602:	6833      	ldr	r3, [r6, #0]
 8004604:	461c      	mov	r4, r3
 8004606:	bb34      	cbnz	r4, 8004656 <_malloc_r+0x82>
 8004608:	4629      	mov	r1, r5
 800460a:	4638      	mov	r0, r7
 800460c:	f7ff ffc2 	bl	8004594 <sbrk_aligned>
 8004610:	1c43      	adds	r3, r0, #1
 8004612:	4604      	mov	r4, r0
 8004614:	d14d      	bne.n	80046b2 <_malloc_r+0xde>
 8004616:	6834      	ldr	r4, [r6, #0]
 8004618:	4626      	mov	r6, r4
 800461a:	2e00      	cmp	r6, #0
 800461c:	d140      	bne.n	80046a0 <_malloc_r+0xcc>
 800461e:	6823      	ldr	r3, [r4, #0]
 8004620:	4631      	mov	r1, r6
 8004622:	4638      	mov	r0, r7
 8004624:	eb04 0803 	add.w	r8, r4, r3
 8004628:	f000 fb36 	bl	8004c98 <_sbrk_r>
 800462c:	4580      	cmp	r8, r0
 800462e:	d13a      	bne.n	80046a6 <_malloc_r+0xd2>
 8004630:	6821      	ldr	r1, [r4, #0]
 8004632:	3503      	adds	r5, #3
 8004634:	1a6d      	subs	r5, r5, r1
 8004636:	f025 0503 	bic.w	r5, r5, #3
 800463a:	3508      	adds	r5, #8
 800463c:	2d0c      	cmp	r5, #12
 800463e:	bf38      	it	cc
 8004640:	250c      	movcc	r5, #12
 8004642:	4629      	mov	r1, r5
 8004644:	4638      	mov	r0, r7
 8004646:	f7ff ffa5 	bl	8004594 <sbrk_aligned>
 800464a:	3001      	adds	r0, #1
 800464c:	d02b      	beq.n	80046a6 <_malloc_r+0xd2>
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	442b      	add	r3, r5
 8004652:	6023      	str	r3, [r4, #0]
 8004654:	e00e      	b.n	8004674 <_malloc_r+0xa0>
 8004656:	6822      	ldr	r2, [r4, #0]
 8004658:	1b52      	subs	r2, r2, r5
 800465a:	d41e      	bmi.n	800469a <_malloc_r+0xc6>
 800465c:	2a0b      	cmp	r2, #11
 800465e:	d916      	bls.n	800468e <_malloc_r+0xba>
 8004660:	1961      	adds	r1, r4, r5
 8004662:	42a3      	cmp	r3, r4
 8004664:	6025      	str	r5, [r4, #0]
 8004666:	bf18      	it	ne
 8004668:	6059      	strne	r1, [r3, #4]
 800466a:	6863      	ldr	r3, [r4, #4]
 800466c:	bf08      	it	eq
 800466e:	6031      	streq	r1, [r6, #0]
 8004670:	5162      	str	r2, [r4, r5]
 8004672:	604b      	str	r3, [r1, #4]
 8004674:	4638      	mov	r0, r7
 8004676:	f104 060b 	add.w	r6, r4, #11
 800467a:	f000 fbbd 	bl	8004df8 <__malloc_unlock>
 800467e:	f026 0607 	bic.w	r6, r6, #7
 8004682:	1d23      	adds	r3, r4, #4
 8004684:	1af2      	subs	r2, r6, r3
 8004686:	d0b6      	beq.n	80045f6 <_malloc_r+0x22>
 8004688:	1b9b      	subs	r3, r3, r6
 800468a:	50a3      	str	r3, [r4, r2]
 800468c:	e7b3      	b.n	80045f6 <_malloc_r+0x22>
 800468e:	6862      	ldr	r2, [r4, #4]
 8004690:	42a3      	cmp	r3, r4
 8004692:	bf0c      	ite	eq
 8004694:	6032      	streq	r2, [r6, #0]
 8004696:	605a      	strne	r2, [r3, #4]
 8004698:	e7ec      	b.n	8004674 <_malloc_r+0xa0>
 800469a:	4623      	mov	r3, r4
 800469c:	6864      	ldr	r4, [r4, #4]
 800469e:	e7b2      	b.n	8004606 <_malloc_r+0x32>
 80046a0:	4634      	mov	r4, r6
 80046a2:	6876      	ldr	r6, [r6, #4]
 80046a4:	e7b9      	b.n	800461a <_malloc_r+0x46>
 80046a6:	230c      	movs	r3, #12
 80046a8:	603b      	str	r3, [r7, #0]
 80046aa:	4638      	mov	r0, r7
 80046ac:	f000 fba4 	bl	8004df8 <__malloc_unlock>
 80046b0:	e7a1      	b.n	80045f6 <_malloc_r+0x22>
 80046b2:	6025      	str	r5, [r4, #0]
 80046b4:	e7de      	b.n	8004674 <_malloc_r+0xa0>
 80046b6:	bf00      	nop
 80046b8:	20000158 	.word	0x20000158

080046bc <__sfputc_r>:
 80046bc:	6893      	ldr	r3, [r2, #8]
 80046be:	3b01      	subs	r3, #1
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	b410      	push	{r4}
 80046c4:	6093      	str	r3, [r2, #8]
 80046c6:	da08      	bge.n	80046da <__sfputc_r+0x1e>
 80046c8:	6994      	ldr	r4, [r2, #24]
 80046ca:	42a3      	cmp	r3, r4
 80046cc:	db01      	blt.n	80046d2 <__sfputc_r+0x16>
 80046ce:	290a      	cmp	r1, #10
 80046d0:	d103      	bne.n	80046da <__sfputc_r+0x1e>
 80046d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046d6:	f7ff bc31 	b.w	8003f3c <__swbuf_r>
 80046da:	6813      	ldr	r3, [r2, #0]
 80046dc:	1c58      	adds	r0, r3, #1
 80046de:	6010      	str	r0, [r2, #0]
 80046e0:	7019      	strb	r1, [r3, #0]
 80046e2:	4608      	mov	r0, r1
 80046e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <__sfputs_r>:
 80046ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ec:	4606      	mov	r6, r0
 80046ee:	460f      	mov	r7, r1
 80046f0:	4614      	mov	r4, r2
 80046f2:	18d5      	adds	r5, r2, r3
 80046f4:	42ac      	cmp	r4, r5
 80046f6:	d101      	bne.n	80046fc <__sfputs_r+0x12>
 80046f8:	2000      	movs	r0, #0
 80046fa:	e007      	b.n	800470c <__sfputs_r+0x22>
 80046fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004700:	463a      	mov	r2, r7
 8004702:	4630      	mov	r0, r6
 8004704:	f7ff ffda 	bl	80046bc <__sfputc_r>
 8004708:	1c43      	adds	r3, r0, #1
 800470a:	d1f3      	bne.n	80046f4 <__sfputs_r+0xa>
 800470c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004710 <_vfiprintf_r>:
 8004710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004714:	460d      	mov	r5, r1
 8004716:	b09d      	sub	sp, #116	; 0x74
 8004718:	4614      	mov	r4, r2
 800471a:	4698      	mov	r8, r3
 800471c:	4606      	mov	r6, r0
 800471e:	b118      	cbz	r0, 8004728 <_vfiprintf_r+0x18>
 8004720:	6983      	ldr	r3, [r0, #24]
 8004722:	b90b      	cbnz	r3, 8004728 <_vfiprintf_r+0x18>
 8004724:	f7ff fde4 	bl	80042f0 <__sinit>
 8004728:	4b89      	ldr	r3, [pc, #548]	; (8004950 <_vfiprintf_r+0x240>)
 800472a:	429d      	cmp	r5, r3
 800472c:	d11b      	bne.n	8004766 <_vfiprintf_r+0x56>
 800472e:	6875      	ldr	r5, [r6, #4]
 8004730:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004732:	07d9      	lsls	r1, r3, #31
 8004734:	d405      	bmi.n	8004742 <_vfiprintf_r+0x32>
 8004736:	89ab      	ldrh	r3, [r5, #12]
 8004738:	059a      	lsls	r2, r3, #22
 800473a:	d402      	bmi.n	8004742 <_vfiprintf_r+0x32>
 800473c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800473e:	f7ff fe75 	bl	800442c <__retarget_lock_acquire_recursive>
 8004742:	89ab      	ldrh	r3, [r5, #12]
 8004744:	071b      	lsls	r3, r3, #28
 8004746:	d501      	bpl.n	800474c <_vfiprintf_r+0x3c>
 8004748:	692b      	ldr	r3, [r5, #16]
 800474a:	b9eb      	cbnz	r3, 8004788 <_vfiprintf_r+0x78>
 800474c:	4629      	mov	r1, r5
 800474e:	4630      	mov	r0, r6
 8004750:	f7ff fc46 	bl	8003fe0 <__swsetup_r>
 8004754:	b1c0      	cbz	r0, 8004788 <_vfiprintf_r+0x78>
 8004756:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004758:	07dc      	lsls	r4, r3, #31
 800475a:	d50e      	bpl.n	800477a <_vfiprintf_r+0x6a>
 800475c:	f04f 30ff 	mov.w	r0, #4294967295
 8004760:	b01d      	add	sp, #116	; 0x74
 8004762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004766:	4b7b      	ldr	r3, [pc, #492]	; (8004954 <_vfiprintf_r+0x244>)
 8004768:	429d      	cmp	r5, r3
 800476a:	d101      	bne.n	8004770 <_vfiprintf_r+0x60>
 800476c:	68b5      	ldr	r5, [r6, #8]
 800476e:	e7df      	b.n	8004730 <_vfiprintf_r+0x20>
 8004770:	4b79      	ldr	r3, [pc, #484]	; (8004958 <_vfiprintf_r+0x248>)
 8004772:	429d      	cmp	r5, r3
 8004774:	bf08      	it	eq
 8004776:	68f5      	ldreq	r5, [r6, #12]
 8004778:	e7da      	b.n	8004730 <_vfiprintf_r+0x20>
 800477a:	89ab      	ldrh	r3, [r5, #12]
 800477c:	0598      	lsls	r0, r3, #22
 800477e:	d4ed      	bmi.n	800475c <_vfiprintf_r+0x4c>
 8004780:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004782:	f7ff fe54 	bl	800442e <__retarget_lock_release_recursive>
 8004786:	e7e9      	b.n	800475c <_vfiprintf_r+0x4c>
 8004788:	2300      	movs	r3, #0
 800478a:	9309      	str	r3, [sp, #36]	; 0x24
 800478c:	2320      	movs	r3, #32
 800478e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004792:	f8cd 800c 	str.w	r8, [sp, #12]
 8004796:	2330      	movs	r3, #48	; 0x30
 8004798:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800495c <_vfiprintf_r+0x24c>
 800479c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047a0:	f04f 0901 	mov.w	r9, #1
 80047a4:	4623      	mov	r3, r4
 80047a6:	469a      	mov	sl, r3
 80047a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047ac:	b10a      	cbz	r2, 80047b2 <_vfiprintf_r+0xa2>
 80047ae:	2a25      	cmp	r2, #37	; 0x25
 80047b0:	d1f9      	bne.n	80047a6 <_vfiprintf_r+0x96>
 80047b2:	ebba 0b04 	subs.w	fp, sl, r4
 80047b6:	d00b      	beq.n	80047d0 <_vfiprintf_r+0xc0>
 80047b8:	465b      	mov	r3, fp
 80047ba:	4622      	mov	r2, r4
 80047bc:	4629      	mov	r1, r5
 80047be:	4630      	mov	r0, r6
 80047c0:	f7ff ff93 	bl	80046ea <__sfputs_r>
 80047c4:	3001      	adds	r0, #1
 80047c6:	f000 80aa 	beq.w	800491e <_vfiprintf_r+0x20e>
 80047ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047cc:	445a      	add	r2, fp
 80047ce:	9209      	str	r2, [sp, #36]	; 0x24
 80047d0:	f89a 3000 	ldrb.w	r3, [sl]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 80a2 	beq.w	800491e <_vfiprintf_r+0x20e>
 80047da:	2300      	movs	r3, #0
 80047dc:	f04f 32ff 	mov.w	r2, #4294967295
 80047e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047e4:	f10a 0a01 	add.w	sl, sl, #1
 80047e8:	9304      	str	r3, [sp, #16]
 80047ea:	9307      	str	r3, [sp, #28]
 80047ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047f0:	931a      	str	r3, [sp, #104]	; 0x68
 80047f2:	4654      	mov	r4, sl
 80047f4:	2205      	movs	r2, #5
 80047f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047fa:	4858      	ldr	r0, [pc, #352]	; (800495c <_vfiprintf_r+0x24c>)
 80047fc:	f7fb fcf0 	bl	80001e0 <memchr>
 8004800:	9a04      	ldr	r2, [sp, #16]
 8004802:	b9d8      	cbnz	r0, 800483c <_vfiprintf_r+0x12c>
 8004804:	06d1      	lsls	r1, r2, #27
 8004806:	bf44      	itt	mi
 8004808:	2320      	movmi	r3, #32
 800480a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800480e:	0713      	lsls	r3, r2, #28
 8004810:	bf44      	itt	mi
 8004812:	232b      	movmi	r3, #43	; 0x2b
 8004814:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004818:	f89a 3000 	ldrb.w	r3, [sl]
 800481c:	2b2a      	cmp	r3, #42	; 0x2a
 800481e:	d015      	beq.n	800484c <_vfiprintf_r+0x13c>
 8004820:	9a07      	ldr	r2, [sp, #28]
 8004822:	4654      	mov	r4, sl
 8004824:	2000      	movs	r0, #0
 8004826:	f04f 0c0a 	mov.w	ip, #10
 800482a:	4621      	mov	r1, r4
 800482c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004830:	3b30      	subs	r3, #48	; 0x30
 8004832:	2b09      	cmp	r3, #9
 8004834:	d94e      	bls.n	80048d4 <_vfiprintf_r+0x1c4>
 8004836:	b1b0      	cbz	r0, 8004866 <_vfiprintf_r+0x156>
 8004838:	9207      	str	r2, [sp, #28]
 800483a:	e014      	b.n	8004866 <_vfiprintf_r+0x156>
 800483c:	eba0 0308 	sub.w	r3, r0, r8
 8004840:	fa09 f303 	lsl.w	r3, r9, r3
 8004844:	4313      	orrs	r3, r2
 8004846:	9304      	str	r3, [sp, #16]
 8004848:	46a2      	mov	sl, r4
 800484a:	e7d2      	b.n	80047f2 <_vfiprintf_r+0xe2>
 800484c:	9b03      	ldr	r3, [sp, #12]
 800484e:	1d19      	adds	r1, r3, #4
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	9103      	str	r1, [sp, #12]
 8004854:	2b00      	cmp	r3, #0
 8004856:	bfbb      	ittet	lt
 8004858:	425b      	neglt	r3, r3
 800485a:	f042 0202 	orrlt.w	r2, r2, #2
 800485e:	9307      	strge	r3, [sp, #28]
 8004860:	9307      	strlt	r3, [sp, #28]
 8004862:	bfb8      	it	lt
 8004864:	9204      	strlt	r2, [sp, #16]
 8004866:	7823      	ldrb	r3, [r4, #0]
 8004868:	2b2e      	cmp	r3, #46	; 0x2e
 800486a:	d10c      	bne.n	8004886 <_vfiprintf_r+0x176>
 800486c:	7863      	ldrb	r3, [r4, #1]
 800486e:	2b2a      	cmp	r3, #42	; 0x2a
 8004870:	d135      	bne.n	80048de <_vfiprintf_r+0x1ce>
 8004872:	9b03      	ldr	r3, [sp, #12]
 8004874:	1d1a      	adds	r2, r3, #4
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	9203      	str	r2, [sp, #12]
 800487a:	2b00      	cmp	r3, #0
 800487c:	bfb8      	it	lt
 800487e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004882:	3402      	adds	r4, #2
 8004884:	9305      	str	r3, [sp, #20]
 8004886:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800496c <_vfiprintf_r+0x25c>
 800488a:	7821      	ldrb	r1, [r4, #0]
 800488c:	2203      	movs	r2, #3
 800488e:	4650      	mov	r0, sl
 8004890:	f7fb fca6 	bl	80001e0 <memchr>
 8004894:	b140      	cbz	r0, 80048a8 <_vfiprintf_r+0x198>
 8004896:	2340      	movs	r3, #64	; 0x40
 8004898:	eba0 000a 	sub.w	r0, r0, sl
 800489c:	fa03 f000 	lsl.w	r0, r3, r0
 80048a0:	9b04      	ldr	r3, [sp, #16]
 80048a2:	4303      	orrs	r3, r0
 80048a4:	3401      	adds	r4, #1
 80048a6:	9304      	str	r3, [sp, #16]
 80048a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048ac:	482c      	ldr	r0, [pc, #176]	; (8004960 <_vfiprintf_r+0x250>)
 80048ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048b2:	2206      	movs	r2, #6
 80048b4:	f7fb fc94 	bl	80001e0 <memchr>
 80048b8:	2800      	cmp	r0, #0
 80048ba:	d03f      	beq.n	800493c <_vfiprintf_r+0x22c>
 80048bc:	4b29      	ldr	r3, [pc, #164]	; (8004964 <_vfiprintf_r+0x254>)
 80048be:	bb1b      	cbnz	r3, 8004908 <_vfiprintf_r+0x1f8>
 80048c0:	9b03      	ldr	r3, [sp, #12]
 80048c2:	3307      	adds	r3, #7
 80048c4:	f023 0307 	bic.w	r3, r3, #7
 80048c8:	3308      	adds	r3, #8
 80048ca:	9303      	str	r3, [sp, #12]
 80048cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048ce:	443b      	add	r3, r7
 80048d0:	9309      	str	r3, [sp, #36]	; 0x24
 80048d2:	e767      	b.n	80047a4 <_vfiprintf_r+0x94>
 80048d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80048d8:	460c      	mov	r4, r1
 80048da:	2001      	movs	r0, #1
 80048dc:	e7a5      	b.n	800482a <_vfiprintf_r+0x11a>
 80048de:	2300      	movs	r3, #0
 80048e0:	3401      	adds	r4, #1
 80048e2:	9305      	str	r3, [sp, #20]
 80048e4:	4619      	mov	r1, r3
 80048e6:	f04f 0c0a 	mov.w	ip, #10
 80048ea:	4620      	mov	r0, r4
 80048ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048f0:	3a30      	subs	r2, #48	; 0x30
 80048f2:	2a09      	cmp	r2, #9
 80048f4:	d903      	bls.n	80048fe <_vfiprintf_r+0x1ee>
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0c5      	beq.n	8004886 <_vfiprintf_r+0x176>
 80048fa:	9105      	str	r1, [sp, #20]
 80048fc:	e7c3      	b.n	8004886 <_vfiprintf_r+0x176>
 80048fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8004902:	4604      	mov	r4, r0
 8004904:	2301      	movs	r3, #1
 8004906:	e7f0      	b.n	80048ea <_vfiprintf_r+0x1da>
 8004908:	ab03      	add	r3, sp, #12
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	462a      	mov	r2, r5
 800490e:	4b16      	ldr	r3, [pc, #88]	; (8004968 <_vfiprintf_r+0x258>)
 8004910:	a904      	add	r1, sp, #16
 8004912:	4630      	mov	r0, r6
 8004914:	f3af 8000 	nop.w
 8004918:	4607      	mov	r7, r0
 800491a:	1c78      	adds	r0, r7, #1
 800491c:	d1d6      	bne.n	80048cc <_vfiprintf_r+0x1bc>
 800491e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004920:	07d9      	lsls	r1, r3, #31
 8004922:	d405      	bmi.n	8004930 <_vfiprintf_r+0x220>
 8004924:	89ab      	ldrh	r3, [r5, #12]
 8004926:	059a      	lsls	r2, r3, #22
 8004928:	d402      	bmi.n	8004930 <_vfiprintf_r+0x220>
 800492a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800492c:	f7ff fd7f 	bl	800442e <__retarget_lock_release_recursive>
 8004930:	89ab      	ldrh	r3, [r5, #12]
 8004932:	065b      	lsls	r3, r3, #25
 8004934:	f53f af12 	bmi.w	800475c <_vfiprintf_r+0x4c>
 8004938:	9809      	ldr	r0, [sp, #36]	; 0x24
 800493a:	e711      	b.n	8004760 <_vfiprintf_r+0x50>
 800493c:	ab03      	add	r3, sp, #12
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	462a      	mov	r2, r5
 8004942:	4b09      	ldr	r3, [pc, #36]	; (8004968 <_vfiprintf_r+0x258>)
 8004944:	a904      	add	r1, sp, #16
 8004946:	4630      	mov	r0, r6
 8004948:	f000 f880 	bl	8004a4c <_printf_i>
 800494c:	e7e4      	b.n	8004918 <_vfiprintf_r+0x208>
 800494e:	bf00      	nop
 8004950:	08004f80 	.word	0x08004f80
 8004954:	08004fa0 	.word	0x08004fa0
 8004958:	08004f60 	.word	0x08004f60
 800495c:	08004fc0 	.word	0x08004fc0
 8004960:	08004fca 	.word	0x08004fca
 8004964:	00000000 	.word	0x00000000
 8004968:	080046eb 	.word	0x080046eb
 800496c:	08004fc6 	.word	0x08004fc6

08004970 <_printf_common>:
 8004970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004974:	4616      	mov	r6, r2
 8004976:	4699      	mov	r9, r3
 8004978:	688a      	ldr	r2, [r1, #8]
 800497a:	690b      	ldr	r3, [r1, #16]
 800497c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004980:	4293      	cmp	r3, r2
 8004982:	bfb8      	it	lt
 8004984:	4613      	movlt	r3, r2
 8004986:	6033      	str	r3, [r6, #0]
 8004988:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800498c:	4607      	mov	r7, r0
 800498e:	460c      	mov	r4, r1
 8004990:	b10a      	cbz	r2, 8004996 <_printf_common+0x26>
 8004992:	3301      	adds	r3, #1
 8004994:	6033      	str	r3, [r6, #0]
 8004996:	6823      	ldr	r3, [r4, #0]
 8004998:	0699      	lsls	r1, r3, #26
 800499a:	bf42      	ittt	mi
 800499c:	6833      	ldrmi	r3, [r6, #0]
 800499e:	3302      	addmi	r3, #2
 80049a0:	6033      	strmi	r3, [r6, #0]
 80049a2:	6825      	ldr	r5, [r4, #0]
 80049a4:	f015 0506 	ands.w	r5, r5, #6
 80049a8:	d106      	bne.n	80049b8 <_printf_common+0x48>
 80049aa:	f104 0a19 	add.w	sl, r4, #25
 80049ae:	68e3      	ldr	r3, [r4, #12]
 80049b0:	6832      	ldr	r2, [r6, #0]
 80049b2:	1a9b      	subs	r3, r3, r2
 80049b4:	42ab      	cmp	r3, r5
 80049b6:	dc26      	bgt.n	8004a06 <_printf_common+0x96>
 80049b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049bc:	1e13      	subs	r3, r2, #0
 80049be:	6822      	ldr	r2, [r4, #0]
 80049c0:	bf18      	it	ne
 80049c2:	2301      	movne	r3, #1
 80049c4:	0692      	lsls	r2, r2, #26
 80049c6:	d42b      	bmi.n	8004a20 <_printf_common+0xb0>
 80049c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049cc:	4649      	mov	r1, r9
 80049ce:	4638      	mov	r0, r7
 80049d0:	47c0      	blx	r8
 80049d2:	3001      	adds	r0, #1
 80049d4:	d01e      	beq.n	8004a14 <_printf_common+0xa4>
 80049d6:	6823      	ldr	r3, [r4, #0]
 80049d8:	68e5      	ldr	r5, [r4, #12]
 80049da:	6832      	ldr	r2, [r6, #0]
 80049dc:	f003 0306 	and.w	r3, r3, #6
 80049e0:	2b04      	cmp	r3, #4
 80049e2:	bf08      	it	eq
 80049e4:	1aad      	subeq	r5, r5, r2
 80049e6:	68a3      	ldr	r3, [r4, #8]
 80049e8:	6922      	ldr	r2, [r4, #16]
 80049ea:	bf0c      	ite	eq
 80049ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049f0:	2500      	movne	r5, #0
 80049f2:	4293      	cmp	r3, r2
 80049f4:	bfc4      	itt	gt
 80049f6:	1a9b      	subgt	r3, r3, r2
 80049f8:	18ed      	addgt	r5, r5, r3
 80049fa:	2600      	movs	r6, #0
 80049fc:	341a      	adds	r4, #26
 80049fe:	42b5      	cmp	r5, r6
 8004a00:	d11a      	bne.n	8004a38 <_printf_common+0xc8>
 8004a02:	2000      	movs	r0, #0
 8004a04:	e008      	b.n	8004a18 <_printf_common+0xa8>
 8004a06:	2301      	movs	r3, #1
 8004a08:	4652      	mov	r2, sl
 8004a0a:	4649      	mov	r1, r9
 8004a0c:	4638      	mov	r0, r7
 8004a0e:	47c0      	blx	r8
 8004a10:	3001      	adds	r0, #1
 8004a12:	d103      	bne.n	8004a1c <_printf_common+0xac>
 8004a14:	f04f 30ff 	mov.w	r0, #4294967295
 8004a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a1c:	3501      	adds	r5, #1
 8004a1e:	e7c6      	b.n	80049ae <_printf_common+0x3e>
 8004a20:	18e1      	adds	r1, r4, r3
 8004a22:	1c5a      	adds	r2, r3, #1
 8004a24:	2030      	movs	r0, #48	; 0x30
 8004a26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a2a:	4422      	add	r2, r4
 8004a2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a34:	3302      	adds	r3, #2
 8004a36:	e7c7      	b.n	80049c8 <_printf_common+0x58>
 8004a38:	2301      	movs	r3, #1
 8004a3a:	4622      	mov	r2, r4
 8004a3c:	4649      	mov	r1, r9
 8004a3e:	4638      	mov	r0, r7
 8004a40:	47c0      	blx	r8
 8004a42:	3001      	adds	r0, #1
 8004a44:	d0e6      	beq.n	8004a14 <_printf_common+0xa4>
 8004a46:	3601      	adds	r6, #1
 8004a48:	e7d9      	b.n	80049fe <_printf_common+0x8e>
	...

08004a4c <_printf_i>:
 8004a4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a50:	7e0f      	ldrb	r7, [r1, #24]
 8004a52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a54:	2f78      	cmp	r7, #120	; 0x78
 8004a56:	4691      	mov	r9, r2
 8004a58:	4680      	mov	r8, r0
 8004a5a:	460c      	mov	r4, r1
 8004a5c:	469a      	mov	sl, r3
 8004a5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a62:	d807      	bhi.n	8004a74 <_printf_i+0x28>
 8004a64:	2f62      	cmp	r7, #98	; 0x62
 8004a66:	d80a      	bhi.n	8004a7e <_printf_i+0x32>
 8004a68:	2f00      	cmp	r7, #0
 8004a6a:	f000 80d8 	beq.w	8004c1e <_printf_i+0x1d2>
 8004a6e:	2f58      	cmp	r7, #88	; 0x58
 8004a70:	f000 80a3 	beq.w	8004bba <_printf_i+0x16e>
 8004a74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a7c:	e03a      	b.n	8004af4 <_printf_i+0xa8>
 8004a7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a82:	2b15      	cmp	r3, #21
 8004a84:	d8f6      	bhi.n	8004a74 <_printf_i+0x28>
 8004a86:	a101      	add	r1, pc, #4	; (adr r1, 8004a8c <_printf_i+0x40>)
 8004a88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a8c:	08004ae5 	.word	0x08004ae5
 8004a90:	08004af9 	.word	0x08004af9
 8004a94:	08004a75 	.word	0x08004a75
 8004a98:	08004a75 	.word	0x08004a75
 8004a9c:	08004a75 	.word	0x08004a75
 8004aa0:	08004a75 	.word	0x08004a75
 8004aa4:	08004af9 	.word	0x08004af9
 8004aa8:	08004a75 	.word	0x08004a75
 8004aac:	08004a75 	.word	0x08004a75
 8004ab0:	08004a75 	.word	0x08004a75
 8004ab4:	08004a75 	.word	0x08004a75
 8004ab8:	08004c05 	.word	0x08004c05
 8004abc:	08004b29 	.word	0x08004b29
 8004ac0:	08004be7 	.word	0x08004be7
 8004ac4:	08004a75 	.word	0x08004a75
 8004ac8:	08004a75 	.word	0x08004a75
 8004acc:	08004c27 	.word	0x08004c27
 8004ad0:	08004a75 	.word	0x08004a75
 8004ad4:	08004b29 	.word	0x08004b29
 8004ad8:	08004a75 	.word	0x08004a75
 8004adc:	08004a75 	.word	0x08004a75
 8004ae0:	08004bef 	.word	0x08004bef
 8004ae4:	682b      	ldr	r3, [r5, #0]
 8004ae6:	1d1a      	adds	r2, r3, #4
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	602a      	str	r2, [r5, #0]
 8004aec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004af0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004af4:	2301      	movs	r3, #1
 8004af6:	e0a3      	b.n	8004c40 <_printf_i+0x1f4>
 8004af8:	6820      	ldr	r0, [r4, #0]
 8004afa:	6829      	ldr	r1, [r5, #0]
 8004afc:	0606      	lsls	r6, r0, #24
 8004afe:	f101 0304 	add.w	r3, r1, #4
 8004b02:	d50a      	bpl.n	8004b1a <_printf_i+0xce>
 8004b04:	680e      	ldr	r6, [r1, #0]
 8004b06:	602b      	str	r3, [r5, #0]
 8004b08:	2e00      	cmp	r6, #0
 8004b0a:	da03      	bge.n	8004b14 <_printf_i+0xc8>
 8004b0c:	232d      	movs	r3, #45	; 0x2d
 8004b0e:	4276      	negs	r6, r6
 8004b10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b14:	485e      	ldr	r0, [pc, #376]	; (8004c90 <_printf_i+0x244>)
 8004b16:	230a      	movs	r3, #10
 8004b18:	e019      	b.n	8004b4e <_printf_i+0x102>
 8004b1a:	680e      	ldr	r6, [r1, #0]
 8004b1c:	602b      	str	r3, [r5, #0]
 8004b1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b22:	bf18      	it	ne
 8004b24:	b236      	sxthne	r6, r6
 8004b26:	e7ef      	b.n	8004b08 <_printf_i+0xbc>
 8004b28:	682b      	ldr	r3, [r5, #0]
 8004b2a:	6820      	ldr	r0, [r4, #0]
 8004b2c:	1d19      	adds	r1, r3, #4
 8004b2e:	6029      	str	r1, [r5, #0]
 8004b30:	0601      	lsls	r1, r0, #24
 8004b32:	d501      	bpl.n	8004b38 <_printf_i+0xec>
 8004b34:	681e      	ldr	r6, [r3, #0]
 8004b36:	e002      	b.n	8004b3e <_printf_i+0xf2>
 8004b38:	0646      	lsls	r6, r0, #25
 8004b3a:	d5fb      	bpl.n	8004b34 <_printf_i+0xe8>
 8004b3c:	881e      	ldrh	r6, [r3, #0]
 8004b3e:	4854      	ldr	r0, [pc, #336]	; (8004c90 <_printf_i+0x244>)
 8004b40:	2f6f      	cmp	r7, #111	; 0x6f
 8004b42:	bf0c      	ite	eq
 8004b44:	2308      	moveq	r3, #8
 8004b46:	230a      	movne	r3, #10
 8004b48:	2100      	movs	r1, #0
 8004b4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b4e:	6865      	ldr	r5, [r4, #4]
 8004b50:	60a5      	str	r5, [r4, #8]
 8004b52:	2d00      	cmp	r5, #0
 8004b54:	bfa2      	ittt	ge
 8004b56:	6821      	ldrge	r1, [r4, #0]
 8004b58:	f021 0104 	bicge.w	r1, r1, #4
 8004b5c:	6021      	strge	r1, [r4, #0]
 8004b5e:	b90e      	cbnz	r6, 8004b64 <_printf_i+0x118>
 8004b60:	2d00      	cmp	r5, #0
 8004b62:	d04d      	beq.n	8004c00 <_printf_i+0x1b4>
 8004b64:	4615      	mov	r5, r2
 8004b66:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b6a:	fb03 6711 	mls	r7, r3, r1, r6
 8004b6e:	5dc7      	ldrb	r7, [r0, r7]
 8004b70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b74:	4637      	mov	r7, r6
 8004b76:	42bb      	cmp	r3, r7
 8004b78:	460e      	mov	r6, r1
 8004b7a:	d9f4      	bls.n	8004b66 <_printf_i+0x11a>
 8004b7c:	2b08      	cmp	r3, #8
 8004b7e:	d10b      	bne.n	8004b98 <_printf_i+0x14c>
 8004b80:	6823      	ldr	r3, [r4, #0]
 8004b82:	07de      	lsls	r6, r3, #31
 8004b84:	d508      	bpl.n	8004b98 <_printf_i+0x14c>
 8004b86:	6923      	ldr	r3, [r4, #16]
 8004b88:	6861      	ldr	r1, [r4, #4]
 8004b8a:	4299      	cmp	r1, r3
 8004b8c:	bfde      	ittt	le
 8004b8e:	2330      	movle	r3, #48	; 0x30
 8004b90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b94:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b98:	1b52      	subs	r2, r2, r5
 8004b9a:	6122      	str	r2, [r4, #16]
 8004b9c:	f8cd a000 	str.w	sl, [sp]
 8004ba0:	464b      	mov	r3, r9
 8004ba2:	aa03      	add	r2, sp, #12
 8004ba4:	4621      	mov	r1, r4
 8004ba6:	4640      	mov	r0, r8
 8004ba8:	f7ff fee2 	bl	8004970 <_printf_common>
 8004bac:	3001      	adds	r0, #1
 8004bae:	d14c      	bne.n	8004c4a <_printf_i+0x1fe>
 8004bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb4:	b004      	add	sp, #16
 8004bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bba:	4835      	ldr	r0, [pc, #212]	; (8004c90 <_printf_i+0x244>)
 8004bbc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004bc0:	6829      	ldr	r1, [r5, #0]
 8004bc2:	6823      	ldr	r3, [r4, #0]
 8004bc4:	f851 6b04 	ldr.w	r6, [r1], #4
 8004bc8:	6029      	str	r1, [r5, #0]
 8004bca:	061d      	lsls	r5, r3, #24
 8004bcc:	d514      	bpl.n	8004bf8 <_printf_i+0x1ac>
 8004bce:	07df      	lsls	r7, r3, #31
 8004bd0:	bf44      	itt	mi
 8004bd2:	f043 0320 	orrmi.w	r3, r3, #32
 8004bd6:	6023      	strmi	r3, [r4, #0]
 8004bd8:	b91e      	cbnz	r6, 8004be2 <_printf_i+0x196>
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	f023 0320 	bic.w	r3, r3, #32
 8004be0:	6023      	str	r3, [r4, #0]
 8004be2:	2310      	movs	r3, #16
 8004be4:	e7b0      	b.n	8004b48 <_printf_i+0xfc>
 8004be6:	6823      	ldr	r3, [r4, #0]
 8004be8:	f043 0320 	orr.w	r3, r3, #32
 8004bec:	6023      	str	r3, [r4, #0]
 8004bee:	2378      	movs	r3, #120	; 0x78
 8004bf0:	4828      	ldr	r0, [pc, #160]	; (8004c94 <_printf_i+0x248>)
 8004bf2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bf6:	e7e3      	b.n	8004bc0 <_printf_i+0x174>
 8004bf8:	0659      	lsls	r1, r3, #25
 8004bfa:	bf48      	it	mi
 8004bfc:	b2b6      	uxthmi	r6, r6
 8004bfe:	e7e6      	b.n	8004bce <_printf_i+0x182>
 8004c00:	4615      	mov	r5, r2
 8004c02:	e7bb      	b.n	8004b7c <_printf_i+0x130>
 8004c04:	682b      	ldr	r3, [r5, #0]
 8004c06:	6826      	ldr	r6, [r4, #0]
 8004c08:	6961      	ldr	r1, [r4, #20]
 8004c0a:	1d18      	adds	r0, r3, #4
 8004c0c:	6028      	str	r0, [r5, #0]
 8004c0e:	0635      	lsls	r5, r6, #24
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	d501      	bpl.n	8004c18 <_printf_i+0x1cc>
 8004c14:	6019      	str	r1, [r3, #0]
 8004c16:	e002      	b.n	8004c1e <_printf_i+0x1d2>
 8004c18:	0670      	lsls	r0, r6, #25
 8004c1a:	d5fb      	bpl.n	8004c14 <_printf_i+0x1c8>
 8004c1c:	8019      	strh	r1, [r3, #0]
 8004c1e:	2300      	movs	r3, #0
 8004c20:	6123      	str	r3, [r4, #16]
 8004c22:	4615      	mov	r5, r2
 8004c24:	e7ba      	b.n	8004b9c <_printf_i+0x150>
 8004c26:	682b      	ldr	r3, [r5, #0]
 8004c28:	1d1a      	adds	r2, r3, #4
 8004c2a:	602a      	str	r2, [r5, #0]
 8004c2c:	681d      	ldr	r5, [r3, #0]
 8004c2e:	6862      	ldr	r2, [r4, #4]
 8004c30:	2100      	movs	r1, #0
 8004c32:	4628      	mov	r0, r5
 8004c34:	f7fb fad4 	bl	80001e0 <memchr>
 8004c38:	b108      	cbz	r0, 8004c3e <_printf_i+0x1f2>
 8004c3a:	1b40      	subs	r0, r0, r5
 8004c3c:	6060      	str	r0, [r4, #4]
 8004c3e:	6863      	ldr	r3, [r4, #4]
 8004c40:	6123      	str	r3, [r4, #16]
 8004c42:	2300      	movs	r3, #0
 8004c44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c48:	e7a8      	b.n	8004b9c <_printf_i+0x150>
 8004c4a:	6923      	ldr	r3, [r4, #16]
 8004c4c:	462a      	mov	r2, r5
 8004c4e:	4649      	mov	r1, r9
 8004c50:	4640      	mov	r0, r8
 8004c52:	47d0      	blx	sl
 8004c54:	3001      	adds	r0, #1
 8004c56:	d0ab      	beq.n	8004bb0 <_printf_i+0x164>
 8004c58:	6823      	ldr	r3, [r4, #0]
 8004c5a:	079b      	lsls	r3, r3, #30
 8004c5c:	d413      	bmi.n	8004c86 <_printf_i+0x23a>
 8004c5e:	68e0      	ldr	r0, [r4, #12]
 8004c60:	9b03      	ldr	r3, [sp, #12]
 8004c62:	4298      	cmp	r0, r3
 8004c64:	bfb8      	it	lt
 8004c66:	4618      	movlt	r0, r3
 8004c68:	e7a4      	b.n	8004bb4 <_printf_i+0x168>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	4632      	mov	r2, r6
 8004c6e:	4649      	mov	r1, r9
 8004c70:	4640      	mov	r0, r8
 8004c72:	47d0      	blx	sl
 8004c74:	3001      	adds	r0, #1
 8004c76:	d09b      	beq.n	8004bb0 <_printf_i+0x164>
 8004c78:	3501      	adds	r5, #1
 8004c7a:	68e3      	ldr	r3, [r4, #12]
 8004c7c:	9903      	ldr	r1, [sp, #12]
 8004c7e:	1a5b      	subs	r3, r3, r1
 8004c80:	42ab      	cmp	r3, r5
 8004c82:	dcf2      	bgt.n	8004c6a <_printf_i+0x21e>
 8004c84:	e7eb      	b.n	8004c5e <_printf_i+0x212>
 8004c86:	2500      	movs	r5, #0
 8004c88:	f104 0619 	add.w	r6, r4, #25
 8004c8c:	e7f5      	b.n	8004c7a <_printf_i+0x22e>
 8004c8e:	bf00      	nop
 8004c90:	08004fd1 	.word	0x08004fd1
 8004c94:	08004fe2 	.word	0x08004fe2

08004c98 <_sbrk_r>:
 8004c98:	b538      	push	{r3, r4, r5, lr}
 8004c9a:	4d06      	ldr	r5, [pc, #24]	; (8004cb4 <_sbrk_r+0x1c>)
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	4604      	mov	r4, r0
 8004ca0:	4608      	mov	r0, r1
 8004ca2:	602b      	str	r3, [r5, #0]
 8004ca4:	f7fc f962 	bl	8000f6c <_sbrk>
 8004ca8:	1c43      	adds	r3, r0, #1
 8004caa:	d102      	bne.n	8004cb2 <_sbrk_r+0x1a>
 8004cac:	682b      	ldr	r3, [r5, #0]
 8004cae:	b103      	cbz	r3, 8004cb2 <_sbrk_r+0x1a>
 8004cb0:	6023      	str	r3, [r4, #0]
 8004cb2:	bd38      	pop	{r3, r4, r5, pc}
 8004cb4:	20000160 	.word	0x20000160

08004cb8 <__sread>:
 8004cb8:	b510      	push	{r4, lr}
 8004cba:	460c      	mov	r4, r1
 8004cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cc0:	f000 f8a0 	bl	8004e04 <_read_r>
 8004cc4:	2800      	cmp	r0, #0
 8004cc6:	bfab      	itete	ge
 8004cc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004cca:	89a3      	ldrhlt	r3, [r4, #12]
 8004ccc:	181b      	addge	r3, r3, r0
 8004cce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004cd2:	bfac      	ite	ge
 8004cd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004cd6:	81a3      	strhlt	r3, [r4, #12]
 8004cd8:	bd10      	pop	{r4, pc}

08004cda <__swrite>:
 8004cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cde:	461f      	mov	r7, r3
 8004ce0:	898b      	ldrh	r3, [r1, #12]
 8004ce2:	05db      	lsls	r3, r3, #23
 8004ce4:	4605      	mov	r5, r0
 8004ce6:	460c      	mov	r4, r1
 8004ce8:	4616      	mov	r6, r2
 8004cea:	d505      	bpl.n	8004cf8 <__swrite+0x1e>
 8004cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f000 f868 	bl	8004dc8 <_lseek_r>
 8004cf8:	89a3      	ldrh	r3, [r4, #12]
 8004cfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d02:	81a3      	strh	r3, [r4, #12]
 8004d04:	4632      	mov	r2, r6
 8004d06:	463b      	mov	r3, r7
 8004d08:	4628      	mov	r0, r5
 8004d0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d0e:	f000 b817 	b.w	8004d40 <_write_r>

08004d12 <__sseek>:
 8004d12:	b510      	push	{r4, lr}
 8004d14:	460c      	mov	r4, r1
 8004d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d1a:	f000 f855 	bl	8004dc8 <_lseek_r>
 8004d1e:	1c43      	adds	r3, r0, #1
 8004d20:	89a3      	ldrh	r3, [r4, #12]
 8004d22:	bf15      	itete	ne
 8004d24:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d2e:	81a3      	strheq	r3, [r4, #12]
 8004d30:	bf18      	it	ne
 8004d32:	81a3      	strhne	r3, [r4, #12]
 8004d34:	bd10      	pop	{r4, pc}

08004d36 <__sclose>:
 8004d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d3a:	f000 b813 	b.w	8004d64 <_close_r>
	...

08004d40 <_write_r>:
 8004d40:	b538      	push	{r3, r4, r5, lr}
 8004d42:	4d07      	ldr	r5, [pc, #28]	; (8004d60 <_write_r+0x20>)
 8004d44:	4604      	mov	r4, r0
 8004d46:	4608      	mov	r0, r1
 8004d48:	4611      	mov	r1, r2
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	602a      	str	r2, [r5, #0]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	f7fc f8bb 	bl	8000eca <_write>
 8004d54:	1c43      	adds	r3, r0, #1
 8004d56:	d102      	bne.n	8004d5e <_write_r+0x1e>
 8004d58:	682b      	ldr	r3, [r5, #0]
 8004d5a:	b103      	cbz	r3, 8004d5e <_write_r+0x1e>
 8004d5c:	6023      	str	r3, [r4, #0]
 8004d5e:	bd38      	pop	{r3, r4, r5, pc}
 8004d60:	20000160 	.word	0x20000160

08004d64 <_close_r>:
 8004d64:	b538      	push	{r3, r4, r5, lr}
 8004d66:	4d06      	ldr	r5, [pc, #24]	; (8004d80 <_close_r+0x1c>)
 8004d68:	2300      	movs	r3, #0
 8004d6a:	4604      	mov	r4, r0
 8004d6c:	4608      	mov	r0, r1
 8004d6e:	602b      	str	r3, [r5, #0]
 8004d70:	f7fc f8c7 	bl	8000f02 <_close>
 8004d74:	1c43      	adds	r3, r0, #1
 8004d76:	d102      	bne.n	8004d7e <_close_r+0x1a>
 8004d78:	682b      	ldr	r3, [r5, #0]
 8004d7a:	b103      	cbz	r3, 8004d7e <_close_r+0x1a>
 8004d7c:	6023      	str	r3, [r4, #0]
 8004d7e:	bd38      	pop	{r3, r4, r5, pc}
 8004d80:	20000160 	.word	0x20000160

08004d84 <_fstat_r>:
 8004d84:	b538      	push	{r3, r4, r5, lr}
 8004d86:	4d07      	ldr	r5, [pc, #28]	; (8004da4 <_fstat_r+0x20>)
 8004d88:	2300      	movs	r3, #0
 8004d8a:	4604      	mov	r4, r0
 8004d8c:	4608      	mov	r0, r1
 8004d8e:	4611      	mov	r1, r2
 8004d90:	602b      	str	r3, [r5, #0]
 8004d92:	f7fc f8c2 	bl	8000f1a <_fstat>
 8004d96:	1c43      	adds	r3, r0, #1
 8004d98:	d102      	bne.n	8004da0 <_fstat_r+0x1c>
 8004d9a:	682b      	ldr	r3, [r5, #0]
 8004d9c:	b103      	cbz	r3, 8004da0 <_fstat_r+0x1c>
 8004d9e:	6023      	str	r3, [r4, #0]
 8004da0:	bd38      	pop	{r3, r4, r5, pc}
 8004da2:	bf00      	nop
 8004da4:	20000160 	.word	0x20000160

08004da8 <_isatty_r>:
 8004da8:	b538      	push	{r3, r4, r5, lr}
 8004daa:	4d06      	ldr	r5, [pc, #24]	; (8004dc4 <_isatty_r+0x1c>)
 8004dac:	2300      	movs	r3, #0
 8004dae:	4604      	mov	r4, r0
 8004db0:	4608      	mov	r0, r1
 8004db2:	602b      	str	r3, [r5, #0]
 8004db4:	f7fc f8c1 	bl	8000f3a <_isatty>
 8004db8:	1c43      	adds	r3, r0, #1
 8004dba:	d102      	bne.n	8004dc2 <_isatty_r+0x1a>
 8004dbc:	682b      	ldr	r3, [r5, #0]
 8004dbe:	b103      	cbz	r3, 8004dc2 <_isatty_r+0x1a>
 8004dc0:	6023      	str	r3, [r4, #0]
 8004dc2:	bd38      	pop	{r3, r4, r5, pc}
 8004dc4:	20000160 	.word	0x20000160

08004dc8 <_lseek_r>:
 8004dc8:	b538      	push	{r3, r4, r5, lr}
 8004dca:	4d07      	ldr	r5, [pc, #28]	; (8004de8 <_lseek_r+0x20>)
 8004dcc:	4604      	mov	r4, r0
 8004dce:	4608      	mov	r0, r1
 8004dd0:	4611      	mov	r1, r2
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	602a      	str	r2, [r5, #0]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	f7fc f8ba 	bl	8000f50 <_lseek>
 8004ddc:	1c43      	adds	r3, r0, #1
 8004dde:	d102      	bne.n	8004de6 <_lseek_r+0x1e>
 8004de0:	682b      	ldr	r3, [r5, #0]
 8004de2:	b103      	cbz	r3, 8004de6 <_lseek_r+0x1e>
 8004de4:	6023      	str	r3, [r4, #0]
 8004de6:	bd38      	pop	{r3, r4, r5, pc}
 8004de8:	20000160 	.word	0x20000160

08004dec <__malloc_lock>:
 8004dec:	4801      	ldr	r0, [pc, #4]	; (8004df4 <__malloc_lock+0x8>)
 8004dee:	f7ff bb1d 	b.w	800442c <__retarget_lock_acquire_recursive>
 8004df2:	bf00      	nop
 8004df4:	20000154 	.word	0x20000154

08004df8 <__malloc_unlock>:
 8004df8:	4801      	ldr	r0, [pc, #4]	; (8004e00 <__malloc_unlock+0x8>)
 8004dfa:	f7ff bb18 	b.w	800442e <__retarget_lock_release_recursive>
 8004dfe:	bf00      	nop
 8004e00:	20000154 	.word	0x20000154

08004e04 <_read_r>:
 8004e04:	b538      	push	{r3, r4, r5, lr}
 8004e06:	4d07      	ldr	r5, [pc, #28]	; (8004e24 <_read_r+0x20>)
 8004e08:	4604      	mov	r4, r0
 8004e0a:	4608      	mov	r0, r1
 8004e0c:	4611      	mov	r1, r2
 8004e0e:	2200      	movs	r2, #0
 8004e10:	602a      	str	r2, [r5, #0]
 8004e12:	461a      	mov	r2, r3
 8004e14:	f7fc f83c 	bl	8000e90 <_read>
 8004e18:	1c43      	adds	r3, r0, #1
 8004e1a:	d102      	bne.n	8004e22 <_read_r+0x1e>
 8004e1c:	682b      	ldr	r3, [r5, #0]
 8004e1e:	b103      	cbz	r3, 8004e22 <_read_r+0x1e>
 8004e20:	6023      	str	r3, [r4, #0]
 8004e22:	bd38      	pop	{r3, r4, r5, pc}
 8004e24:	20000160 	.word	0x20000160

08004e28 <_init>:
 8004e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e2a:	bf00      	nop
 8004e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e2e:	bc08      	pop	{r3}
 8004e30:	469e      	mov	lr, r3
 8004e32:	4770      	bx	lr

08004e34 <_fini>:
 8004e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e36:	bf00      	nop
 8004e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e3a:	bc08      	pop	{r3}
 8004e3c:	469e      	mov	lr, r3
 8004e3e:	4770      	bx	lr
